// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/rpc_resources.proto

#include "sharing/proto/rpc_resources.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace sharing {
namespace proto {
PROTOBUF_CONSTEXPR PublicCertificate::PublicCertificate(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.secret_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.secret_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.public_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.encrypted_metadata_bytes_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_tag_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_time_)*/nullptr
  , /*decltype(_impl_.end_time_)*/nullptr
  , /*decltype(_impl_.for_selected_contacts_)*/ false

  , /*decltype(_impl_.for_self_share_)*/ false
} {}
struct PublicCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PublicCertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PublicCertificateDefaultTypeInternal() {}
  union {
    PublicCertificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PublicCertificateDefaultTypeInternal _PublicCertificate_default_instance_;
PROTOBUF_CONSTEXPR Contact_Identifier::Contact_Identifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identifier_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct Contact_IdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Contact_IdentifierDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Contact_IdentifierDefaultTypeInternal() {}
  union {
    Contact_Identifier _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Contact_IdentifierDefaultTypeInternal _Contact_Identifier_default_instance_;
PROTOBUF_CONSTEXPR Contact::Contact(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.identifier_)*/nullptr
  , /*decltype(_impl_.is_selected_)*/ false

  , /*decltype(_impl_.is_self_)*/ false
} {}
struct ContactDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactDefaultTypeInternal() {}
  union {
    Contact _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactDefaultTypeInternal _Contact_default_instance_;
PROTOBUF_CONSTEXPR ContactRecord::ContactRecord(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.identifiers_)*/{}
  , /*decltype(_impl_.id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.person_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.image_url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 0

  , /*decltype(_impl_.is_reachable_)*/ false

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ContactRecordDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ContactRecordDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ContactRecordDefaultTypeInternal() {}
  union {
    ContactRecord _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ContactRecordDefaultTypeInternal _ContactRecord_default_instance_;
PROTOBUF_CONSTEXPR ShareTarget::ShareTarget(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_certificates_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ShareTargetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareTargetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareTargetDefaultTypeInternal() {}
  union {
    ShareTarget _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareTargetDefaultTypeInternal _ShareTarget_default_instance_;
PROTOBUF_CONSTEXPR Device::Device(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.contacts_)*/{}
  , /*decltype(_impl_.public_certificates_)*/{}
  , /*decltype(_impl_.name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.display_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceDefaultTypeInternal() {}
  union {
    Device _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceDefaultTypeInternal _Device_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace proto {
bool ContactRecord_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    ContactRecord_Type_strings[3] = {};

static const char ContactRecord_Type_names[] = {
    "DEVICE_CONTACT"
    "GOOGLE_CONTACT"
    "UNKNOWN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ContactRecord_Type_entries[] =
    {
        {{&ContactRecord_Type_names[0], 14}, 2},
        {{&ContactRecord_Type_names[14], 14}, 1},
        {{&ContactRecord_Type_names[28], 7}, 0},
};

static const int ContactRecord_Type_entries_by_number[] = {
    2,  // 0 -> UNKNOWN
    1,  // 1 -> GOOGLE_CONTACT
    0,  // 2 -> DEVICE_CONTACT
};

const std::string& ContactRecord_Type_Name(ContactRecord_Type value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ContactRecord_Type_entries, ContactRecord_Type_entries_by_number,
          3, ContactRecord_Type_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ContactRecord_Type_entries, ContactRecord_Type_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : ContactRecord_Type_strings[idx].get();
}

bool ContactRecord_Type_Parse(absl::string_view name, ContactRecord_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ContactRecord_Type_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<ContactRecord_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr ContactRecord_Type ContactRecord::UNKNOWN;
constexpr ContactRecord_Type ContactRecord::GOOGLE_CONTACT;
constexpr ContactRecord_Type ContactRecord::DEVICE_CONTACT;
constexpr ContactRecord_Type ContactRecord::Type_MIN;
constexpr ContactRecord_Type ContactRecord::Type_MAX;
constexpr int ContactRecord::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
// ===================================================================

class PublicCertificate::_Internal {
 public:
  using HasBits = decltype(std::declval<PublicCertificate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PublicCertificate, _impl_._has_bits_);
  static const ::nearby::sharing::proto::Timestamp& start_time(const PublicCertificate* msg);
  static void set_has_start_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::sharing::proto::Timestamp& end_time(const PublicCertificate* msg);
  static void set_has_end_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::sharing::proto::Timestamp&
PublicCertificate::_Internal::start_time(const PublicCertificate* msg) {
  return *msg->_impl_.start_time_;
}
const ::nearby::sharing::proto::Timestamp&
PublicCertificate::_Internal::end_time(const PublicCertificate* msg) {
  return *msg->_impl_.end_time_;
}
void PublicCertificate::clear_start_time() {
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void PublicCertificate::clear_end_time() {
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
PublicCertificate::PublicCertificate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.PublicCertificate)
}
PublicCertificate::PublicCertificate(const PublicCertificate& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PublicCertificate* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.secret_id_) {}

    , decltype(_impl_.secret_key_) {}

    , decltype(_impl_.public_key_) {}

    , decltype(_impl_.metadata_encryption_key_) {}

    , decltype(_impl_.encrypted_metadata_bytes_) {}

    , decltype(_impl_.metadata_encryption_key_tag_) {}

    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.for_selected_contacts_) {}

    , decltype(_impl_.for_self_share_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_id().empty()) {
    _this->_impl_.secret_id_.Set(from._internal_secret_id(), _this->GetArenaForAllocation());
  }
  _impl_.secret_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_key().empty()) {
    _this->_impl_.secret_key_.Set(from._internal_secret_key(), _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_public_key().empty()) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key().empty()) {
    _this->_impl_.metadata_encryption_key_.Set(from._internal_metadata_encryption_key(), _this->GetArenaForAllocation());
  }
  _impl_.encrypted_metadata_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_metadata_bytes().empty()) {
    _this->_impl_.encrypted_metadata_bytes_.Set(from._internal_encrypted_metadata_bytes(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key_tag().empty()) {
    _this->_impl_.metadata_encryption_key_tag_.Set(from._internal_metadata_encryption_key_tag(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.start_time_ = new ::nearby::sharing::proto::Timestamp(*from._impl_.start_time_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.end_time_ = new ::nearby::sharing::proto::Timestamp(*from._impl_.end_time_);
  }
  ::memcpy(&_impl_.for_selected_contacts_, &from._impl_.for_selected_contacts_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.for_self_share_) -
    reinterpret_cast<char*>(&_impl_.for_selected_contacts_)) + sizeof(_impl_.for_self_share_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.PublicCertificate)
}

inline void PublicCertificate::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.secret_id_) {}

    , decltype(_impl_.secret_key_) {}

    , decltype(_impl_.public_key_) {}

    , decltype(_impl_.metadata_encryption_key_) {}

    , decltype(_impl_.encrypted_metadata_bytes_) {}

    , decltype(_impl_.metadata_encryption_key_tag_) {}

    , decltype(_impl_.start_time_){nullptr}
    , decltype(_impl_.end_time_){nullptr}
    , decltype(_impl_.for_selected_contacts_) { false }

    , decltype(_impl_.for_self_share_) { false }

  };
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.secret_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_metadata_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_tag_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PublicCertificate::~PublicCertificate() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.PublicCertificate)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PublicCertificate::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.secret_id_.Destroy();
  _impl_.secret_key_.Destroy();
  _impl_.public_key_.Destroy();
  _impl_.metadata_encryption_key_.Destroy();
  _impl_.encrypted_metadata_bytes_.Destroy();
  _impl_.metadata_encryption_key_tag_.Destroy();
  if (this != internal_default_instance()) delete _impl_.start_time_;
  if (this != internal_default_instance()) delete _impl_.end_time_;
}

void PublicCertificate::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PublicCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.PublicCertificate)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secret_id_.ClearToEmpty();
  _impl_.secret_key_.ClearToEmpty();
  _impl_.public_key_.ClearToEmpty();
  _impl_.metadata_encryption_key_.ClearToEmpty();
  _impl_.encrypted_metadata_bytes_.ClearToEmpty();
  _impl_.metadata_encryption_key_tag_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
  }
  ::memset(&_impl_.for_selected_contacts_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.for_self_share_) -
      reinterpret_cast<char*>(&_impl_.for_selected_contacts_)) + sizeof(_impl_.for_self_share_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PublicCertificate::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes secret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_secret_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes secret_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_secret_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.sharing.proto.Timestamp start_time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_start_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.sharing.proto.Timestamp end_time = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_end_time(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool for_selected_contacts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.for_selected_contacts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_metadata_encryption_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes encrypted_metadata_bytes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_encrypted_metadata_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_metadata_encryption_key_tag();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool for_self_share = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 80)) {
          _impl_.for_self_share_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PublicCertificate::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.PublicCertificate)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    const std::string& _s = this->_internal_secret_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes secret_key = 2;
  if (!this->_internal_secret_key().empty()) {
    const std::string& _s = this->_internal_secret_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // bytes public_key = 3;
  if (!this->_internal_public_key().empty()) {
    const std::string& _s = this->_internal_public_key();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.sharing.proto.Timestamp start_time = 4;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::start_time(this),
        _Internal::start_time(this).GetCachedSize(), target, stream);
  }

  // .nearby.sharing.proto.Timestamp end_time = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::end_time(this),
        _Internal::end_time(this).GetCachedSize(), target, stream);
  }

  // bool for_selected_contacts = 6;
  if (this->_internal_for_selected_contacts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_for_selected_contacts(), target);
  }

  // bytes metadata_encryption_key = 7;
  if (!this->_internal_metadata_encryption_key().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes encrypted_metadata_bytes = 8;
  if (!this->_internal_encrypted_metadata_bytes().empty()) {
    const std::string& _s = this->_internal_encrypted_metadata_bytes();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // bytes metadata_encryption_key_tag = 9;
  if (!this->_internal_metadata_encryption_key_tag().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_tag();
    target = stream->WriteBytesMaybeAliased(9, _s, target);
  }

  // bool for_self_share = 10;
  if (this->_internal_for_self_share() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        10, this->_internal_for_self_share(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.PublicCertificate)
  return target;
}

::size_t PublicCertificate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.PublicCertificate)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_id());
  }

  // bytes secret_key = 2;
  if (!this->_internal_secret_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_key());
  }

  // bytes public_key = 3;
  if (!this->_internal_public_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_public_key());
  }

  // bytes metadata_encryption_key = 7;
  if (!this->_internal_metadata_encryption_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key());
  }

  // bytes encrypted_metadata_bytes = 8;
  if (!this->_internal_encrypted_metadata_bytes().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_metadata_bytes());
  }

  // bytes metadata_encryption_key_tag = 9;
  if (!this->_internal_metadata_encryption_key_tag().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_tag());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .nearby.sharing.proto.Timestamp start_time = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.start_time_);
    }

    // .nearby.sharing.proto.Timestamp end_time = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.end_time_);
    }

  }
  // bool for_selected_contacts = 6;
  if (this->_internal_for_selected_contacts() != 0) {
    total_size += 2;
  }

  // bool for_self_share = 10;
  if (this->_internal_for_self_share() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PublicCertificate::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PublicCertificate*>(
      &from));
}

void PublicCertificate::MergeFrom(const PublicCertificate& from) {
  PublicCertificate* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.PublicCertificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret_id().empty()) {
    _this->_internal_set_secret_id(from._internal_secret_id());
  }
  if (!from._internal_secret_key().empty()) {
    _this->_internal_set_secret_key(from._internal_secret_key());
  }
  if (!from._internal_public_key().empty()) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  if (!from._internal_metadata_encryption_key().empty()) {
    _this->_internal_set_metadata_encryption_key(from._internal_metadata_encryption_key());
  }
  if (!from._internal_encrypted_metadata_bytes().empty()) {
    _this->_internal_set_encrypted_metadata_bytes(from._internal_encrypted_metadata_bytes());
  }
  if (!from._internal_metadata_encryption_key_tag().empty()) {
    _this->_internal_set_metadata_encryption_key_tag(from._internal_metadata_encryption_key_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_start_time()->::nearby::sharing::proto::Timestamp::MergeFrom(
          from._internal_start_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_end_time()->::nearby::sharing::proto::Timestamp::MergeFrom(
          from._internal_end_time());
    }
  }
  if (from._internal_for_selected_contacts() != 0) {
    _this->_internal_set_for_selected_contacts(from._internal_for_selected_contacts());
  }
  if (from._internal_for_self_share() != 0) {
    _this->_internal_set_for_self_share(from._internal_for_self_share());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PublicCertificate::CopyFrom(const PublicCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.PublicCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PublicCertificate::IsInitialized() const {
  return true;
}

void PublicCertificate::InternalSwap(PublicCertificate* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_id_, lhs_arena,
                                       &other->_impl_.secret_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_key_, lhs_arena,
                                       &other->_impl_.secret_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_, lhs_arena,
                                       &other->_impl_.public_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_bytes_, lhs_arena,
                                       &other->_impl_.encrypted_metadata_bytes_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_tag_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_tag_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PublicCertificate, _impl_.for_self_share_)
      + sizeof(PublicCertificate::_impl_.for_self_share_)
      - PROTOBUF_FIELD_OFFSET(PublicCertificate, _impl_.start_time_)>(
          reinterpret_cast<char*>(&_impl_.start_time_),
          reinterpret_cast<char*>(&other->_impl_.start_time_));
}

std::string PublicCertificate::GetTypeName() const {
  return "nearby.sharing.proto.PublicCertificate";
}

// ===================================================================

class Contact_Identifier::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::nearby::sharing::proto::Contact_Identifier, _impl_._oneof_case_);
};

Contact_Identifier::Contact_Identifier(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.Contact.Identifier)
}
Contact_Identifier::Contact_Identifier(const Contact_Identifier& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Contact_Identifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clear_has_identifier();
  switch (from.identifier_case()) {
    case kObfuscatedGaia: {
      _this->_internal_set_obfuscated_gaia(from._internal_obfuscated_gaia());
      break;
    }
    case kPhoneNumber: {
      _this->_internal_set_phone_number(from._internal_phone_number());
      break;
    }
    case kAccountName: {
      _this->_internal_set_account_name(from._internal_account_name());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.Contact.Identifier)
}

inline void Contact_Identifier::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.identifier_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_identifier();
}

Contact_Identifier::~Contact_Identifier() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.Contact.Identifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contact_Identifier::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_identifier()) {
    clear_identifier();
  }
}

void Contact_Identifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contact_Identifier::clear_identifier() {
// @@protoc_insertion_point(one_of_clear_start:nearby.sharing.proto.Contact.Identifier)
  switch (identifier_case()) {
    case kObfuscatedGaia: {
      _impl_.identifier_.obfuscated_gaia_.Destroy();
      break;
    }
    case kPhoneNumber: {
      _impl_.identifier_.phone_number_.Destroy();
      break;
    }
    case kAccountName: {
      _impl_.identifier_.account_name_.Destroy();
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = IDENTIFIER_NOT_SET;
}


void Contact_Identifier::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.Contact.Identifier)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_identifier();
  _internal_metadata_.Clear<std::string>();
}

const char* Contact_Identifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string obfuscated_gaia = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_obfuscated_gaia();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string phone_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_phone_number();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Contact_Identifier::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.Contact.Identifier)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (identifier_case()) {
    case kObfuscatedGaia: {
      const std::string& _s = this->_internal_obfuscated_gaia();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Contact.Identifier.obfuscated_gaia");
      target = stream->WriteStringMaybeAliased(1, _s, target);
      break;
    }
    case kPhoneNumber: {
      const std::string& _s = this->_internal_phone_number();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Contact.Identifier.phone_number");
      target = stream->WriteStringMaybeAliased(2, _s, target);
      break;
    }
    case kAccountName: {
      const std::string& _s = this->_internal_account_name();
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Contact.Identifier.account_name");
      target = stream->WriteStringMaybeAliased(3, _s, target);
      break;
    }
    default: ;
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.Contact.Identifier)
  return target;
}

::size_t Contact_Identifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.Contact.Identifier)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (identifier_case()) {
    // string obfuscated_gaia = 1;
    case kObfuscatedGaia: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_obfuscated_gaia());
      break;
    }
    // string phone_number = 2;
    case kPhoneNumber: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_phone_number());
      break;
    }
    // string account_name = 3;
    case kAccountName: {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_account_name());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contact_Identifier::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Contact_Identifier*>(
      &from));
}

void Contact_Identifier::MergeFrom(const Contact_Identifier& from) {
  Contact_Identifier* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.Contact.Identifier)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.identifier_case()) {
    case kObfuscatedGaia: {
      _this->_internal_set_obfuscated_gaia(from._internal_obfuscated_gaia());
      break;
    }
    case kPhoneNumber: {
      _this->_internal_set_phone_number(from._internal_phone_number());
      break;
    }
    case kAccountName: {
      _this->_internal_set_account_name(from._internal_account_name());
      break;
    }
    case IDENTIFIER_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Contact_Identifier::CopyFrom(const Contact_Identifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.Contact.Identifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact_Identifier::IsInitialized() const {
  return true;
}

void Contact_Identifier::InternalSwap(Contact_Identifier* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.identifier_, other->_impl_.identifier_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

std::string Contact_Identifier::GetTypeName() const {
  return "nearby.sharing.proto.Contact.Identifier";
}

// ===================================================================

class Contact::_Internal {
 public:
  using HasBits = decltype(std::declval<Contact>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Contact, _impl_._has_bits_);
  static const ::nearby::sharing::proto::Contact_Identifier& identifier(const Contact* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::nearby::sharing::proto::Contact_Identifier&
Contact::_Internal::identifier(const Contact* msg) {
  return *msg->_impl_.identifier_;
}
Contact::Contact(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.Contact)
}
Contact::Contact(const Contact& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Contact* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.is_selected_) {}

    , decltype(_impl_.is_self_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.identifier_ = new ::nearby::sharing::proto::Contact_Identifier(*from._impl_.identifier_);
  }
  ::memcpy(&_impl_.is_selected_, &from._impl_.is_selected_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_self_) -
    reinterpret_cast<char*>(&_impl_.is_selected_)) + sizeof(_impl_.is_self_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.Contact)
}

inline void Contact::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.is_selected_) { false }

    , decltype(_impl_.is_self_) { false }

  };
}

Contact::~Contact() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.Contact)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Contact::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.identifier_;
}

void Contact::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Contact::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.Contact)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.identifier_ != nullptr);
    _impl_.identifier_->Clear();
  }
  ::memset(&_impl_.is_selected_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_self_) -
      reinterpret_cast<char*>(&_impl_.is_selected_)) + sizeof(_impl_.is_self_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Contact::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.sharing.proto.Contact.Identifier identifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_selected = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.is_selected_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_self = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.is_self_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Contact::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.Contact)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.sharing.proto.Contact.Identifier identifier = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // bool is_selected = 2;
  if (this->_internal_is_selected() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_is_selected(), target);
  }

  // bool is_self = 3;
  if (this->_internal_is_self() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        3, this->_internal_is_self(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.Contact)
  return target;
}

::size_t Contact::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.Contact)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .nearby.sharing.proto.Contact.Identifier identifier = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.identifier_);
  }

  // bool is_selected = 2;
  if (this->_internal_is_selected() != 0) {
    total_size += 2;
  }

  // bool is_self = 3;
  if (this->_internal_is_self() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Contact::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Contact*>(
      &from));
}

void Contact::MergeFrom(const Contact& from) {
  Contact* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.Contact)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_identifier()->::nearby::sharing::proto::Contact_Identifier::MergeFrom(
        from._internal_identifier());
  }
  if (from._internal_is_selected() != 0) {
    _this->_internal_set_is_selected(from._internal_is_selected());
  }
  if (from._internal_is_self() != 0) {
    _this->_internal_set_is_self(from._internal_is_self());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Contact::CopyFrom(const Contact& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.Contact)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Contact::IsInitialized() const {
  return true;
}

void Contact::InternalSwap(Contact* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Contact, _impl_.is_self_)
      + sizeof(Contact::_impl_.is_self_)
      - PROTOBUF_FIELD_OFFSET(Contact, _impl_.identifier_)>(
          reinterpret_cast<char*>(&_impl_.identifier_),
          reinterpret_cast<char*>(&other->_impl_.identifier_));
}

std::string Contact::GetTypeName() const {
  return "nearby.sharing.proto.Contact";
}

// ===================================================================

class ContactRecord::_Internal {
 public:
};

ContactRecord::ContactRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.ContactRecord)
}
ContactRecord::ContactRecord(const ContactRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ContactRecord* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.identifiers_){from._impl_.identifiers_}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.person_name_) {}

    , decltype(_impl_.image_url_) {}

    , decltype(_impl_.type_) {}

    , decltype(_impl_.is_reachable_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    _this->_impl_.id_.Set(from._internal_id(), _this->GetArenaForAllocation());
  }
  _impl_.person_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.person_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_person_name().empty()) {
    _this->_impl_.person_name_.Set(from._internal_person_name(), _this->GetArenaForAllocation());
  }
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_url().empty()) {
    _this->_impl_.image_url_.Set(from._internal_image_url(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.type_, &from._impl_.type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.is_reachable_) -
    reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_reachable_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.ContactRecord)
}

inline void ContactRecord::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.identifiers_){arena}
    , decltype(_impl_.id_) {}

    , decltype(_impl_.person_name_) {}

    , decltype(_impl_.image_url_) {}

    , decltype(_impl_.type_) { 0 }

    , decltype(_impl_.is_reachable_) { false }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.person_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.person_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ContactRecord::~ContactRecord() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.ContactRecord)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ContactRecord::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_identifiers()->~RepeatedPtrField();
  _impl_.id_.Destroy();
  _impl_.person_name_.Destroy();
  _impl_.image_url_.Destroy();
}

void ContactRecord::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ContactRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.ContactRecord)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_identifiers()->Clear();
  _impl_.id_.ClearToEmpty();
  _impl_.person_name_.ClearToEmpty();
  _impl_.image_url_.ClearToEmpty();
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.is_reachable_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.is_reachable_));
  _internal_metadata_.Clear<std::string>();
}

const char* ContactRecord::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string person_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_person_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string image_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_image_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .nearby.sharing.proto.Contact.Identifier identifiers = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_identifiers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.sharing.proto.ContactRecord.Type type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 40)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::nearby::sharing::proto::ContactRecord_Type>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bool is_reachable = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 48)) {
          _impl_.is_reachable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ContactRecord::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.ContactRecord)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    const std::string& _s = this->_internal_id();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ContactRecord.id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string person_name = 2;
  if (!this->_internal_person_name().empty()) {
    const std::string& _s = this->_internal_person_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ContactRecord.person_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string image_url = 3;
  if (!this->_internal_image_url().empty()) {
    const std::string& _s = this->_internal_image_url();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ContactRecord.image_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated .nearby.sharing.proto.Contact.Identifier identifiers = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_identifiers_size()); i < n; i++) {
    const auto& repfield = this->_internal_identifiers(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .nearby.sharing.proto.ContactRecord.Type type = 5;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        5, this->_internal_type(), target);
  }

  // bool is_reachable = 6;
  if (this->_internal_is_reachable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        6, this->_internal_is_reachable(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.ContactRecord)
  return target;
}

::size_t ContactRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.ContactRecord)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nearby.sharing.proto.Contact.Identifier identifiers = 4;
  total_size += 1UL * this->_internal_identifiers_size();
  for (const auto& msg : this->_internal_identifiers()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_id());
  }

  // string person_name = 2;
  if (!this->_internal_person_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_person_name());
  }

  // string image_url = 3;
  if (!this->_internal_image_url().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_image_url());
  }

  // .nearby.sharing.proto.ContactRecord.Type type = 5;
  if (this->_internal_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }

  // bool is_reachable = 6;
  if (this->_internal_is_reachable() != 0) {
    total_size += 2;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ContactRecord::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ContactRecord*>(
      &from));
}

void ContactRecord::MergeFrom(const ContactRecord& from) {
  ContactRecord* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.ContactRecord)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_identifiers()->MergeFrom(from._internal_identifiers());
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (!from._internal_person_name().empty()) {
    _this->_internal_set_person_name(from._internal_person_name());
  }
  if (!from._internal_image_url().empty()) {
    _this->_internal_set_image_url(from._internal_image_url());
  }
  if (from._internal_type() != 0) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_is_reachable() != 0) {
    _this->_internal_set_is_reachable(from._internal_is_reachable());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ContactRecord::CopyFrom(const ContactRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.ContactRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContactRecord::IsInitialized() const {
  return true;
}

void ContactRecord::InternalSwap(ContactRecord* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_identifiers()->InternalSwap(other->_internal_mutable_identifiers());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, lhs_arena,
                                       &other->_impl_.id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.person_name_, lhs_arena,
                                       &other->_impl_.person_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_url_, lhs_arena,
                                       &other->_impl_.image_url_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ContactRecord, _impl_.is_reachable_)
      + sizeof(ContactRecord::_impl_.is_reachable_)
      - PROTOBUF_FIELD_OFFSET(ContactRecord, _impl_.type_)>(
          reinterpret_cast<char*>(&_impl_.type_),
          reinterpret_cast<char*>(&other->_impl_.type_));
}

std::string ContactRecord::GetTypeName() const {
  return "nearby.sharing.proto.ContactRecord";
}

// ===================================================================

class ShareTarget::_Internal {
 public:
};

ShareTarget::ShareTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.ShareTarget)
}
ShareTarget::ShareTarget(const ShareTarget& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ShareTarget* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_certificates_){from._impl_.public_certificates_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.ShareTarget)
}

inline void ShareTarget::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.public_certificates_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

ShareTarget::~ShareTarget() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.ShareTarget)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ShareTarget::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_public_certificates()->~RepeatedPtrField();
}

void ShareTarget::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ShareTarget::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.ShareTarget)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_public_certificates()->Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ShareTarget::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_certificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ShareTarget::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.ShareTarget)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_public_certificates_size()); i < n; i++) {
    const auto& repfield = this->_internal_public_certificates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.ShareTarget)
  return target;
}

::size_t ShareTarget::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.ShareTarget)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 1;
  total_size += 1UL * this->_internal_public_certificates_size();
  for (const auto& msg : this->_internal_public_certificates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShareTarget::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ShareTarget*>(
      &from));
}

void ShareTarget::MergeFrom(const ShareTarget& from) {
  ShareTarget* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.ShareTarget)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_public_certificates()->MergeFrom(from._internal_public_certificates());
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ShareTarget::CopyFrom(const ShareTarget& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.ShareTarget)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShareTarget::IsInitialized() const {
  return true;
}

void ShareTarget::InternalSwap(ShareTarget* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_public_certificates()->InternalSwap(other->_internal_mutable_public_certificates());
}

std::string ShareTarget::GetTypeName() const {
  return "nearby.sharing.proto.ShareTarget";
}

// ===================================================================

class Device::_Internal {
 public:
};

Device::Device(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.Device)
}
Device::Device(const Device& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Device* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.contacts_){from._impl_.contacts_}
    , decltype(_impl_.public_certificates_){from._impl_.public_certificates_}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.display_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), _this->GetArenaForAllocation());
  }
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    _this->_impl_.display_name_.Set(from._internal_display_name(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.Device)
}

inline void Device::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.contacts_){arena}
    , decltype(_impl_.public_certificates_){arena}
    , decltype(_impl_.name_) {}

    , decltype(_impl_.display_name_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.display_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.display_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.Device)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Device::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_contacts()->~RepeatedPtrField();
  _internal_mutable_public_certificates()->~RepeatedPtrField();
  _impl_.name_.Destroy();
  _impl_.display_name_.Destroy();
}

void Device::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.Device)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_contacts()->Clear();
  _internal_mutable_public_certificates()->Clear();
  _impl_.name_.ClearToEmpty();
  _impl_.display_name_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* Device::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .nearby.sharing.proto.Contact contacts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_contacts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_certificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Device::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.Device)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    const std::string& _s = this->_internal_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Device.name");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    const std::string& _s = this->_internal_display_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Device.display_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // repeated .nearby.sharing.proto.Contact contacts = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_contacts_size()); i < n; i++) {
    const auto& repfield = this->_internal_contacts(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 4;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_public_certificates_size()); i < n; i++) {
    const auto& repfield = this->_internal_public_certificates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.Device)
  return target;
}

::size_t Device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.Device)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nearby.sharing.proto.Contact contacts = 3;
  total_size += 1UL * this->_internal_contacts_size();
  for (const auto& msg : this->_internal_contacts()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 4;
  total_size += 1UL * this->_internal_public_certificates_size();
  for (const auto& msg : this->_internal_public_certificates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_name());
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_display_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Device::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Device*>(
      &from));
}

void Device::MergeFrom(const Device& from) {
  Device* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.Device)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_contacts()->MergeFrom(from._internal_contacts());
  _this->_internal_mutable_public_certificates()->MergeFrom(from._internal_public_certificates());
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_display_name().empty()) {
    _this->_internal_set_display_name(from._internal_display_name());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {
  return true;
}

void Device::InternalSwap(Device* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_contacts()->InternalSwap(other->_internal_mutable_contacts());
  _internal_mutable_public_certificates()->InternalSwap(other->_internal_mutable_public_certificates());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, lhs_arena,
                                       &other->_impl_.name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.display_name_, lhs_arena,
                                       &other->_impl_.display_name_, rhs_arena);
}

std::string Device::GetTypeName() const {
  return "nearby.sharing.proto.Device";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::PublicCertificate*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::PublicCertificate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::PublicCertificate >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::Contact_Identifier*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::Contact_Identifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::Contact_Identifier >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::Contact*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::Contact >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::Contact >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::ContactRecord*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::ContactRecord >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::ContactRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::ShareTarget*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::ShareTarget >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::ShareTarget >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::Device*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::Device >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::Device >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
