// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/encrypted_metadata.proto

#include "sharing/proto/encrypted_metadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace sharing {
namespace proto {
PROTOBUF_CONSTEXPR EncryptedMetadata::EncryptedMetadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.full_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.icon_url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bluetooth_mac_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.obfuscated_gaia_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.account_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.model_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.vendor_id_)*/ 0
} {}
struct EncryptedMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EncryptedMetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EncryptedMetadataDefaultTypeInternal() {}
  union {
    EncryptedMetadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EncryptedMetadataDefaultTypeInternal _EncryptedMetadata_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace proto {
// ===================================================================

class EncryptedMetadata::_Internal {
 public:
  using HasBits = decltype(std::declval<EncryptedMetadata>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EncryptedMetadata, _impl_._has_bits_);
  static void set_has_device_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_full_name(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_icon_url(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bluetooth_mac_address(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_obfuscated_gaia_id(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_account_name(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_model_name(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_vendor_id(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
};

EncryptedMetadata::EncryptedMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.EncryptedMetadata)
}
EncryptedMetadata::EncryptedMetadata(const EncryptedMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EncryptedMetadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.full_name_) {}

    , decltype(_impl_.icon_url_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.obfuscated_gaia_id_) {}

    , decltype(_impl_.account_name_) {}

    , decltype(_impl_.model_name_) {}

    , decltype(_impl_.vendor_id_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), _this->GetArenaForAllocation());
  }
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.full_name_.Set(from._internal_full_name(), _this->GetArenaForAllocation());
  }
  _impl_.icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.icon_url_.Set(from._internal_icon_url(), _this->GetArenaForAllocation());
  }
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.bluetooth_mac_address_.Set(from._internal_bluetooth_mac_address(), _this->GetArenaForAllocation());
  }
  _impl_.obfuscated_gaia_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.obfuscated_gaia_id_.Set(from._internal_obfuscated_gaia_id(), _this->GetArenaForAllocation());
  }
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), _this->GetArenaForAllocation());
  }
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.model_name_.Set(from._internal_model_name(), _this->GetArenaForAllocation());
  }
  _this->_impl_.vendor_id_ = from._impl_.vendor_id_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.EncryptedMetadata)
}

inline void EncryptedMetadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.full_name_) {}

    , decltype(_impl_.icon_url_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.obfuscated_gaia_id_) {}

    , decltype(_impl_.account_name_) {}

    , decltype(_impl_.model_name_) {}

    , decltype(_impl_.vendor_id_) { 0 }

  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.icon_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obfuscated_gaia_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EncryptedMetadata::~EncryptedMetadata() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.EncryptedMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EncryptedMetadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
  _impl_.full_name_.Destroy();
  _impl_.icon_url_.Destroy();
  _impl_.bluetooth_mac_address_.Destroy();
  _impl_.obfuscated_gaia_id_.Destroy();
  _impl_.account_name_.Destroy();
  _impl_.model_name_.Destroy();
}

void EncryptedMetadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EncryptedMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.EncryptedMetadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.device_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.full_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.icon_url_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.bluetooth_mac_address_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.obfuscated_gaia_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.account_name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      _impl_.model_name_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.vendor_id_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EncryptedMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional string device_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string full_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string icon_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_icon_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes bluetooth_mac_address = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_bluetooth_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string obfuscated_gaia_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_obfuscated_gaia_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string account_name = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string model_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 vendor_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          _Internal::set_has_vendor_id(&has_bits);
          _impl_.vendor_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EncryptedMetadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.EncryptedMetadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string device_name = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_device_name();
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // optional string full_name = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_full_name();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string icon_url = 3;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_icon_url();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional bytes bluetooth_mac_address = 4;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_bluetooth_mac_address();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional string obfuscated_gaia_id = 5;
  if (cached_has_bits & 0x00000010u) {
    const std::string& _s = this->_internal_obfuscated_gaia_id();
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional string account_name = 6;
  if (cached_has_bits & 0x00000020u) {
    const std::string& _s = this->_internal_account_name();
    target = stream->WriteStringMaybeAliased(6, _s, target);
  }

  // optional string model_name = 7;
  if (cached_has_bits & 0x00000040u) {
    const std::string& _s = this->_internal_model_name();
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional int32 vendor_id = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        8, this->_internal_vendor_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.EncryptedMetadata)
  return target;
}

::size_t EncryptedMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.EncryptedMetadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string device_name = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_device_name());
    }

    // optional string full_name = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_full_name());
    }

    // optional string icon_url = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_icon_url());
    }

    // optional bytes bluetooth_mac_address = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_bluetooth_mac_address());
    }

    // optional string obfuscated_gaia_id = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_obfuscated_gaia_id());
    }

    // optional string account_name = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_account_name());
    }

    // optional string model_name = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_model_name());
    }

    // optional int32 vendor_id = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_vendor_id());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EncryptedMetadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EncryptedMetadata*>(
      &from));
}

void EncryptedMetadata::MergeFrom(const EncryptedMetadata& from) {
  EncryptedMetadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.EncryptedMetadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_device_name(from._internal_device_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_full_name(from._internal_full_name());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_icon_url(from._internal_icon_url());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_bluetooth_mac_address(from._internal_bluetooth_mac_address());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_obfuscated_gaia_id(from._internal_obfuscated_gaia_id());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_account_name(from._internal_account_name());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_set_model_name(from._internal_model_name());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.vendor_id_ = from._impl_.vendor_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EncryptedMetadata::CopyFrom(const EncryptedMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.EncryptedMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptedMetadata::IsInitialized() const {
  return true;
}

void EncryptedMetadata::InternalSwap(EncryptedMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, lhs_arena,
                                       &other->_impl_.device_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.full_name_, lhs_arena,
                                       &other->_impl_.full_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.icon_url_, lhs_arena,
                                       &other->_impl_.icon_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bluetooth_mac_address_, lhs_arena,
                                       &other->_impl_.bluetooth_mac_address_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.obfuscated_gaia_id_, lhs_arena,
                                       &other->_impl_.obfuscated_gaia_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, lhs_arena,
                                       &other->_impl_.account_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.model_name_, lhs_arena,
                                       &other->_impl_.model_name_, rhs_arena);

  swap(_impl_.vendor_id_, other->_impl_.vendor_id_);
}

std::string EncryptedMetadata::GetTypeName() const {
  return "nearby.sharing.proto.EncryptedMetadata";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::EncryptedMetadata*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::EncryptedMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::EncryptedMetadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
