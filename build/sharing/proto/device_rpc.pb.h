// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/device_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fdevice_5frpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fdevice_5frpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "sharing/proto/field_mask.pb.h"
#include "sharing/proto/rpc_resources.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sharing_2fproto_2fdevice_5frpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_2fproto_2fdevice_5frpc_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace sharing {
namespace proto {
class UpdateDeviceRequest;
struct UpdateDeviceRequestDefaultTypeInternal;
extern UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
class UpdateDeviceResponse;
struct UpdateDeviceResponseDefaultTypeInternal;
extern UpdateDeviceResponseDefaultTypeInternal _UpdateDeviceResponse_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template <>
::nearby::sharing::proto::UpdateDeviceRequest* Arena::CreateMaybeMessage<::nearby::sharing::proto::UpdateDeviceRequest>(Arena*);
template <>
::nearby::sharing::proto::UpdateDeviceResponse* Arena::CreateMaybeMessage<::nearby::sharing::proto::UpdateDeviceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace nearby {
namespace sharing {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class UpdateDeviceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.UpdateDeviceRequest) */ {
 public:
  inline UpdateDeviceRequest() : UpdateDeviceRequest(nullptr) {}
  ~UpdateDeviceRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDeviceRequest(const UpdateDeviceRequest& from);
  UpdateDeviceRequest(UpdateDeviceRequest&& from) noexcept
    : UpdateDeviceRequest() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceRequest& operator=(const UpdateDeviceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceRequest& operator=(UpdateDeviceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UpdateDeviceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDeviceRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceRequest*>(
               &_UpdateDeviceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UpdateDeviceRequest& a, UpdateDeviceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDeviceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDeviceRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UpdateDeviceRequest& from);
  void MergeFrom(const UpdateDeviceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateDeviceRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.UpdateDeviceRequest";
  }
  protected:
  explicit UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceFieldNumber = 1,
    kUpdateMaskFieldNumber = 2,
  };
  // .nearby.sharing.proto.Device device = 1;
  bool has_device() const;
  void clear_device() ;
  const ::nearby::sharing::proto::Device& device() const;
  PROTOBUF_NODISCARD ::nearby::sharing::proto::Device* release_device();
  ::nearby::sharing::proto::Device* mutable_device();
  void set_allocated_device(::nearby::sharing::proto::Device* device);
  private:
  const ::nearby::sharing::proto::Device& _internal_device() const;
  ::nearby::sharing::proto::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::nearby::sharing::proto::Device* device);
  ::nearby::sharing::proto::Device* unsafe_arena_release_device();
  // .nearby.sharing.proto.FieldMask update_mask = 2;
  bool has_update_mask() const;
  void clear_update_mask() ;
  const ::nearby::sharing::proto::FieldMask& update_mask() const;
  PROTOBUF_NODISCARD ::nearby::sharing::proto::FieldMask* release_update_mask();
  ::nearby::sharing::proto::FieldMask* mutable_update_mask();
  void set_allocated_update_mask(::nearby::sharing::proto::FieldMask* update_mask);
  private:
  const ::nearby::sharing::proto::FieldMask& _internal_update_mask() const;
  ::nearby::sharing::proto::FieldMask* _internal_mutable_update_mask();
  public:
  void unsafe_arena_set_allocated_update_mask(
      ::nearby::sharing::proto::FieldMask* update_mask);
  ::nearby::sharing::proto::FieldMask* unsafe_arena_release_update_mask();
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.UpdateDeviceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::nearby::sharing::proto::Device* device_;
    ::nearby::sharing::proto::FieldMask* update_mask_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fdevice_5frpc_2eproto;
};// -------------------------------------------------------------------

class UpdateDeviceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.UpdateDeviceResponse) */ {
 public:
  inline UpdateDeviceResponse() : UpdateDeviceResponse(nullptr) {}
  ~UpdateDeviceResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateDeviceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateDeviceResponse(const UpdateDeviceResponse& from);
  UpdateDeviceResponse(UpdateDeviceResponse&& from) noexcept
    : UpdateDeviceResponse() {
    *this = ::std::move(from);
  }

  inline UpdateDeviceResponse& operator=(const UpdateDeviceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateDeviceResponse& operator=(UpdateDeviceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const UpdateDeviceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateDeviceResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateDeviceResponse*>(
               &_UpdateDeviceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UpdateDeviceResponse& a, UpdateDeviceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateDeviceResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateDeviceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateDeviceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateDeviceResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const UpdateDeviceResponse& from);
  void MergeFrom(const UpdateDeviceResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(UpdateDeviceResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.UpdateDeviceResponse";
  }
  protected:
  explicit UpdateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPersonNameFieldNumber = 2,
    kImageUrlFieldNumber = 3,
    kImageTokenFieldNumber = 4,
    kDeviceFieldNumber = 1,
  };
  // string person_name = 2;
  void clear_person_name() ;
  const std::string& person_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_person_name(Arg_&& arg, Args_... args);
  std::string* mutable_person_name();
  PROTOBUF_NODISCARD std::string* release_person_name();
  void set_allocated_person_name(std::string* ptr);

  private:
  const std::string& _internal_person_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_person_name(
      const std::string& value);
  std::string* _internal_mutable_person_name();

  public:
  // string image_url = 3;
  void clear_image_url() ;
  const std::string& image_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_url(Arg_&& arg, Args_... args);
  std::string* mutable_image_url();
  PROTOBUF_NODISCARD std::string* release_image_url();
  void set_allocated_image_url(std::string* ptr);

  private:
  const std::string& _internal_image_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_url(
      const std::string& value);
  std::string* _internal_mutable_image_url();

  public:
  // string image_token = 4;
  void clear_image_token() ;
  const std::string& image_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_token(Arg_&& arg, Args_... args);
  std::string* mutable_image_token();
  PROTOBUF_NODISCARD std::string* release_image_token();
  void set_allocated_image_token(std::string* ptr);

  private:
  const std::string& _internal_image_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_token(
      const std::string& value);
  std::string* _internal_mutable_image_token();

  public:
  // .nearby.sharing.proto.Device device = 1;
  bool has_device() const;
  void clear_device() ;
  const ::nearby::sharing::proto::Device& device() const;
  PROTOBUF_NODISCARD ::nearby::sharing::proto::Device* release_device();
  ::nearby::sharing::proto::Device* mutable_device();
  void set_allocated_device(::nearby::sharing::proto::Device* device);
  private:
  const ::nearby::sharing::proto::Device& _internal_device() const;
  ::nearby::sharing::proto::Device* _internal_mutable_device();
  public:
  void unsafe_arena_set_allocated_device(
      ::nearby::sharing::proto::Device* device);
  ::nearby::sharing::proto::Device* unsafe_arena_release_device();
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.UpdateDeviceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr person_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_token_;
    ::nearby::sharing::proto::Device* device_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fdevice_5frpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// UpdateDeviceRequest

// .nearby.sharing.proto.Device device = 1;
inline bool UpdateDeviceRequest::has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.device_ != nullptr);
  return value;
}
inline const ::nearby::sharing::proto::Device& UpdateDeviceRequest::_internal_device() const {
  const ::nearby::sharing::proto::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::proto::Device&>(
      ::nearby::sharing::proto::_Device_default_instance_);
}
inline const ::nearby::sharing::proto::Device& UpdateDeviceRequest::device() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceRequest.device)
  return _internal_device();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_device(
    ::nearby::sharing::proto::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.proto.UpdateDeviceRequest.device)
}
inline ::nearby::sharing::proto::Device* UpdateDeviceRequest::release_device() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::proto::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceRequest::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceRequest.device)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::proto::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceRequest::_internal_mutable_device() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::proto::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceRequest::mutable_device() {
  ::nearby::sharing::proto::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceRequest.device)
  return _msg;
}
inline void UpdateDeviceRequest::set_allocated_device(::nearby::sharing::proto::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceRequest.device)
}

// .nearby.sharing.proto.FieldMask update_mask = 2;
inline bool UpdateDeviceRequest::has_update_mask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.update_mask_ != nullptr);
  return value;
}
inline const ::nearby::sharing::proto::FieldMask& UpdateDeviceRequest::_internal_update_mask() const {
  const ::nearby::sharing::proto::FieldMask* p = _impl_.update_mask_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::proto::FieldMask&>(
      ::nearby::sharing::proto::_FieldMask_default_instance_);
}
inline const ::nearby::sharing::proto::FieldMask& UpdateDeviceRequest::update_mask() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceRequest.update_mask)
  return _internal_update_mask();
}
inline void UpdateDeviceRequest::unsafe_arena_set_allocated_update_mask(
    ::nearby::sharing::proto::FieldMask* update_mask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  _impl_.update_mask_ = update_mask;
  if (update_mask) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.proto.UpdateDeviceRequest.update_mask)
}
inline ::nearby::sharing::proto::FieldMask* UpdateDeviceRequest::release_update_mask() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::proto::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::proto::FieldMask* UpdateDeviceRequest::unsafe_arena_release_update_mask() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceRequest.update_mask)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::nearby::sharing::proto::FieldMask* temp = _impl_.update_mask_;
  _impl_.update_mask_ = nullptr;
  return temp;
}
inline ::nearby::sharing::proto::FieldMask* UpdateDeviceRequest::_internal_mutable_update_mask() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.update_mask_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::proto::FieldMask>(GetArenaForAllocation());
    _impl_.update_mask_ = p;
  }
  return _impl_.update_mask_;
}
inline ::nearby::sharing::proto::FieldMask* UpdateDeviceRequest::mutable_update_mask() {
  ::nearby::sharing::proto::FieldMask* _msg = _internal_mutable_update_mask();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceRequest.update_mask)
  return _msg;
}
inline void UpdateDeviceRequest::set_allocated_update_mask(::nearby::sharing::proto::FieldMask* update_mask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.update_mask_);
  }
  if (update_mask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_mask));
    if (message_arena != submessage_arena) {
      update_mask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_mask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.update_mask_ = update_mask;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceRequest.update_mask)
}

// -------------------------------------------------------------------

// UpdateDeviceResponse

// .nearby.sharing.proto.Device device = 1;
inline bool UpdateDeviceResponse::has_device() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.device_ != nullptr);
  return value;
}
inline const ::nearby::sharing::proto::Device& UpdateDeviceResponse::_internal_device() const {
  const ::nearby::sharing::proto::Device* p = _impl_.device_;
  return p != nullptr ? *p : reinterpret_cast<const ::nearby::sharing::proto::Device&>(
      ::nearby::sharing::proto::_Device_default_instance_);
}
inline const ::nearby::sharing::proto::Device& UpdateDeviceResponse::device() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceResponse.device)
  return _internal_device();
}
inline void UpdateDeviceResponse::unsafe_arena_set_allocated_device(
    ::nearby::sharing::proto::Device* device) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  _impl_.device_ = device;
  if (device) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:nearby.sharing.proto.UpdateDeviceResponse.device)
}
inline ::nearby::sharing::proto::Device* UpdateDeviceResponse::release_device() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::proto::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceResponse::unsafe_arena_release_device() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceResponse.device)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::nearby::sharing::proto::Device* temp = _impl_.device_;
  _impl_.device_ = nullptr;
  return temp;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceResponse::_internal_mutable_device() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.device_ == nullptr) {
    auto* p = CreateMaybeMessage<::nearby::sharing::proto::Device>(GetArenaForAllocation());
    _impl_.device_ = p;
  }
  return _impl_.device_;
}
inline ::nearby::sharing::proto::Device* UpdateDeviceResponse::mutable_device() {
  ::nearby::sharing::proto::Device* _msg = _internal_mutable_device();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceResponse.device)
  return _msg;
}
inline void UpdateDeviceResponse::set_allocated_device(::nearby::sharing::proto::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.device_);
  }
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device));
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_ = device;
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceResponse.device)
}

// string person_name = 2;
inline void UpdateDeviceResponse::clear_person_name() {
  _impl_.person_name_.ClearToEmpty();
}
inline const std::string& UpdateDeviceResponse::person_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceResponse.person_name)
  return _internal_person_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDeviceResponse::set_person_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.person_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.UpdateDeviceResponse.person_name)
}
inline std::string* UpdateDeviceResponse::mutable_person_name() {
  std::string* _s = _internal_mutable_person_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceResponse.person_name)
  return _s;
}
inline const std::string& UpdateDeviceResponse::_internal_person_name() const {
  return _impl_.person_name_.Get();
}
inline void UpdateDeviceResponse::_internal_set_person_name(const std::string& value) {
  ;


  _impl_.person_name_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::_internal_mutable_person_name() {
  ;
  return _impl_.person_name_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::release_person_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceResponse.person_name)
  return _impl_.person_name_.Release();
}
inline void UpdateDeviceResponse::set_allocated_person_name(std::string* value) {
  _impl_.person_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.person_name_.IsDefault()) {
          _impl_.person_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceResponse.person_name)
}

// string image_url = 3;
inline void UpdateDeviceResponse::clear_image_url() {
  _impl_.image_url_.ClearToEmpty();
}
inline const std::string& UpdateDeviceResponse::image_url() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceResponse.image_url)
  return _internal_image_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDeviceResponse::set_image_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.image_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.UpdateDeviceResponse.image_url)
}
inline std::string* UpdateDeviceResponse::mutable_image_url() {
  std::string* _s = _internal_mutable_image_url();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceResponse.image_url)
  return _s;
}
inline const std::string& UpdateDeviceResponse::_internal_image_url() const {
  return _impl_.image_url_.Get();
}
inline void UpdateDeviceResponse::_internal_set_image_url(const std::string& value) {
  ;


  _impl_.image_url_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::_internal_mutable_image_url() {
  ;
  return _impl_.image_url_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::release_image_url() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceResponse.image_url)
  return _impl_.image_url_.Release();
}
inline void UpdateDeviceResponse::set_allocated_image_url(std::string* value) {
  _impl_.image_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_url_.IsDefault()) {
          _impl_.image_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceResponse.image_url)
}

// string image_token = 4;
inline void UpdateDeviceResponse::clear_image_token() {
  _impl_.image_token_.ClearToEmpty();
}
inline const std::string& UpdateDeviceResponse::image_token() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.UpdateDeviceResponse.image_token)
  return _internal_image_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UpdateDeviceResponse::set_image_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.image_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.UpdateDeviceResponse.image_token)
}
inline std::string* UpdateDeviceResponse::mutable_image_token() {
  std::string* _s = _internal_mutable_image_token();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.UpdateDeviceResponse.image_token)
  return _s;
}
inline const std::string& UpdateDeviceResponse::_internal_image_token() const {
  return _impl_.image_token_.Get();
}
inline void UpdateDeviceResponse::_internal_set_image_token(const std::string& value) {
  ;


  _impl_.image_token_.Set(value, GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::_internal_mutable_image_token() {
  ;
  return _impl_.image_token_.Mutable( GetArenaForAllocation());
}
inline std::string* UpdateDeviceResponse::release_image_token() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.UpdateDeviceResponse.image_token)
  return _impl_.image_token_.Release();
}
inline void UpdateDeviceResponse::set_allocated_image_token(std::string* value) {
  _impl_.image_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_token_.IsDefault()) {
          _impl_.image_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.UpdateDeviceResponse.image_token)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fdevice_5frpc_2eproto_2epb_2eh
