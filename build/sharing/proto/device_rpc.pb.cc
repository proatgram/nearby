// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/device_rpc.proto

#include "sharing/proto/device_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace sharing {
namespace proto {
PROTOBUF_CONSTEXPR UpdateDeviceRequest::UpdateDeviceRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.device_)*/nullptr
  , /*decltype(_impl_.update_mask_)*/nullptr} {}
struct UpdateDeviceRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDeviceRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDeviceRequestDefaultTypeInternal() {}
  union {
    UpdateDeviceRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDeviceRequestDefaultTypeInternal _UpdateDeviceRequest_default_instance_;
PROTOBUF_CONSTEXPR UpdateDeviceResponse::UpdateDeviceResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.person_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.image_url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.image_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.device_)*/nullptr} {}
struct UpdateDeviceResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UpdateDeviceResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UpdateDeviceResponseDefaultTypeInternal() {}
  union {
    UpdateDeviceResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UpdateDeviceResponseDefaultTypeInternal _UpdateDeviceResponse_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace proto {
// ===================================================================

class UpdateDeviceRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateDeviceRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateDeviceRequest, _impl_._has_bits_);
  static const ::nearby::sharing::proto::Device& device(const UpdateDeviceRequest* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::sharing::proto::FieldMask& update_mask(const UpdateDeviceRequest* msg);
  static void set_has_update_mask(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::sharing::proto::Device&
UpdateDeviceRequest::_Internal::device(const UpdateDeviceRequest* msg) {
  return *msg->_impl_.device_;
}
const ::nearby::sharing::proto::FieldMask&
UpdateDeviceRequest::_Internal::update_mask(const UpdateDeviceRequest* msg) {
  return *msg->_impl_.update_mask_;
}
void UpdateDeviceRequest::clear_device() {
  if (_impl_.device_ != nullptr) _impl_.device_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void UpdateDeviceRequest::clear_update_mask() {
  if (_impl_.update_mask_ != nullptr) _impl_.update_mask_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
UpdateDeviceRequest::UpdateDeviceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.UpdateDeviceRequest)
}
UpdateDeviceRequest::UpdateDeviceRequest(const UpdateDeviceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UpdateDeviceRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.device_ = new ::nearby::sharing::proto::Device(*from._impl_.device_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.update_mask_ = new ::nearby::sharing::proto::FieldMask(*from._impl_.update_mask_);
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.UpdateDeviceRequest)
}

inline void UpdateDeviceRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.device_){nullptr}
    , decltype(_impl_.update_mask_){nullptr}
  };
}

UpdateDeviceRequest::~UpdateDeviceRequest() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.UpdateDeviceRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDeviceRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.device_;
  if (this != internal_default_instance()) delete _impl_.update_mask_;
}

void UpdateDeviceRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDeviceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.UpdateDeviceRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.device_ != nullptr);
      _impl_.device_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.update_mask_ != nullptr);
      _impl_.update_mask_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateDeviceRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.sharing.proto.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.sharing.proto.FieldMask update_mask = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_mask(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateDeviceRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.UpdateDeviceRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.sharing.proto.Device device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // .nearby.sharing.proto.FieldMask update_mask = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::update_mask(this),
        _Internal::update_mask(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.UpdateDeviceRequest)
  return target;
}

::size_t UpdateDeviceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.UpdateDeviceRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .nearby.sharing.proto.Device device = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.device_);
    }

    // .nearby.sharing.proto.FieldMask update_mask = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.update_mask_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UpdateDeviceRequest*>(
      &from));
}

void UpdateDeviceRequest::MergeFrom(const UpdateDeviceRequest& from) {
  UpdateDeviceRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.UpdateDeviceRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_device()->::nearby::sharing::proto::Device::MergeFrom(
          from._internal_device());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_update_mask()->::nearby::sharing::proto::FieldMask::MergeFrom(
          from._internal_update_mask());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UpdateDeviceRequest::CopyFrom(const UpdateDeviceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.UpdateDeviceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceRequest::IsInitialized() const {
  return true;
}

void UpdateDeviceRequest::InternalSwap(UpdateDeviceRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateDeviceRequest, _impl_.update_mask_)
      + sizeof(UpdateDeviceRequest::_impl_.update_mask_)
      - PROTOBUF_FIELD_OFFSET(UpdateDeviceRequest, _impl_.device_)>(
          reinterpret_cast<char*>(&_impl_.device_),
          reinterpret_cast<char*>(&other->_impl_.device_));
}

std::string UpdateDeviceRequest::GetTypeName() const {
  return "nearby.sharing.proto.UpdateDeviceRequest";
}

// ===================================================================

class UpdateDeviceResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UpdateDeviceResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UpdateDeviceResponse, _impl_._has_bits_);
  static const ::nearby::sharing::proto::Device& device(const UpdateDeviceResponse* msg);
  static void set_has_device(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::nearby::sharing::proto::Device&
UpdateDeviceResponse::_Internal::device(const UpdateDeviceResponse* msg) {
  return *msg->_impl_.device_;
}
void UpdateDeviceResponse::clear_device() {
  if (_impl_.device_ != nullptr) _impl_.device_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
UpdateDeviceResponse::UpdateDeviceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.UpdateDeviceResponse)
}
UpdateDeviceResponse::UpdateDeviceResponse(const UpdateDeviceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  UpdateDeviceResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.person_name_) {}

    , decltype(_impl_.image_url_) {}

    , decltype(_impl_.image_token_) {}

    , decltype(_impl_.device_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.person_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.person_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_person_name().empty()) {
    _this->_impl_.person_name_.Set(from._internal_person_name(), _this->GetArenaForAllocation());
  }
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_url().empty()) {
    _this->_impl_.image_url_.Set(from._internal_image_url(), _this->GetArenaForAllocation());
  }
  _impl_.image_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image_token().empty()) {
    _this->_impl_.image_token_.Set(from._internal_image_token(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.device_ = new ::nearby::sharing::proto::Device(*from._impl_.device_);
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.UpdateDeviceResponse)
}

inline void UpdateDeviceResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.person_name_) {}

    , decltype(_impl_.image_url_) {}

    , decltype(_impl_.image_token_) {}

    , decltype(_impl_.device_){nullptr}
  };
  _impl_.person_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.person_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.image_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.image_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UpdateDeviceResponse::~UpdateDeviceResponse() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.UpdateDeviceResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UpdateDeviceResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.person_name_.Destroy();
  _impl_.image_url_.Destroy();
  _impl_.image_token_.Destroy();
  if (this != internal_default_instance()) delete _impl_.device_;
}

void UpdateDeviceResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void UpdateDeviceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.UpdateDeviceResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.person_name_.ClearToEmpty();
  _impl_.image_url_.ClearToEmpty();
  _impl_.image_token_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.device_ != nullptr);
    _impl_.device_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* UpdateDeviceResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.sharing.proto.Device device = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string person_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_person_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string image_url = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_image_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string image_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_image_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* UpdateDeviceResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.UpdateDeviceResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.sharing.proto.Device device = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::device(this),
        _Internal::device(this).GetCachedSize(), target, stream);
  }

  // string person_name = 2;
  if (!this->_internal_person_name().empty()) {
    const std::string& _s = this->_internal_person_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.UpdateDeviceResponse.person_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string image_url = 3;
  if (!this->_internal_image_url().empty()) {
    const std::string& _s = this->_internal_image_url();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.UpdateDeviceResponse.image_url");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string image_token = 4;
  if (!this->_internal_image_token().empty()) {
    const std::string& _s = this->_internal_image_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.UpdateDeviceResponse.image_token");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.UpdateDeviceResponse)
  return target;
}

::size_t UpdateDeviceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.UpdateDeviceResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string person_name = 2;
  if (!this->_internal_person_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_person_name());
  }

  // string image_url = 3;
  if (!this->_internal_image_url().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_image_url());
  }

  // string image_token = 4;
  if (!this->_internal_image_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_image_token());
  }

  // .nearby.sharing.proto.Device device = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.device_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateDeviceResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const UpdateDeviceResponse*>(
      &from));
}

void UpdateDeviceResponse::MergeFrom(const UpdateDeviceResponse& from) {
  UpdateDeviceResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.UpdateDeviceResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_person_name().empty()) {
    _this->_internal_set_person_name(from._internal_person_name());
  }
  if (!from._internal_image_url().empty()) {
    _this->_internal_set_image_url(from._internal_image_url());
  }
  if (!from._internal_image_token().empty()) {
    _this->_internal_set_image_token(from._internal_image_token());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_mutable_device()->::nearby::sharing::proto::Device::MergeFrom(
        from._internal_device());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void UpdateDeviceResponse::CopyFrom(const UpdateDeviceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.UpdateDeviceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeviceResponse::IsInitialized() const {
  return true;
}

void UpdateDeviceResponse::InternalSwap(UpdateDeviceResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.person_name_, lhs_arena,
                                       &other->_impl_.person_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_url_, lhs_arena,
                                       &other->_impl_.image_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_token_, lhs_arena,
                                       &other->_impl_.image_token_, rhs_arena);
  swap(_impl_.device_, other->_impl_.device_);
}

std::string UpdateDeviceResponse::GetTypeName() const {
  return "nearby.sharing.proto.UpdateDeviceResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::UpdateDeviceRequest*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::UpdateDeviceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::UpdateDeviceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::UpdateDeviceResponse*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::UpdateDeviceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::UpdateDeviceResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
