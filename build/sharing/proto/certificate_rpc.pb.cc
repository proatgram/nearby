// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/certificate_rpc.proto

#include "sharing/proto/certificate_rpc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace sharing {
namespace proto {
PROTOBUF_CONSTEXPR ListPublicCertificatesRequest::ListPublicCertificatesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.secret_ids_)*/{}
  , /*decltype(_impl_.parent_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.page_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.page_size_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPublicCertificatesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPublicCertificatesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPublicCertificatesRequestDefaultTypeInternal() {}
  union {
    ListPublicCertificatesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPublicCertificatesRequestDefaultTypeInternal _ListPublicCertificatesRequest_default_instance_;
PROTOBUF_CONSTEXPR ListPublicCertificatesResponse::ListPublicCertificatesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.public_certificates_)*/{}
  , /*decltype(_impl_.next_page_token_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ListPublicCertificatesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ListPublicCertificatesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ListPublicCertificatesResponseDefaultTypeInternal() {}
  union {
    ListPublicCertificatesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ListPublicCertificatesResponseDefaultTypeInternal _ListPublicCertificatesResponse_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace proto {
// ===================================================================

class ListPublicCertificatesRequest::_Internal {
 public:
};

ListPublicCertificatesRequest::ListPublicCertificatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.ListPublicCertificatesRequest)
}
ListPublicCertificatesRequest::ListPublicCertificatesRequest(const ListPublicCertificatesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ListPublicCertificatesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_ids_){from._impl_.secret_ids_}
    , decltype(_impl_.parent_) {}

    , decltype(_impl_.page_token_) {}

    , decltype(_impl_.page_size_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_parent().empty()) {
    _this->_impl_.parent_.Set(from._internal_parent(), _this->GetArenaForAllocation());
  }
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_page_token().empty()) {
    _this->_impl_.page_token_.Set(from._internal_page_token(), _this->GetArenaForAllocation());
  }
  _this->_impl_.page_size_ = from._impl_.page_size_;
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.ListPublicCertificatesRequest)
}

inline void ListPublicCertificatesRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_ids_){arena}
    , decltype(_impl_.parent_) {}

    , decltype(_impl_.page_token_) {}

    , decltype(_impl_.page_size_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.parent_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.parent_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.page_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPublicCertificatesRequest::~ListPublicCertificatesRequest() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.ListPublicCertificatesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPublicCertificatesRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_secret_ids()->~RepeatedPtrField();
  _impl_.parent_.Destroy();
  _impl_.page_token_.Destroy();
}

void ListPublicCertificatesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPublicCertificatesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.ListPublicCertificatesRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_secret_ids()->Clear();
  _impl_.parent_.ClearToEmpty();
  _impl_.page_token_.ClearToEmpty();
  _impl_.page_size_ = 0;
  _internal_metadata_.Clear<std::string>();
}

const char* ListPublicCertificatesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string parent = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_parent();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // int32 page_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _impl_.page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string page_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated bytes secret_ids = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_secret_ids();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListPublicCertificatesRequest::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.ListPublicCertificatesRequest)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    const std::string& _s = this->_internal_parent();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ListPublicCertificatesRequest.parent");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_page_size(), target);
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    const std::string& _s = this->_internal_page_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ListPublicCertificatesRequest.page_token");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // repeated bytes secret_ids = 4;
  for (int i = 0, n = this->_internal_secret_ids_size(); i < n; ++i) {
    const auto& s = this->_internal_secret_ids(i);
    target = stream->WriteBytes(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.ListPublicCertificatesRequest)
  return target;
}

::size_t ListPublicCertificatesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.ListPublicCertificatesRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated bytes secret_ids = 4;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_secret_ids().size());
  for (int i = 0, n = _internal_secret_ids().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        _internal_secret_ids().Get(i));
  }

  // string parent = 1;
  if (!this->_internal_parent().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_parent());
  }

  // string page_token = 3;
  if (!this->_internal_page_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_page_token());
  }

  // int32 page_size = 2;
  if (this->_internal_page_size() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPublicCertificatesRequest::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListPublicCertificatesRequest*>(
      &from));
}

void ListPublicCertificatesRequest::MergeFrom(const ListPublicCertificatesRequest& from) {
  ListPublicCertificatesRequest* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.ListPublicCertificatesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_secret_ids()->MergeFrom(from._internal_secret_ids());
  if (!from._internal_parent().empty()) {
    _this->_internal_set_parent(from._internal_parent());
  }
  if (!from._internal_page_token().empty()) {
    _this->_internal_set_page_token(from._internal_page_token());
  }
  if (from._internal_page_size() != 0) {
    _this->_internal_set_page_size(from._internal_page_size());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListPublicCertificatesRequest::CopyFrom(const ListPublicCertificatesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.ListPublicCertificatesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPublicCertificatesRequest::IsInitialized() const {
  return true;
}

void ListPublicCertificatesRequest::InternalSwap(ListPublicCertificatesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_secret_ids()->InternalSwap(
      other->_internal_mutable_secret_ids());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.parent_, lhs_arena,
                                       &other->_impl_.parent_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.page_token_, lhs_arena,
                                       &other->_impl_.page_token_, rhs_arena);

  swap(_impl_.page_size_, other->_impl_.page_size_);
}

std::string ListPublicCertificatesRequest::GetTypeName() const {
  return "nearby.sharing.proto.ListPublicCertificatesRequest";
}

// ===================================================================

class ListPublicCertificatesResponse::_Internal {
 public:
};

void ListPublicCertificatesResponse::clear_public_certificates() {
  _internal_mutable_public_certificates()->Clear();
}
ListPublicCertificatesResponse::ListPublicCertificatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.ListPublicCertificatesResponse)
}
ListPublicCertificatesResponse::ListPublicCertificatesResponse(const ListPublicCertificatesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ListPublicCertificatesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.public_certificates_){from._impl_.public_certificates_}
    , decltype(_impl_.next_page_token_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_next_page_token().empty()) {
    _this->_impl_.next_page_token_.Set(from._internal_next_page_token(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.ListPublicCertificatesResponse)
}

inline void ListPublicCertificatesResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.public_certificates_){arena}
    , decltype(_impl_.next_page_token_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.next_page_token_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_page_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ListPublicCertificatesResponse::~ListPublicCertificatesResponse() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.ListPublicCertificatesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ListPublicCertificatesResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_public_certificates()->~RepeatedPtrField();
  _impl_.next_page_token_.Destroy();
}

void ListPublicCertificatesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ListPublicCertificatesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.ListPublicCertificatesResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_public_certificates()->Clear();
  _impl_.next_page_token_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* ListPublicCertificatesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string next_page_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_next_page_token();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_public_certificates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ListPublicCertificatesResponse::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.ListPublicCertificatesResponse)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string next_page_token = 1;
  if (!this->_internal_next_page_token().empty()) {
    const std::string& _s = this->_internal_next_page_token();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_public_certificates_size()); i < n; i++) {
    const auto& repfield = this->_internal_public_certificates(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.ListPublicCertificatesResponse)
  return target;
}

::size_t ListPublicCertificatesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.ListPublicCertificatesResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 2;
  total_size += 1UL * this->_internal_public_certificates_size();
  for (const auto& msg : this->_internal_public_certificates()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string next_page_token = 1;
  if (!this->_internal_next_page_token().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_next_page_token());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ListPublicCertificatesResponse::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ListPublicCertificatesResponse*>(
      &from));
}

void ListPublicCertificatesResponse::MergeFrom(const ListPublicCertificatesResponse& from) {
  ListPublicCertificatesResponse* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.ListPublicCertificatesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_public_certificates()->MergeFrom(from._internal_public_certificates());
  if (!from._internal_next_page_token().empty()) {
    _this->_internal_set_next_page_token(from._internal_next_page_token());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ListPublicCertificatesResponse::CopyFrom(const ListPublicCertificatesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.ListPublicCertificatesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPublicCertificatesResponse::IsInitialized() const {
  return true;
}

void ListPublicCertificatesResponse::InternalSwap(ListPublicCertificatesResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _internal_mutable_public_certificates()->InternalSwap(other->_internal_mutable_public_certificates());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_page_token_, lhs_arena,
                                       &other->_impl_.next_page_token_, rhs_arena);
}

std::string ListPublicCertificatesResponse::GetTypeName() const {
  return "nearby.sharing.proto.ListPublicCertificatesResponse";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::ListPublicCertificatesRequest*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::ListPublicCertificatesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::ListPublicCertificatesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::ListPublicCertificatesResponse*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::ListPublicCertificatesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::ListPublicCertificatesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
