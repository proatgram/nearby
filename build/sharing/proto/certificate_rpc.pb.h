// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/certificate_rpc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fcertificate_5frpc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fcertificate_5frpc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "sharing/proto/rpc_resources.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sharing_2fproto_2fcertificate_5frpc_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_2fproto_2fcertificate_5frpc_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace sharing {
namespace proto {
class ListPublicCertificatesRequest;
struct ListPublicCertificatesRequestDefaultTypeInternal;
extern ListPublicCertificatesRequestDefaultTypeInternal _ListPublicCertificatesRequest_default_instance_;
class ListPublicCertificatesResponse;
struct ListPublicCertificatesResponseDefaultTypeInternal;
extern ListPublicCertificatesResponseDefaultTypeInternal _ListPublicCertificatesResponse_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template <>
::nearby::sharing::proto::ListPublicCertificatesRequest* Arena::CreateMaybeMessage<::nearby::sharing::proto::ListPublicCertificatesRequest>(Arena*);
template <>
::nearby::sharing::proto::ListPublicCertificatesResponse* Arena::CreateMaybeMessage<::nearby::sharing::proto::ListPublicCertificatesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace nearby {
namespace sharing {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class ListPublicCertificatesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.ListPublicCertificatesRequest) */ {
 public:
  inline ListPublicCertificatesRequest() : ListPublicCertificatesRequest(nullptr) {}
  ~ListPublicCertificatesRequest() override;
  explicit PROTOBUF_CONSTEXPR ListPublicCertificatesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPublicCertificatesRequest(const ListPublicCertificatesRequest& from);
  ListPublicCertificatesRequest(ListPublicCertificatesRequest&& from) noexcept
    : ListPublicCertificatesRequest() {
    *this = ::std::move(from);
  }

  inline ListPublicCertificatesRequest& operator=(const ListPublicCertificatesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPublicCertificatesRequest& operator=(ListPublicCertificatesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListPublicCertificatesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPublicCertificatesRequest* internal_default_instance() {
    return reinterpret_cast<const ListPublicCertificatesRequest*>(
               &_ListPublicCertificatesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ListPublicCertificatesRequest& a, ListPublicCertificatesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPublicCertificatesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPublicCertificatesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPublicCertificatesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPublicCertificatesRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListPublicCertificatesRequest& from);
  void MergeFrom(const ListPublicCertificatesRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListPublicCertificatesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.ListPublicCertificatesRequest";
  }
  protected:
  explicit ListPublicCertificatesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecretIdsFieldNumber = 4,
    kParentFieldNumber = 1,
    kPageTokenFieldNumber = 3,
    kPageSizeFieldNumber = 2,
  };
  // repeated bytes secret_ids = 4;
  int secret_ids_size() const;
  private:
  int _internal_secret_ids_size() const;

  public:
  void clear_secret_ids() ;
  const std::string& secret_ids(int index) const;
  std::string* mutable_secret_ids(int index);
  void set_secret_ids(int index, const std::string& value);
  void set_secret_ids(int index, std::string&& value);
  void set_secret_ids(int index, const char* value);
  void set_secret_ids(int index, const void* value, std::size_t size);
  void set_secret_ids(int index, absl::string_view value);
  std::string* add_secret_ids();
  void add_secret_ids(const std::string& value);
  void add_secret_ids(std::string&& value);
  void add_secret_ids(const char* value);
  void add_secret_ids(const void* value, std::size_t size);
  void add_secret_ids(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& secret_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_secret_ids();

  private:
  const std::string& _internal_secret_ids(int index) const;
  std::string* _internal_add_secret_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_secret_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_secret_ids();

  public:
  // string parent = 1;
  void clear_parent() ;
  const std::string& parent() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_parent(Arg_&& arg, Args_... args);
  std::string* mutable_parent();
  PROTOBUF_NODISCARD std::string* release_parent();
  void set_allocated_parent(std::string* ptr);

  private:
  const std::string& _internal_parent() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parent(
      const std::string& value);
  std::string* _internal_mutable_parent();

  public:
  // string page_token = 3;
  void clear_page_token() ;
  const std::string& page_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_page_token();
  PROTOBUF_NODISCARD std::string* release_page_token();
  void set_allocated_page_token(std::string* ptr);

  private:
  const std::string& _internal_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_page_token(
      const std::string& value);
  std::string* _internal_mutable_page_token();

  public:
  // int32 page_size = 2;
  void clear_page_size() ;
  ::int32_t page_size() const;
  void set_page_size(::int32_t value);

  private:
  ::int32_t _internal_page_size() const;
  void _internal_set_page_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.ListPublicCertificatesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> secret_ids_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parent_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr page_token_;
    ::int32_t page_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fcertificate_5frpc_2eproto;
};// -------------------------------------------------------------------

class ListPublicCertificatesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.ListPublicCertificatesResponse) */ {
 public:
  inline ListPublicCertificatesResponse() : ListPublicCertificatesResponse(nullptr) {}
  ~ListPublicCertificatesResponse() override;
  explicit PROTOBUF_CONSTEXPR ListPublicCertificatesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListPublicCertificatesResponse(const ListPublicCertificatesResponse& from);
  ListPublicCertificatesResponse(ListPublicCertificatesResponse&& from) noexcept
    : ListPublicCertificatesResponse() {
    *this = ::std::move(from);
  }

  inline ListPublicCertificatesResponse& operator=(const ListPublicCertificatesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListPublicCertificatesResponse& operator=(ListPublicCertificatesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ListPublicCertificatesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListPublicCertificatesResponse* internal_default_instance() {
    return reinterpret_cast<const ListPublicCertificatesResponse*>(
               &_ListPublicCertificatesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListPublicCertificatesResponse& a, ListPublicCertificatesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListPublicCertificatesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListPublicCertificatesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListPublicCertificatesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListPublicCertificatesResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ListPublicCertificatesResponse& from);
  void MergeFrom(const ListPublicCertificatesResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ListPublicCertificatesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.ListPublicCertificatesResponse";
  }
  protected:
  explicit ListPublicCertificatesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicCertificatesFieldNumber = 2,
    kNextPageTokenFieldNumber = 1,
  };
  // repeated .nearby.sharing.proto.PublicCertificate public_certificates = 2;
  int public_certificates_size() const;
  private:
  int _internal_public_certificates_size() const;

  public:
  void clear_public_certificates() ;
  ::nearby::sharing::proto::PublicCertificate* mutable_public_certificates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::proto::PublicCertificate >*
      mutable_public_certificates();
  private:
  const ::nearby::sharing::proto::PublicCertificate& _internal_public_certificates(int index) const;
  ::nearby::sharing::proto::PublicCertificate* _internal_add_public_certificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::nearby::sharing::proto::PublicCertificate>& _internal_public_certificates() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::nearby::sharing::proto::PublicCertificate>* _internal_mutable_public_certificates();
  public:
  const ::nearby::sharing::proto::PublicCertificate& public_certificates(int index) const;
  ::nearby::sharing::proto::PublicCertificate* add_public_certificates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::proto::PublicCertificate >&
      public_certificates() const;
  // string next_page_token = 1;
  void clear_next_page_token() ;
  const std::string& next_page_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_next_page_token(Arg_&& arg, Args_... args);
  std::string* mutable_next_page_token();
  PROTOBUF_NODISCARD std::string* release_next_page_token();
  void set_allocated_next_page_token(std::string* ptr);

  private:
  const std::string& _internal_next_page_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_next_page_token(
      const std::string& value);
  std::string* _internal_mutable_next_page_token();

  public:
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.ListPublicCertificatesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::proto::PublicCertificate > public_certificates_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr next_page_token_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fcertificate_5frpc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ListPublicCertificatesRequest

// string parent = 1;
inline void ListPublicCertificatesRequest::clear_parent() {
  _impl_.parent_.ClearToEmpty();
}
inline const std::string& ListPublicCertificatesRequest::parent() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesRequest.parent)
  return _internal_parent();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPublicCertificatesRequest::set_parent(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.parent_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesRequest.parent)
}
inline std::string* ListPublicCertificatesRequest::mutable_parent() {
  std::string* _s = _internal_mutable_parent();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.ListPublicCertificatesRequest.parent)
  return _s;
}
inline const std::string& ListPublicCertificatesRequest::_internal_parent() const {
  return _impl_.parent_.Get();
}
inline void ListPublicCertificatesRequest::_internal_set_parent(const std::string& value) {
  ;


  _impl_.parent_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesRequest::_internal_mutable_parent() {
  ;
  return _impl_.parent_.Mutable( GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesRequest::release_parent() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.ListPublicCertificatesRequest.parent)
  return _impl_.parent_.Release();
}
inline void ListPublicCertificatesRequest::set_allocated_parent(std::string* value) {
  _impl_.parent_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.parent_.IsDefault()) {
          _impl_.parent_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.ListPublicCertificatesRequest.parent)
}

// int32 page_size = 2;
inline void ListPublicCertificatesRequest::clear_page_size() {
  _impl_.page_size_ = 0;
}
inline ::int32_t ListPublicCertificatesRequest::page_size() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesRequest.page_size)
  return _internal_page_size();
}
inline void ListPublicCertificatesRequest::set_page_size(::int32_t value) {
  _internal_set_page_size(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesRequest.page_size)
}
inline ::int32_t ListPublicCertificatesRequest::_internal_page_size() const {
  return _impl_.page_size_;
}
inline void ListPublicCertificatesRequest::_internal_set_page_size(::int32_t value) {
  ;
  _impl_.page_size_ = value;
}

// string page_token = 3;
inline void ListPublicCertificatesRequest::clear_page_token() {
  _impl_.page_token_.ClearToEmpty();
}
inline const std::string& ListPublicCertificatesRequest::page_token() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesRequest.page_token)
  return _internal_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPublicCertificatesRequest::set_page_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesRequest.page_token)
}
inline std::string* ListPublicCertificatesRequest::mutable_page_token() {
  std::string* _s = _internal_mutable_page_token();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.ListPublicCertificatesRequest.page_token)
  return _s;
}
inline const std::string& ListPublicCertificatesRequest::_internal_page_token() const {
  return _impl_.page_token_.Get();
}
inline void ListPublicCertificatesRequest::_internal_set_page_token(const std::string& value) {
  ;


  _impl_.page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesRequest::_internal_mutable_page_token() {
  ;
  return _impl_.page_token_.Mutable( GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.ListPublicCertificatesRequest.page_token)
  return _impl_.page_token_.Release();
}
inline void ListPublicCertificatesRequest::set_allocated_page_token(std::string* value) {
  _impl_.page_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.page_token_.IsDefault()) {
          _impl_.page_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.ListPublicCertificatesRequest.page_token)
}

// repeated bytes secret_ids = 4;
inline int ListPublicCertificatesRequest::_internal_secret_ids_size() const {
  return _impl_.secret_ids_.size();
}
inline int ListPublicCertificatesRequest::secret_ids_size() const {
  return _internal_secret_ids_size();
}
inline void ListPublicCertificatesRequest::clear_secret_ids() {
  _internal_mutable_secret_ids()->Clear();
}
inline std::string* ListPublicCertificatesRequest::add_secret_ids() {
  std::string* _s = _internal_add_secret_ids();
  // @@protoc_insertion_point(field_add_mutable:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
  return _s;
}
inline const std::string& ListPublicCertificatesRequest::secret_ids(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
  return _internal_secret_ids(index);
}
inline std::string* ListPublicCertificatesRequest::mutable_secret_ids(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
  return _internal_mutable_secret_ids()->Mutable(index);
}
inline void ListPublicCertificatesRequest::set_secret_ids(int index, const std::string& value) {
  _internal_mutable_secret_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::set_secret_ids(int index, std::string&& value) {
  _internal_mutable_secret_ids()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::set_secret_ids(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_secret_ids()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::set_secret_ids(int index, const void* value,
                              std::size_t size) {
  _internal_mutable_secret_ids()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::set_secret_ids(int index, absl::string_view value) {
  _internal_mutable_secret_ids()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::add_secret_ids(const std::string& value) {
  _internal_mutable_secret_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::add_secret_ids(std::string&& value) {
  _internal_mutable_secret_ids()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::add_secret_ids(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_secret_ids()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::add_secret_ids(const void* value, std::size_t size) {
  _internal_mutable_secret_ids()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline void ListPublicCertificatesRequest::add_secret_ids(absl::string_view value) {
  _internal_mutable_secret_ids()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPublicCertificatesRequest::secret_ids() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
  return _internal_secret_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* ListPublicCertificatesRequest::mutable_secret_ids() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.proto.ListPublicCertificatesRequest.secret_ids)
  return _internal_mutable_secret_ids();
}
inline const std::string& ListPublicCertificatesRequest::_internal_secret_ids(int index) const {
  return _internal_secret_ids().Get(index);
}
inline std::string* ListPublicCertificatesRequest::_internal_add_secret_ids() {
  return _internal_mutable_secret_ids()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListPublicCertificatesRequest::_internal_secret_ids() const {
  return _impl_.secret_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListPublicCertificatesRequest::_internal_mutable_secret_ids() {
  return &_impl_.secret_ids_;
}

// -------------------------------------------------------------------

// ListPublicCertificatesResponse

// string next_page_token = 1;
inline void ListPublicCertificatesResponse::clear_next_page_token() {
  _impl_.next_page_token_.ClearToEmpty();
}
inline const std::string& ListPublicCertificatesResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token)
  return _internal_next_page_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ListPublicCertificatesResponse::set_next_page_token(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.next_page_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token)
}
inline std::string* ListPublicCertificatesResponse::mutable_next_page_token() {
  std::string* _s = _internal_mutable_next_page_token();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token)
  return _s;
}
inline const std::string& ListPublicCertificatesResponse::_internal_next_page_token() const {
  return _impl_.next_page_token_.Get();
}
inline void ListPublicCertificatesResponse::_internal_set_next_page_token(const std::string& value) {
  ;


  _impl_.next_page_token_.Set(value, GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesResponse::_internal_mutable_next_page_token() {
  ;
  return _impl_.next_page_token_.Mutable( GetArenaForAllocation());
}
inline std::string* ListPublicCertificatesResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token)
  return _impl_.next_page_token_.Release();
}
inline void ListPublicCertificatesResponse::set_allocated_next_page_token(std::string* value) {
  _impl_.next_page_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.next_page_token_.IsDefault()) {
          _impl_.next_page_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.ListPublicCertificatesResponse.next_page_token)
}

// repeated .nearby.sharing.proto.PublicCertificate public_certificates = 2;
inline int ListPublicCertificatesResponse::_internal_public_certificates_size() const {
  return _impl_.public_certificates_.size();
}
inline int ListPublicCertificatesResponse::public_certificates_size() const {
  return _internal_public_certificates_size();
}
inline ::nearby::sharing::proto::PublicCertificate* ListPublicCertificatesResponse::mutable_public_certificates(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.ListPublicCertificatesResponse.public_certificates)
  return _internal_mutable_public_certificates()->Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::proto::PublicCertificate >*
ListPublicCertificatesResponse::mutable_public_certificates() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.proto.ListPublicCertificatesResponse.public_certificates)
  return _internal_mutable_public_certificates();
}
inline const ::nearby::sharing::proto::PublicCertificate& ListPublicCertificatesResponse::_internal_public_certificates(int index) const {
  return _internal_public_certificates().Get(index);
}
inline const ::nearby::sharing::proto::PublicCertificate& ListPublicCertificatesResponse::public_certificates(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.ListPublicCertificatesResponse.public_certificates)
  return _internal_public_certificates(index);
}
inline ::nearby::sharing::proto::PublicCertificate* ListPublicCertificatesResponse::_internal_add_public_certificates() {
  return _internal_mutable_public_certificates()->Add();
}
inline ::nearby::sharing::proto::PublicCertificate* ListPublicCertificatesResponse::add_public_certificates() {
  ::nearby::sharing::proto::PublicCertificate* _add = _internal_add_public_certificates();
  // @@protoc_insertion_point(field_add:nearby.sharing.proto.ListPublicCertificatesResponse.public_certificates)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::nearby::sharing::proto::PublicCertificate >&
ListPublicCertificatesResponse::public_certificates() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.proto.ListPublicCertificatesResponse.public_certificates)
  return _internal_public_certificates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::nearby::sharing::proto::PublicCertificate>&
ListPublicCertificatesResponse::_internal_public_certificates() const {
  return _impl_.public_certificates_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<::nearby::sharing::proto::PublicCertificate>*
ListPublicCertificatesResponse::_internal_mutable_public_certificates() {
  return &_impl_.public_certificates_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fcertificate_5frpc_2eproto_2epb_2eh
