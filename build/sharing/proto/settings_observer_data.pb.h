// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/settings_observer_data.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace sharing {
namespace proto {
class Data;
struct DataDefaultTypeInternal;
extern DataDefaultTypeInternal _Data_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template <>
::nearby::sharing::proto::Data* Arena::CreateMaybeMessage<::nearby::sharing::proto::Data>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace nearby {
namespace sharing {
namespace proto {
enum Tag : int {
  TAG_NULL = 0,
  TAG_BOOL = 1,
  TAG_INT64 = 2,
  TAG_STRING = 3,
  TAG_STRING_ARRAY = 4,
  Tag_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  Tag_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool Tag_IsValid(int value);
constexpr Tag Tag_MIN = static_cast<Tag>(0);
constexpr Tag Tag_MAX = static_cast<Tag>(4);
constexpr int Tag_ARRAYSIZE = 4 + 1;
const std::string& Tag_Name(Tag value);
template <typename T>
const std::string& Tag_Name(T value) {
  static_assert(std::is_same<T, Tag>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Tag_Name().");
  return Tag_Name(static_cast<Tag>(value));
}
const std::string& Tag_Name(Tag value);
bool Tag_Parse(absl::string_view name, Tag* value);

// ===================================================================


// -------------------------------------------------------------------

class Data final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.Data) */ {
 public:
  inline Data() : Data(nullptr) {}
  ~Data() override;
  explicit PROTOBUF_CONSTEXPR Data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Data(const Data& from);
  Data(Data&& from) noexcept
    : Data() {
    *this = ::std::move(from);
  }

  inline Data& operator=(const Data& from) {
    CopyFrom(from);
    return *this;
  }
  inline Data& operator=(Data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Data& default_instance() {
    return *internal_default_instance();
  }
  static inline const Data* internal_default_instance() {
    return reinterpret_cast<const Data*>(
               &_Data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Data& a, Data& b) {
    a.Swap(&b);
  }
  inline void Swap(Data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Data* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Data>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Data& from);
  void MergeFrom(const Data& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.Data";
  }
  protected:
  explicit Data(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAsStringArrayFieldNumber = 5,
    kAsStringFieldNumber = 4,
    kTagFieldNumber = 1,
    kAsBoolFieldNumber = 2,
    kAsInt64FieldNumber = 3,
  };
  // repeated string as_string_array = 5;
  int as_string_array_size() const;
  private:
  int _internal_as_string_array_size() const;

  public:
  void clear_as_string_array() ;
  const std::string& as_string_array(int index) const;
  std::string* mutable_as_string_array(int index);
  void set_as_string_array(int index, const std::string& value);
  void set_as_string_array(int index, std::string&& value);
  void set_as_string_array(int index, const char* value);
  void set_as_string_array(int index, const char* value, std::size_t size);
  void set_as_string_array(int index, absl::string_view value);
  std::string* add_as_string_array();
  void add_as_string_array(const std::string& value);
  void add_as_string_array(std::string&& value);
  void add_as_string_array(const char* value);
  void add_as_string_array(const char* value, std::size_t size);
  void add_as_string_array(absl::string_view value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& as_string_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_as_string_array();

  private:
  const std::string& _internal_as_string_array(int index) const;
  std::string* _internal_add_as_string_array();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& _internal_as_string_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* _internal_mutable_as_string_array();

  public:
  // optional string as_string = 4;
  bool has_as_string() const;
  void clear_as_string() ;
  const std::string& as_string() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_as_string(Arg_&& arg, Args_... args);
  std::string* mutable_as_string();
  PROTOBUF_NODISCARD std::string* release_as_string();
  void set_allocated_as_string(std::string* ptr);

  private:
  const std::string& _internal_as_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_as_string(
      const std::string& value);
  std::string* _internal_mutable_as_string();

  public:
  // .nearby.sharing.proto.Tag tag = 1;
  void clear_tag() ;
  ::nearby::sharing::proto::Tag tag() const;
  void set_tag(::nearby::sharing::proto::Tag value);

  private:
  ::nearby::sharing::proto::Tag _internal_tag() const;
  void _internal_set_tag(::nearby::sharing::proto::Tag value);

  public:
  // optional bool as_bool = 2;
  bool has_as_bool() const;
  void clear_as_bool() ;
  bool as_bool() const;
  void set_as_bool(bool value);

  private:
  bool _internal_as_bool() const;
  void _internal_set_as_bool(bool value);

  public:
  // optional int64 as_int64 = 3;
  bool has_as_int64() const;
  void clear_as_int64() ;
  ::int64_t as_int64() const;
  void set_as_int64(::int64_t value);

  private:
  ::int64_t _internal_as_int64() const;
  void _internal_set_as_int64(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.Data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> as_string_array_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr as_string_;
    int tag_;
    bool as_bool_;
    ::int64_t as_int64_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Data

// .nearby.sharing.proto.Tag tag = 1;
inline void Data::clear_tag() {
  _impl_.tag_ = 0;
}
inline ::nearby::sharing::proto::Tag Data::tag() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.Data.tag)
  return _internal_tag();
}
inline void Data::set_tag(::nearby::sharing::proto::Tag value) {
   _internal_set_tag(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.tag)
}
inline ::nearby::sharing::proto::Tag Data::_internal_tag() const {
  return static_cast<::nearby::sharing::proto::Tag>(_impl_.tag_);
}
inline void Data::_internal_set_tag(::nearby::sharing::proto::Tag value) {
  ;
  _impl_.tag_ = value;
}

// optional bool as_bool = 2;
inline bool Data::has_as_bool() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Data::clear_as_bool() {
  _impl_.as_bool_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool Data::as_bool() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.Data.as_bool)
  return _internal_as_bool();
}
inline void Data::set_as_bool(bool value) {
  _internal_set_as_bool(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.as_bool)
}
inline bool Data::_internal_as_bool() const {
  return _impl_.as_bool_;
}
inline void Data::_internal_set_as_bool(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.as_bool_ = value;
}

// optional int64 as_int64 = 3;
inline bool Data::has_as_int64() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Data::clear_as_int64() {
  _impl_.as_int64_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int64_t Data::as_int64() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.Data.as_int64)
  return _internal_as_int64();
}
inline void Data::set_as_int64(::int64_t value) {
  _internal_set_as_int64(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.as_int64)
}
inline ::int64_t Data::_internal_as_int64() const {
  return _impl_.as_int64_;
}
inline void Data::_internal_set_as_int64(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.as_int64_ = value;
}

// optional string as_string = 4;
inline bool Data::has_as_string() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Data::clear_as_string() {
  _impl_.as_string_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Data::as_string() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.Data.as_string)
  return _internal_as_string();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Data::set_as_string(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.as_string_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.as_string)
}
inline std::string* Data::mutable_as_string() {
  std::string* _s = _internal_mutable_as_string();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.Data.as_string)
  return _s;
}
inline const std::string& Data::_internal_as_string() const {
  return _impl_.as_string_.Get();
}
inline void Data::_internal_set_as_string(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.as_string_.Set(value, GetArenaForAllocation());
}
inline std::string* Data::_internal_mutable_as_string() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.as_string_.Mutable( GetArenaForAllocation());
}
inline std::string* Data::release_as_string() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.Data.as_string)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.as_string_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.as_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Data::set_allocated_as_string(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.as_string_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.as_string_.IsDefault()) {
          _impl_.as_string_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.Data.as_string)
}

// repeated string as_string_array = 5;
inline int Data::_internal_as_string_array_size() const {
  return _impl_.as_string_array_.size();
}
inline int Data::as_string_array_size() const {
  return _internal_as_string_array_size();
}
inline void Data::clear_as_string_array() {
  _internal_mutable_as_string_array()->Clear();
}
inline std::string* Data::add_as_string_array() {
  std::string* _s = _internal_add_as_string_array();
  // @@protoc_insertion_point(field_add_mutable:nearby.sharing.proto.Data.as_string_array)
  return _s;
}
inline const std::string& Data::as_string_array(int index) const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.Data.as_string_array)
  return _internal_as_string_array(index);
}
inline std::string* Data::mutable_as_string_array(int index) {
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.Data.as_string_array)
  return _internal_mutable_as_string_array()->Mutable(index);
}
inline void Data::set_as_string_array(int index, const std::string& value) {
  _internal_mutable_as_string_array()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::set_as_string_array(int index, std::string&& value) {
  _internal_mutable_as_string_array()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::set_as_string_array(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_as_string_array()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::set_as_string_array(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_as_string_array()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::set_as_string_array(int index, absl::string_view value) {
  _internal_mutable_as_string_array()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::add_as_string_array(const std::string& value) {
  _internal_mutable_as_string_array()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::add_as_string_array(std::string&& value) {
  _internal_mutable_as_string_array()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::add_as_string_array(const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_as_string_array()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::add_as_string_array(const char* value, std::size_t size) {
  _internal_mutable_as_string_array()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:nearby.sharing.proto.Data.as_string_array)
}
inline void Data::add_as_string_array(absl::string_view value) {
  _internal_mutable_as_string_array()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:nearby.sharing.proto.Data.as_string_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Data::as_string_array() const {
  // @@protoc_insertion_point(field_list:nearby.sharing.proto.Data.as_string_array)
  return _internal_as_string_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* Data::mutable_as_string_array() {
  // @@protoc_insertion_point(field_mutable_list:nearby.sharing.proto.Data.as_string_array)
  return _internal_mutable_as_string_array();
}
inline const std::string& Data::_internal_as_string_array(int index) const {
  return _internal_as_string_array().Get(index);
}
inline std::string* Data::_internal_add_as_string_array() {
  return _internal_mutable_as_string_array()->Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Data::_internal_as_string_array() const {
  return _impl_.as_string_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Data::_internal_mutable_as_string_array() {
  return &_impl_.as_string_array_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::nearby::sharing::proto::Tag> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fsettings_5fobserver_5fdata_2eproto_2epb_2eh
