// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/settings_observer_data.proto

#include "sharing/proto/settings_observer_data.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace sharing {
namespace proto {
PROTOBUF_CONSTEXPR Data::Data(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.as_string_array_)*/{}
  , /*decltype(_impl_.as_string_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.tag_)*/ 0

  , /*decltype(_impl_.as_bool_)*/ false

  , /*decltype(_impl_.as_int64_)*/ ::int64_t{0}
} {}
struct DataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DataDefaultTypeInternal() {}
  union {
    Data _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DataDefaultTypeInternal _Data_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
namespace nearby {
namespace sharing {
namespace proto {
bool Tag_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Tag_strings[5] = {};

static const char Tag_names[] = {
    "TAG_BOOL"
    "TAG_INT64"
    "TAG_NULL"
    "TAG_STRING"
    "TAG_STRING_ARRAY"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Tag_entries[] =
    {
        {{&Tag_names[0], 8}, 1},
        {{&Tag_names[8], 9}, 2},
        {{&Tag_names[17], 8}, 0},
        {{&Tag_names[25], 10}, 3},
        {{&Tag_names[35], 16}, 4},
};

static const int Tag_entries_by_number[] = {
    2,  // 0 -> TAG_NULL
    0,  // 1 -> TAG_BOOL
    1,  // 2 -> TAG_INT64
    3,  // 3 -> TAG_STRING
    4,  // 4 -> TAG_STRING_ARRAY
};

const std::string& Tag_Name(Tag value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Tag_entries, Tag_entries_by_number,
          5, Tag_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Tag_entries, Tag_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Tag_strings[idx].get();
}

bool Tag_Parse(absl::string_view name, Tag* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Tag_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Tag>(int_value);
  }
  return success;
}
// ===================================================================

class Data::_Internal {
 public:
  using HasBits = decltype(std::declval<Data>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Data, _impl_._has_bits_);
  static void set_has_as_bool(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_as_int64(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_as_string(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Data::Data(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.sharing.proto.Data)
}
Data::Data(const Data& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Data* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.as_string_array_){from._impl_.as_string_array_}
    , decltype(_impl_.as_string_) {}

    , decltype(_impl_.tag_) {}

    , decltype(_impl_.as_bool_) {}

    , decltype(_impl_.as_int64_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.as_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.as_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.as_string_.Set(from._internal_as_string(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.tag_, &from._impl_.tag_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.as_int64_) -
    reinterpret_cast<char*>(&_impl_.tag_)) + sizeof(_impl_.as_int64_));
  // @@protoc_insertion_point(copy_constructor:nearby.sharing.proto.Data)
}

inline void Data::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.as_string_array_){arena}
    , decltype(_impl_.as_string_) {}

    , decltype(_impl_.tag_) { 0 }

    , decltype(_impl_.as_bool_) { false }

    , decltype(_impl_.as_int64_) { ::int64_t{0} }

  };
  _impl_.as_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.as_string_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Data::~Data() {
  // @@protoc_insertion_point(destructor:nearby.sharing.proto.Data)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Data::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_as_string_array()->~RepeatedPtrField();
  _impl_.as_string_.Destroy();
}

void Data::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Data::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.sharing.proto.Data)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_as_string_array()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.as_string_.ClearNonDefaultToEmpty();
  }
  _impl_.tag_ = 0;
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.as_bool_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.as_int64_) -
        reinterpret_cast<char*>(&_impl_.as_bool_)) + sizeof(_impl_.as_int64_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Data::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.sharing.proto.Tag tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_tag(static_cast<::nearby::sharing::proto::Tag>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bool as_bool = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_as_bool(&has_bits);
          _impl_.as_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int64 as_int64 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _Internal::set_has_as_int64(&has_bits);
          _impl_.as_int64_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string as_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_as_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated string as_string_array = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_as_string_array();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, nullptr));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Data::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.sharing.proto.Data)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nearby.sharing.proto.Tag tag = 1;
  if (this->_internal_tag() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_tag(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool as_bool = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(
        2, this->_internal_as_bool(), target);
  }

  // optional int64 as_int64 = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_as_int64(), target);
  }

  // optional string as_string = 4;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_as_string();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Data.as_string");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // repeated string as_string_array = 5;
  for (int i = 0, n = this->_internal_as_string_array_size(); i < n; ++i) {
    const auto& s = this->_internal_as_string_array(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        s.data(), static_cast<int>(s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.sharing.proto.Data.as_string_array");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.sharing.proto.Data)
  return target;
}

::size_t Data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.sharing.proto.Data)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string as_string_array = 5;
  total_size += 1 * ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_internal_as_string_array().size());
  for (int i = 0, n = _internal_as_string_array().size(); i < n; ++i) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        _internal_as_string_array().Get(i));
  }

  // optional string as_string = 4;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_as_string());
  }

  // .nearby.sharing.proto.Tag tag = 1;
  if (this->_internal_tag() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_tag());
  }

  if (cached_has_bits & 0x00000006u) {
    // optional bool as_bool = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2;
    }

    // optional int64 as_int64 = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
          this->_internal_as_int64());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Data::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Data*>(
      &from));
}

void Data::MergeFrom(const Data& from) {
  Data* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.sharing.proto.Data)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_as_string_array()->MergeFrom(from._internal_as_string_array());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_as_string(from._internal_as_string());
  }
  if (from._internal_tag() != 0) {
    _this->_internal_set_tag(from._internal_tag());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.as_bool_ = from._impl_.as_bool_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.as_int64_ = from._impl_.as_int64_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Data::CopyFrom(const Data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.sharing.proto.Data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Data::IsInitialized() const {
  return true;
}

void Data::InternalSwap(Data* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_as_string_array()->InternalSwap(
      other->_internal_mutable_as_string_array());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.as_string_, lhs_arena,
                                       &other->_impl_.as_string_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Data, _impl_.as_int64_)
      + sizeof(Data::_impl_.as_int64_)
      - PROTOBUF_FIELD_OFFSET(Data, _impl_.tag_)>(
          reinterpret_cast<char*>(&_impl_.tag_),
          reinterpret_cast<char*>(&other->_impl_.tag_));
}

std::string Data::GetTypeName() const {
  return "nearby.sharing.proto.Data";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::sharing::proto::Data*
Arena::CreateMaybeMessage< ::nearby::sharing::proto::Data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::sharing::proto::Data >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
