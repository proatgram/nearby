// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sharing/proto/encrypted_metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fencrypted_5fmetadata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fencrypted_5fmetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_sharing_2fproto_2fencrypted_5fmetadata_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sharing_2fproto_2fencrypted_5fmetadata_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace sharing {
namespace proto {
class EncryptedMetadata;
struct EncryptedMetadataDefaultTypeInternal;
extern EncryptedMetadataDefaultTypeInternal _EncryptedMetadata_default_instance_;
}  // namespace proto
}  // namespace sharing
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template <>
::nearby::sharing::proto::EncryptedMetadata* Arena::CreateMaybeMessage<::nearby::sharing::proto::EncryptedMetadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace nearby {
namespace sharing {
namespace proto {

// ===================================================================


// -------------------------------------------------------------------

class EncryptedMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.sharing.proto.EncryptedMetadata) */ {
 public:
  inline EncryptedMetadata() : EncryptedMetadata(nullptr) {}
  ~EncryptedMetadata() override;
  explicit PROTOBUF_CONSTEXPR EncryptedMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EncryptedMetadata(const EncryptedMetadata& from);
  EncryptedMetadata(EncryptedMetadata&& from) noexcept
    : EncryptedMetadata() {
    *this = ::std::move(from);
  }

  inline EncryptedMetadata& operator=(const EncryptedMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline EncryptedMetadata& operator=(EncryptedMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EncryptedMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const EncryptedMetadata* internal_default_instance() {
    return reinterpret_cast<const EncryptedMetadata*>(
               &_EncryptedMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EncryptedMetadata& a, EncryptedMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(EncryptedMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EncryptedMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EncryptedMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EncryptedMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EncryptedMetadata& from);
  void MergeFrom(const EncryptedMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EncryptedMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.sharing.proto.EncryptedMetadata";
  }
  protected:
  explicit EncryptedMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 1,
    kFullNameFieldNumber = 2,
    kIconUrlFieldNumber = 3,
    kBluetoothMacAddressFieldNumber = 4,
    kObfuscatedGaiaIdFieldNumber = 5,
    kAccountNameFieldNumber = 6,
    kModelNameFieldNumber = 7,
    kVendorIdFieldNumber = 8,
  };
  // optional string device_name = 1;
  bool has_device_name() const;
  void clear_device_name() ;
  const std::string& device_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* ptr);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // optional string full_name = 2;
  bool has_full_name() const;
  void clear_full_name() ;
  const std::string& full_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_full_name(Arg_&& arg, Args_... args);
  std::string* mutable_full_name();
  PROTOBUF_NODISCARD std::string* release_full_name();
  void set_allocated_full_name(std::string* ptr);

  private:
  const std::string& _internal_full_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_full_name(
      const std::string& value);
  std::string* _internal_mutable_full_name();

  public:
  // optional string icon_url = 3;
  bool has_icon_url() const;
  void clear_icon_url() ;
  const std::string& icon_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_icon_url(Arg_&& arg, Args_... args);
  std::string* mutable_icon_url();
  PROTOBUF_NODISCARD std::string* release_icon_url();
  void set_allocated_icon_url(std::string* ptr);

  private:
  const std::string& _internal_icon_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_icon_url(
      const std::string& value);
  std::string* _internal_mutable_icon_url();

  public:
  // optional bytes bluetooth_mac_address = 4;
  bool has_bluetooth_mac_address() const;
  void clear_bluetooth_mac_address() ;
  const std::string& bluetooth_mac_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bluetooth_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_bluetooth_mac_address();
  PROTOBUF_NODISCARD std::string* release_bluetooth_mac_address();
  void set_allocated_bluetooth_mac_address(std::string* ptr);

  private:
  const std::string& _internal_bluetooth_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluetooth_mac_address(
      const std::string& value);
  std::string* _internal_mutable_bluetooth_mac_address();

  public:
  // optional string obfuscated_gaia_id = 5;
  bool has_obfuscated_gaia_id() const;
  void clear_obfuscated_gaia_id() ;
  const std::string& obfuscated_gaia_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_obfuscated_gaia_id(Arg_&& arg, Args_... args);
  std::string* mutable_obfuscated_gaia_id();
  PROTOBUF_NODISCARD std::string* release_obfuscated_gaia_id();
  void set_allocated_obfuscated_gaia_id(std::string* ptr);

  private:
  const std::string& _internal_obfuscated_gaia_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_obfuscated_gaia_id(
      const std::string& value);
  std::string* _internal_mutable_obfuscated_gaia_id();

  public:
  // optional string account_name = 6;
  bool has_account_name() const;
  void clear_account_name() ;
  const std::string& account_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* ptr);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // optional string model_name = 7;
  bool has_model_name() const;
  void clear_model_name() ;
  const std::string& model_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_model_name(Arg_&& arg, Args_... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* ptr);

  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(
      const std::string& value);
  std::string* _internal_mutable_model_name();

  public:
  // optional int32 vendor_id = 8;
  bool has_vendor_id() const;
  void clear_vendor_id() ;
  ::int32_t vendor_id() const;
  void set_vendor_id(::int32_t value);

  private:
  ::int32_t _internal_vendor_id() const;
  void _internal_set_vendor_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.sharing.proto.EncryptedMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr full_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluetooth_mac_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr obfuscated_gaia_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
    ::int32_t vendor_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_sharing_2fproto_2fencrypted_5fmetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// EncryptedMetadata

// optional string device_name = 1;
inline bool EncryptedMetadata::has_device_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EncryptedMetadata::device_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.device_name)
}
inline std::string* EncryptedMetadata::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.device_name)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void EncryptedMetadata::_internal_set_device_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_device_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.device_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_device_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.device_name)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.device_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_device_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.device_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.device_name)
}

// optional string full_name = 2;
inline bool EncryptedMetadata::has_full_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_full_name() {
  _impl_.full_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EncryptedMetadata::full_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.full_name)
  return _internal_full_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_full_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.full_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.full_name)
}
inline std::string* EncryptedMetadata::mutable_full_name() {
  std::string* _s = _internal_mutable_full_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.full_name)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_full_name() const {
  return _impl_.full_name_.Get();
}
inline void EncryptedMetadata::_internal_set_full_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.full_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_full_name() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.full_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_full_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.full_name)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.full_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.full_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_full_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.full_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.full_name_.IsDefault()) {
          _impl_.full_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.full_name)
}

// optional string icon_url = 3;
inline bool EncryptedMetadata::has_icon_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_icon_url() {
  _impl_.icon_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& EncryptedMetadata::icon_url() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.icon_url)
  return _internal_icon_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_icon_url(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.icon_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.icon_url)
}
inline std::string* EncryptedMetadata::mutable_icon_url() {
  std::string* _s = _internal_mutable_icon_url();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.icon_url)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_icon_url() const {
  return _impl_.icon_url_.Get();
}
inline void EncryptedMetadata::_internal_set_icon_url(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.icon_url_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_icon_url() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.icon_url_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_icon_url() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.icon_url)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.icon_url_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.icon_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_icon_url(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.icon_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.icon_url_.IsDefault()) {
          _impl_.icon_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.icon_url)
}

// optional bytes bluetooth_mac_address = 4;
inline bool EncryptedMetadata::has_bluetooth_mac_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_bluetooth_mac_address() {
  _impl_.bluetooth_mac_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& EncryptedMetadata::bluetooth_mac_address() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.bluetooth_mac_address)
  return _internal_bluetooth_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_bluetooth_mac_address(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.bluetooth_mac_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.bluetooth_mac_address)
}
inline std::string* EncryptedMetadata::mutable_bluetooth_mac_address() {
  std::string* _s = _internal_mutable_bluetooth_mac_address();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.bluetooth_mac_address)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_bluetooth_mac_address() const {
  return _impl_.bluetooth_mac_address_.Get();
}
inline void EncryptedMetadata::_internal_set_bluetooth_mac_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.bluetooth_mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_bluetooth_mac_address() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.bluetooth_mac_address_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_bluetooth_mac_address() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.bluetooth_mac_address)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.bluetooth_mac_address_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_bluetooth_mac_address(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bluetooth_mac_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bluetooth_mac_address_.IsDefault()) {
          _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.bluetooth_mac_address)
}

// optional string obfuscated_gaia_id = 5;
inline bool EncryptedMetadata::has_obfuscated_gaia_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_obfuscated_gaia_id() {
  _impl_.obfuscated_gaia_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& EncryptedMetadata::obfuscated_gaia_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.obfuscated_gaia_id)
  return _internal_obfuscated_gaia_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_obfuscated_gaia_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.obfuscated_gaia_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.obfuscated_gaia_id)
}
inline std::string* EncryptedMetadata::mutable_obfuscated_gaia_id() {
  std::string* _s = _internal_mutable_obfuscated_gaia_id();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.obfuscated_gaia_id)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_obfuscated_gaia_id() const {
  return _impl_.obfuscated_gaia_id_.Get();
}
inline void EncryptedMetadata::_internal_set_obfuscated_gaia_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.obfuscated_gaia_id_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_obfuscated_gaia_id() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.obfuscated_gaia_id_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_obfuscated_gaia_id() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.obfuscated_gaia_id)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.obfuscated_gaia_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.obfuscated_gaia_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_obfuscated_gaia_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.obfuscated_gaia_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.obfuscated_gaia_id_.IsDefault()) {
          _impl_.obfuscated_gaia_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.obfuscated_gaia_id)
}

// optional string account_name = 6;
inline bool EncryptedMetadata::has_account_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_account_name() {
  _impl_.account_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& EncryptedMetadata::account_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.account_name)
}
inline std::string* EncryptedMetadata::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.account_name)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_account_name() const {
  return _impl_.account_name_.Get();
}
inline void EncryptedMetadata::_internal_set_account_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_account_name() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.account_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_account_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.account_name)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.account_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_account_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.account_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.account_name)
}

// optional string model_name = 7;
inline bool EncryptedMetadata::has_model_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_model_name() {
  _impl_.model_name_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& EncryptedMetadata::model_name() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.model_name)
  return _internal_model_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EncryptedMetadata::set_model_name(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.model_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.model_name)
}
inline std::string* EncryptedMetadata::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:nearby.sharing.proto.EncryptedMetadata.model_name)
  return _s;
}
inline const std::string& EncryptedMetadata::_internal_model_name() const {
  return _impl_.model_name_.Get();
}
inline void EncryptedMetadata::_internal_set_model_name(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.model_name_.Set(value, GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::_internal_mutable_model_name() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.model_name_.Mutable( GetArenaForAllocation());
}
inline std::string* EncryptedMetadata::release_model_name() {
  // @@protoc_insertion_point(field_release:nearby.sharing.proto.EncryptedMetadata.model_name)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.model_name_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.model_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EncryptedMetadata::set_allocated_model_name(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.model_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.model_name_.IsDefault()) {
          _impl_.model_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.sharing.proto.EncryptedMetadata.model_name)
}

// optional int32 vendor_id = 8;
inline bool EncryptedMetadata::has_vendor_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void EncryptedMetadata::clear_vendor_id() {
  _impl_.vendor_id_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t EncryptedMetadata::vendor_id() const {
  // @@protoc_insertion_point(field_get:nearby.sharing.proto.EncryptedMetadata.vendor_id)
  return _internal_vendor_id();
}
inline void EncryptedMetadata::set_vendor_id(::int32_t value) {
  _internal_set_vendor_id(value);
  // @@protoc_insertion_point(field_set:nearby.sharing.proto.EncryptedMetadata.vendor_id)
}
inline ::int32_t EncryptedMetadata::_internal_vendor_id() const {
  return _impl_.vendor_id_;
}
inline void EncryptedMetadata::_internal_set_vendor_id(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.vendor_id_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace sharing
}  // namespace nearby


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_sharing_2fproto_2fencrypted_5fmetadata_2eproto_2epb_2eh
