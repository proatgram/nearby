// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/metadata.proto

#include "internal/proto/metadata.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace internal {
PROTOBUF_CONSTEXPR DeviceIdentityMetaData::DeviceIdentityMetaData(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.device_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bluetooth_mac_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.device_type_)*/ 0

  , /*decltype(_impl_.instance_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct DeviceIdentityMetaDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceIdentityMetaDataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceIdentityMetaDataDefaultTypeInternal() {}
  union {
    DeviceIdentityMetaData _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceIdentityMetaDataDefaultTypeInternal _DeviceIdentityMetaData_default_instance_;
PROTOBUF_CONSTEXPR Metadata::Metadata(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.account_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.device_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.user_name_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.device_profile_url_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.bluetooth_mac_address_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.device_type_)*/ 0

  , /*decltype(_impl_.instance_type_)*/ 0

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MetadataDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~MetadataDefaultTypeInternal() {}
  union {
    Metadata _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace nearby {
namespace internal {
bool DeviceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    DeviceType_strings[11] = {};

static const char DeviceType_names[] = {
    "DEVICE_TYPE_AUTOMOTIVE"
    "DEVICE_TYPE_CHROMEOS"
    "DEVICE_TYPE_DISPLAY"
    "DEVICE_TYPE_FOLDABLE"
    "DEVICE_TYPE_LAPTOP"
    "DEVICE_TYPE_PHONE"
    "DEVICE_TYPE_SPEAKER"
    "DEVICE_TYPE_TABLET"
    "DEVICE_TYPE_TV"
    "DEVICE_TYPE_UNKNOWN"
    "DEVICE_TYPE_WATCH"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry DeviceType_entries[] =
    {
        {{&DeviceType_names[0], 22}, 9},
        {{&DeviceType_names[22], 20}, 7},
        {{&DeviceType_names[42], 19}, 3},
        {{&DeviceType_names[61], 20}, 8},
        {{&DeviceType_names[81], 18}, 4},
        {{&DeviceType_names[99], 17}, 1},
        {{&DeviceType_names[116], 19}, 10},
        {{&DeviceType_names[135], 18}, 2},
        {{&DeviceType_names[153], 14}, 5},
        {{&DeviceType_names[167], 19}, 0},
        {{&DeviceType_names[186], 17}, 6},
};

static const int DeviceType_entries_by_number[] = {
    9,  // 0 -> DEVICE_TYPE_UNKNOWN
    5,  // 1 -> DEVICE_TYPE_PHONE
    7,  // 2 -> DEVICE_TYPE_TABLET
    2,  // 3 -> DEVICE_TYPE_DISPLAY
    4,  // 4 -> DEVICE_TYPE_LAPTOP
    8,  // 5 -> DEVICE_TYPE_TV
    10,  // 6 -> DEVICE_TYPE_WATCH
    1,  // 7 -> DEVICE_TYPE_CHROMEOS
    3,  // 8 -> DEVICE_TYPE_FOLDABLE
    0,  // 9 -> DEVICE_TYPE_AUTOMOTIVE
    6,  // 10 -> DEVICE_TYPE_SPEAKER
};

const std::string& DeviceType_Name(DeviceType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          DeviceType_entries, DeviceType_entries_by_number,
          11, DeviceType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      DeviceType_entries, DeviceType_entries_by_number, 11,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : DeviceType_strings[idx].get();
}

bool DeviceType_Parse(absl::string_view name, DeviceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      DeviceType_entries, 11, name, &int_value);
  if (success) {
    *value = static_cast<DeviceType>(int_value);
  }
  return success;
}
bool InstanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    InstanceType_strings[3] = {};

static const char InstanceType_names[] = {
    "INSTANCE_TYPE_MAIN"
    "INSTANCE_TYPE_SECONDARY"
    "INSTANCE_TYPE_UNKNOWN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry InstanceType_entries[] =
    {
        {{&InstanceType_names[0], 18}, 1},
        {{&InstanceType_names[18], 23}, 2},
        {{&InstanceType_names[41], 21}, 0},
};

static const int InstanceType_entries_by_number[] = {
    2,  // 0 -> INSTANCE_TYPE_UNKNOWN
    0,  // 1 -> INSTANCE_TYPE_MAIN
    1,  // 2 -> INSTANCE_TYPE_SECONDARY
};

const std::string& InstanceType_Name(InstanceType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          InstanceType_entries, InstanceType_entries_by_number,
          3, InstanceType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      InstanceType_entries, InstanceType_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : InstanceType_strings[idx].get();
}

bool InstanceType_Parse(absl::string_view name, InstanceType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      InstanceType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<InstanceType>(int_value);
  }
  return success;
}
// ===================================================================

class DeviceIdentityMetaData::_Internal {
 public:
};

DeviceIdentityMetaData::DeviceIdentityMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.DeviceIdentityMetaData)
}
DeviceIdentityMetaData::DeviceIdentityMetaData(const DeviceIdentityMetaData& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeviceIdentityMetaData* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.device_type_) {}

    , decltype(_impl_.instance_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), _this->GetArenaForAllocation());
  }
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetooth_mac_address().empty()) {
    _this->_impl_.bluetooth_mac_address_.Set(from._internal_bluetooth_mac_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.device_type_, &from._impl_.device_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.instance_type_) -
    reinterpret_cast<char*>(&_impl_.device_type_)) + sizeof(_impl_.instance_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.DeviceIdentityMetaData)
}

inline void DeviceIdentityMetaData::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.device_name_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.device_type_) { 0 }

    , decltype(_impl_.instance_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceIdentityMetaData::~DeviceIdentityMetaData() {
  // @@protoc_insertion_point(destructor:nearby.internal.DeviceIdentityMetaData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceIdentityMetaData::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.device_name_.Destroy();
  _impl_.bluetooth_mac_address_.Destroy();
}

void DeviceIdentityMetaData::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceIdentityMetaData::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.DeviceIdentityMetaData)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.device_name_.ClearToEmpty();
  _impl_.bluetooth_mac_address_.ClearToEmpty();
  ::memset(&_impl_.device_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instance_type_) -
      reinterpret_cast<char*>(&_impl_.device_type_)) + sizeof(_impl_.instance_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceIdentityMetaData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.internal.DeviceType device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::nearby::internal::DeviceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string device_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bluetooth_mac_address = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_bluetooth_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.InstanceType instance_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_instance_type(static_cast<::nearby::internal::InstanceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceIdentityMetaData::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.DeviceIdentityMetaData)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nearby.internal.DeviceType device_type = 1;
  if (this->_internal_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_device_type(), target);
  }

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    const std::string& _s = this->_internal_device_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.DeviceIdentityMetaData.device_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // bytes bluetooth_mac_address = 3;
  if (!this->_internal_bluetooth_mac_address().empty()) {
    const std::string& _s = this->_internal_bluetooth_mac_address();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // .nearby.internal.InstanceType instance_type = 4;
  if (this->_internal_instance_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        4, this->_internal_instance_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.DeviceIdentityMetaData)
  return target;
}

::size_t DeviceIdentityMetaData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.DeviceIdentityMetaData)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string device_name = 2;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_device_name());
  }

  // bytes bluetooth_mac_address = 3;
  if (!this->_internal_bluetooth_mac_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bluetooth_mac_address());
  }

  // .nearby.internal.DeviceType device_type = 1;
  if (this->_internal_device_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  // .nearby.internal.InstanceType instance_type = 4;
  if (this->_internal_instance_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instance_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceIdentityMetaData::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceIdentityMetaData*>(
      &from));
}

void DeviceIdentityMetaData::MergeFrom(const DeviceIdentityMetaData& from) {
  DeviceIdentityMetaData* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.DeviceIdentityMetaData)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (!from._internal_bluetooth_mac_address().empty()) {
    _this->_internal_set_bluetooth_mac_address(from._internal_bluetooth_mac_address());
  }
  if (from._internal_device_type() != 0) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (from._internal_instance_type() != 0) {
    _this->_internal_set_instance_type(from._internal_instance_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceIdentityMetaData::CopyFrom(const DeviceIdentityMetaData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.DeviceIdentityMetaData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceIdentityMetaData::IsInitialized() const {
  return true;
}

void DeviceIdentityMetaData::InternalSwap(DeviceIdentityMetaData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, lhs_arena,
                                       &other->_impl_.device_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bluetooth_mac_address_, lhs_arena,
                                       &other->_impl_.bluetooth_mac_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceIdentityMetaData, _impl_.instance_type_)
      + sizeof(DeviceIdentityMetaData::_impl_.instance_type_)
      - PROTOBUF_FIELD_OFFSET(DeviceIdentityMetaData, _impl_.device_type_)>(
          reinterpret_cast<char*>(&_impl_.device_type_),
          reinterpret_cast<char*>(&other->_impl_.device_type_));
}

std::string DeviceIdentityMetaData::GetTypeName() const {
  return "nearby.internal.DeviceIdentityMetaData";
}

// ===================================================================

class Metadata::_Internal {
 public:
};

Metadata::Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.Metadata)
}
Metadata::Metadata(const Metadata& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Metadata* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_) {}

    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.device_profile_url_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.device_type_) {}

    , decltype(_impl_.instance_type_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_account_name().empty()) {
    _this->_impl_.account_name_.Set(from._internal_account_name(), _this->GetArenaForAllocation());
  }
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_name().empty()) {
    _this->_impl_.device_name_.Set(from._internal_device_name(), _this->GetArenaForAllocation());
  }
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_user_name().empty()) {
    _this->_impl_.user_name_.Set(from._internal_user_name(), _this->GetArenaForAllocation());
  }
  _impl_.device_profile_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_profile_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_device_profile_url().empty()) {
    _this->_impl_.device_profile_url_.Set(from._internal_device_profile_url(), _this->GetArenaForAllocation());
  }
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_bluetooth_mac_address().empty()) {
    _this->_impl_.bluetooth_mac_address_.Set(from._internal_bluetooth_mac_address(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.device_type_, &from._impl_.device_type_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.instance_type_) -
    reinterpret_cast<char*>(&_impl_.device_type_)) + sizeof(_impl_.instance_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.Metadata)
}

inline void Metadata::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.account_name_) {}

    , decltype(_impl_.device_name_) {}

    , decltype(_impl_.user_name_) {}

    , decltype(_impl_.device_profile_url_) {}

    , decltype(_impl_.bluetooth_mac_address_) {}

    , decltype(_impl_.device_type_) { 0 }

    , decltype(_impl_.instance_type_) { 0 }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.account_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.account_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.user_name_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_profile_url_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_profile_url_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Metadata::~Metadata() {
  // @@protoc_insertion_point(destructor:nearby.internal.Metadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Metadata::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.account_name_.Destroy();
  _impl_.device_name_.Destroy();
  _impl_.user_name_.Destroy();
  _impl_.device_profile_url_.Destroy();
  _impl_.bluetooth_mac_address_.Destroy();
}

void Metadata::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Metadata::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.Metadata)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.account_name_.ClearToEmpty();
  _impl_.device_name_.ClearToEmpty();
  _impl_.user_name_.ClearToEmpty();
  _impl_.device_profile_url_.ClearToEmpty();
  _impl_.bluetooth_mac_address_.ClearToEmpty();
  ::memset(&_impl_.device_type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instance_type_) -
      reinterpret_cast<char*>(&_impl_.device_type_)) + sizeof(_impl_.instance_type_));
  _internal_metadata_.Clear<std::string>();
}

const char* Metadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .nearby.internal.DeviceType device_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_device_type(static_cast<::nearby::internal::DeviceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // string account_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_account_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string device_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_device_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string user_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_user_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // string device_profile_url = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_device_profile_url();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes bluetooth_mac_address = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_bluetooth_mac_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.InstanceType instance_type = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_instance_type(static_cast<::nearby::internal::InstanceType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Metadata::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.Metadata)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .nearby.internal.DeviceType device_type = 1;
  if (this->_internal_device_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_device_type(), target);
  }

  // string account_name = 2;
  if (!this->_internal_account_name().empty()) {
    const std::string& _s = this->_internal_account_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.Metadata.account_name");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    const std::string& _s = this->_internal_device_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.Metadata.device_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string user_name = 4;
  if (!this->_internal_user_name().empty()) {
    const std::string& _s = this->_internal_user_name();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.Metadata.user_name");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string device_profile_url = 5;
  if (!this->_internal_device_profile_url().empty()) {
    const std::string& _s = this->_internal_device_profile_url();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.Metadata.device_profile_url");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // bytes bluetooth_mac_address = 6;
  if (!this->_internal_bluetooth_mac_address().empty()) {
    const std::string& _s = this->_internal_bluetooth_mac_address();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // .nearby.internal.InstanceType instance_type = 7;
  if (this->_internal_instance_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        7, this->_internal_instance_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.Metadata)
  return target;
}

::size_t Metadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.Metadata)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string account_name = 2;
  if (!this->_internal_account_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_account_name());
  }

  // string device_name = 3;
  if (!this->_internal_device_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_device_name());
  }

  // string user_name = 4;
  if (!this->_internal_user_name().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_user_name());
  }

  // string device_profile_url = 5;
  if (!this->_internal_device_profile_url().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_device_profile_url());
  }

  // bytes bluetooth_mac_address = 6;
  if (!this->_internal_bluetooth_mac_address().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_bluetooth_mac_address());
  }

  // .nearby.internal.DeviceType device_type = 1;
  if (this->_internal_device_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_device_type());
  }

  // .nearby.internal.InstanceType instance_type = 7;
  if (this->_internal_instance_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_instance_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Metadata::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Metadata*>(
      &from));
}

void Metadata::MergeFrom(const Metadata& from) {
  Metadata* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.Metadata)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_account_name().empty()) {
    _this->_internal_set_account_name(from._internal_account_name());
  }
  if (!from._internal_device_name().empty()) {
    _this->_internal_set_device_name(from._internal_device_name());
  }
  if (!from._internal_user_name().empty()) {
    _this->_internal_set_user_name(from._internal_user_name());
  }
  if (!from._internal_device_profile_url().empty()) {
    _this->_internal_set_device_profile_url(from._internal_device_profile_url());
  }
  if (!from._internal_bluetooth_mac_address().empty()) {
    _this->_internal_set_bluetooth_mac_address(from._internal_bluetooth_mac_address());
  }
  if (from._internal_device_type() != 0) {
    _this->_internal_set_device_type(from._internal_device_type());
  }
  if (from._internal_instance_type() != 0) {
    _this->_internal_set_instance_type(from._internal_instance_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Metadata::CopyFrom(const Metadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.Metadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  return true;
}

void Metadata::InternalSwap(Metadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.account_name_, lhs_arena,
                                       &other->_impl_.account_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_name_, lhs_arena,
                                       &other->_impl_.device_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.user_name_, lhs_arena,
                                       &other->_impl_.user_name_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_profile_url_, lhs_arena,
                                       &other->_impl_.device_profile_url_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.bluetooth_mac_address_, lhs_arena,
                                       &other->_impl_.bluetooth_mac_address_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Metadata, _impl_.instance_type_)
      + sizeof(Metadata::_impl_.instance_type_)
      - PROTOBUF_FIELD_OFFSET(Metadata, _impl_.device_type_)>(
          reinterpret_cast<char*>(&_impl_.device_type_),
          reinterpret_cast<char*>(&other->_impl_.device_type_));
}

std::string Metadata::GetTypeName() const {
  return "nearby.internal.Metadata";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::internal::DeviceIdentityMetaData*
Arena::CreateMaybeMessage< ::nearby::internal::DeviceIdentityMetaData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::DeviceIdentityMetaData >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::internal::Metadata*
Arena::CreateMaybeMessage< ::nearby::internal::Metadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::Metadata >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
