// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/local_credential.proto

#include "internal/proto/local_credential.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace internal {
PROTOBUF_CONSTEXPR LocalCredential_PrivateKey::LocalCredential_PrivateKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.certificate_alias_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct LocalCredential_PrivateKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCredential_PrivateKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCredential_PrivateKeyDefaultTypeInternal() {}
  union {
    LocalCredential_PrivateKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCredential_PrivateKeyDefaultTypeInternal _LocalCredential_PrivateKey_default_instance_;
PROTOBUF_CONSTEXPR LocalCredential_ConsumedSaltsEntry_DoNotUse::LocalCredential_ConsumedSaltsEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    LocalCredential_ConsumedSaltsEntry_DoNotUse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCredential_ConsumedSaltsEntry_DoNotUseDefaultTypeInternal _LocalCredential_ConsumedSaltsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR LocalCredential::LocalCredential(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.consumed_salts_)*/{}
  , /*decltype(_impl_.secret_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_seed_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_v0_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_v1_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.advertisement_signing_key_)*/nullptr
  , /*decltype(_impl_.connection_signing_key_)*/nullptr
  , /*decltype(_impl_.start_time_millis_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_millis_)*/ ::int64_t{0}

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_.identity_type_)*/ 0
} {}
struct LocalCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR LocalCredentialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~LocalCredentialDefaultTypeInternal() {}
  union {
    LocalCredential _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 LocalCredentialDefaultTypeInternal _LocalCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace nearby {
namespace internal {
// ===================================================================

class LocalCredential_PrivateKey::_Internal {
 public:
};

LocalCredential_PrivateKey::LocalCredential_PrivateKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.LocalCredential.PrivateKey)
}
LocalCredential_PrivateKey::LocalCredential_PrivateKey(const LocalCredential_PrivateKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LocalCredential_PrivateKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.certificate_alias_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.certificate_alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.certificate_alias_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_certificate_alias().empty()) {
    _this->_impl_.certificate_alias_.Set(from._internal_certificate_alias(), _this->GetArenaForAllocation());
  }
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    _this->_impl_.key_.Set(from._internal_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:nearby.internal.LocalCredential.PrivateKey)
}

inline void LocalCredential_PrivateKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.certificate_alias_) {}

    , decltype(_impl_.key_) {}

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.certificate_alias_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.certificate_alias_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalCredential_PrivateKey::~LocalCredential_PrivateKey() {
  // @@protoc_insertion_point(destructor:nearby.internal.LocalCredential.PrivateKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCredential_PrivateKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.certificate_alias_.Destroy();
  _impl_.key_.Destroy();
}

void LocalCredential_PrivateKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCredential_PrivateKey::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.LocalCredential.PrivateKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.certificate_alias_.ClearToEmpty();
  _impl_.key_.ClearToEmpty();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCredential_PrivateKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string certificate_alias = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_certificate_alias();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCredential_PrivateKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.LocalCredential.PrivateKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string certificate_alias = 1;
  if (!this->_internal_certificate_alias().empty()) {
    const std::string& _s = this->_internal_certificate_alias();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.LocalCredential.PrivateKey.certificate_alias");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    const std::string& _s = this->_internal_key();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.LocalCredential.PrivateKey)
  return target;
}

::size_t LocalCredential_PrivateKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.LocalCredential.PrivateKey)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string certificate_alias = 1;
  if (!this->_internal_certificate_alias().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_certificate_alias());
  }

  // bytes key = 2;
  if (!this->_internal_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCredential_PrivateKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCredential_PrivateKey*>(
      &from));
}

void LocalCredential_PrivateKey::MergeFrom(const LocalCredential_PrivateKey& from) {
  LocalCredential_PrivateKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.LocalCredential.PrivateKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_certificate_alias().empty()) {
    _this->_internal_set_certificate_alias(from._internal_certificate_alias());
  }
  if (!from._internal_key().empty()) {
    _this->_internal_set_key(from._internal_key());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCredential_PrivateKey::CopyFrom(const LocalCredential_PrivateKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.LocalCredential.PrivateKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCredential_PrivateKey::IsInitialized() const {
  return true;
}

void LocalCredential_PrivateKey::InternalSwap(LocalCredential_PrivateKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.certificate_alias_, lhs_arena,
                                       &other->_impl_.certificate_alias_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_, lhs_arena,
                                       &other->_impl_.key_, rhs_arena);
}

std::string LocalCredential_PrivateKey::GetTypeName() const {
  return "nearby.internal.LocalCredential.PrivateKey";
}

// ===================================================================

LocalCredential_ConsumedSaltsEntry_DoNotUse::LocalCredential_ConsumedSaltsEntry_DoNotUse() {}
LocalCredential_ConsumedSaltsEntry_DoNotUse::LocalCredential_ConsumedSaltsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void LocalCredential_ConsumedSaltsEntry_DoNotUse::MergeFrom(const LocalCredential_ConsumedSaltsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
// ===================================================================

class LocalCredential::_Internal {
 public:
  using HasBits = decltype(std::declval<LocalCredential>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_._has_bits_);
  static const ::nearby::internal::LocalCredential_PrivateKey& advertisement_signing_key(const LocalCredential* msg);
  static void set_has_advertisement_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::nearby::internal::LocalCredential_PrivateKey& connection_signing_key(const LocalCredential* msg);
  static void set_has_connection_signing_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::nearby::internal::LocalCredential_PrivateKey&
LocalCredential::_Internal::advertisement_signing_key(const LocalCredential* msg) {
  return *msg->_impl_.advertisement_signing_key_;
}
const ::nearby::internal::LocalCredential_PrivateKey&
LocalCredential::_Internal::connection_signing_key(const LocalCredential* msg) {
  return *msg->_impl_.connection_signing_key_;
}
LocalCredential::LocalCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.LocalCredential)
}
LocalCredential::LocalCredential(const LocalCredential& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  LocalCredential* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.consumed_salts_)*/{}
    , decltype(_impl_.secret_id_) {}

    , decltype(_impl_.key_seed_) {}

    , decltype(_impl_.metadata_encryption_key_v0_) {}

    , decltype(_impl_.metadata_encryption_key_v1_) {}

    , decltype(_impl_.advertisement_signing_key_){nullptr}
    , decltype(_impl_.connection_signing_key_){nullptr}
    , decltype(_impl_.start_time_millis_) {}

    , decltype(_impl_.end_time_millis_) {}

    , decltype(_impl_.id_) {}

    , decltype(_impl_.identity_type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _this->_impl_.consumed_salts_.MergeFrom(from._impl_.consumed_salts_);
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_id().empty()) {
    _this->_impl_.secret_id_.Set(from._internal_secret_id(), _this->GetArenaForAllocation());
  }
  _impl_.key_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_seed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_seed().empty()) {
    _this->_impl_.key_seed_.Set(from._internal_key_seed(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key_v0().empty()) {
    _this->_impl_.metadata_encryption_key_v0_.Set(from._internal_metadata_encryption_key_v0(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key_v1().empty()) {
    _this->_impl_.metadata_encryption_key_v1_.Set(from._internal_metadata_encryption_key_v1(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.advertisement_signing_key_ = new ::nearby::internal::LocalCredential_PrivateKey(*from._impl_.advertisement_signing_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.connection_signing_key_ = new ::nearby::internal::LocalCredential_PrivateKey(*from._impl_.connection_signing_key_);
  }
  ::memcpy(&_impl_.start_time_millis_, &from._impl_.start_time_millis_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.identity_type_) -
    reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.LocalCredential)
}

inline void LocalCredential::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_.consumed_salts_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.secret_id_) {}

    , decltype(_impl_.key_seed_) {}

    , decltype(_impl_.metadata_encryption_key_v0_) {}

    , decltype(_impl_.metadata_encryption_key_v1_) {}

    , decltype(_impl_.advertisement_signing_key_){nullptr}
    , decltype(_impl_.connection_signing_key_){nullptr}
    , decltype(_impl_.start_time_millis_) { ::int64_t{0} }

    , decltype(_impl_.end_time_millis_) { ::int64_t{0} }

    , decltype(_impl_.id_) { ::int64_t{0} }

    , decltype(_impl_.identity_type_) { 0 }

  };
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_seed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

LocalCredential::~LocalCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.LocalCredential)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void LocalCredential::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.consumed_salts_.~MapFieldLite();
  _impl_.secret_id_.Destroy();
  _impl_.key_seed_.Destroy();
  _impl_.metadata_encryption_key_v0_.Destroy();
  _impl_.metadata_encryption_key_v1_.Destroy();
  if (this != internal_default_instance()) delete _impl_.advertisement_signing_key_;
  if (this != internal_default_instance()) delete _impl_.connection_signing_key_;
}

void LocalCredential::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void LocalCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.LocalCredential)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.consumed_salts_.Clear();
  _impl_.secret_id_.ClearToEmpty();
  _impl_.key_seed_.ClearToEmpty();
  _impl_.metadata_encryption_key_v0_.ClearToEmpty();
  _impl_.metadata_encryption_key_v1_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.advertisement_signing_key_ != nullptr);
      _impl_.advertisement_signing_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.connection_signing_key_ != nullptr);
      _impl_.connection_signing_key_->Clear();
    }
  }
  ::memset(&_impl_.start_time_millis_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.identity_type_) -
      reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.identity_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* LocalCredential::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes secret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_secret_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes key_seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_time_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.start_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 end_time_millis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.end_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key_v0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_metadata_encryption_key_v0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_advertisement_signing_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_connection_signing_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.IdentityType identity_type = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 64)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_identity_type(static_cast<::nearby::internal::IdentityType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // map<uint32, bool> consumed_salts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.consumed_salts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key_v1 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_metadata_encryption_key_v1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* LocalCredential::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.LocalCredential)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    const std::string& _s = this->_internal_secret_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    const std::string& _s = this->_internal_key_seed();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_start_time_millis(), target);
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_end_time_millis(), target);
  }

  // bytes metadata_encryption_key_v0 = 5;
  if (!this->_internal_metadata_encryption_key_v0().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_v0();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::advertisement_signing_key(this),
        _Internal::advertisement_signing_key(this).GetCachedSize(), target, stream);
  }

  // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::connection_signing_key(this),
        _Internal::connection_signing_key(this).GetCachedSize(), target, stream);
  }

  // .nearby.internal.IdentityType identity_type = 8;
  if (this->_internal_identity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        8, this->_internal_identity_type(), target);
  }

  // map<uint32, bool> consumed_salts = 9;
  if (!this->_internal_consumed_salts().empty()) {
    using MapType = ::_pb::Map<::uint32_t, bool>;
    using WireHelper = LocalCredential_ConsumedSaltsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_consumed_salts();

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterFlat<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(9, entry.first, entry.second, target, stream);
      }
    }
  }

  // bytes metadata_encryption_key_v1 = 10;
  if (!this->_internal_metadata_encryption_key_v1().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_v1();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // int64 id = 11;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        11, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.LocalCredential)
  return target;
}

::size_t LocalCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.LocalCredential)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, bool> consumed_salts = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_consumed_salts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< ::uint32_t, bool >::const_iterator
      it = this->_internal_consumed_salts().begin();
      it != this->_internal_consumed_salts().end(); ++it) {
    total_size += LocalCredential_ConsumedSaltsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_id());
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key_seed());
  }

  // bytes metadata_encryption_key_v0 = 5;
  if (!this->_internal_metadata_encryption_key_v0().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_v0());
  }

  // bytes metadata_encryption_key_v1 = 10;
  if (!this->_internal_metadata_encryption_key_v1().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_v1());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // .nearby.internal.LocalCredential.PrivateKey advertisement_signing_key = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.advertisement_signing_key_);
    }

    // .nearby.internal.LocalCredential.PrivateKey connection_signing_key = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.connection_signing_key_);
    }

  }
  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time_millis());
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time_millis());
  }

  // int64 id = 11;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  // .nearby.internal.IdentityType identity_type = 8;
  if (this->_internal_identity_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LocalCredential::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const LocalCredential*>(
      &from));
}

void LocalCredential::MergeFrom(const LocalCredential& from) {
  LocalCredential* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.LocalCredential)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.consumed_salts_.MergeFrom(from._impl_.consumed_salts_);
  if (!from._internal_secret_id().empty()) {
    _this->_internal_set_secret_id(from._internal_secret_id());
  }
  if (!from._internal_key_seed().empty()) {
    _this->_internal_set_key_seed(from._internal_key_seed());
  }
  if (!from._internal_metadata_encryption_key_v0().empty()) {
    _this->_internal_set_metadata_encryption_key_v0(from._internal_metadata_encryption_key_v0());
  }
  if (!from._internal_metadata_encryption_key_v1().empty()) {
    _this->_internal_set_metadata_encryption_key_v1(from._internal_metadata_encryption_key_v1());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_advertisement_signing_key()->::nearby::internal::LocalCredential_PrivateKey::MergeFrom(
          from._internal_advertisement_signing_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_connection_signing_key()->::nearby::internal::LocalCredential_PrivateKey::MergeFrom(
          from._internal_connection_signing_key());
    }
  }
  if (from._internal_start_time_millis() != 0) {
    _this->_internal_set_start_time_millis(from._internal_start_time_millis());
  }
  if (from._internal_end_time_millis() != 0) {
    _this->_internal_set_end_time_millis(from._internal_end_time_millis());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_identity_type() != 0) {
    _this->_internal_set_identity_type(from._internal_identity_type());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void LocalCredential::CopyFrom(const LocalCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.LocalCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalCredential::IsInitialized() const {
  return true;
}

void LocalCredential::InternalSwap(LocalCredential* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.consumed_salts_.InternalSwap(&other->_impl_.consumed_salts_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_id_, lhs_arena,
                                       &other->_impl_.secret_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_seed_, lhs_arena,
                                       &other->_impl_.key_seed_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_v0_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_v0_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_v1_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_v1_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.identity_type_)
      + sizeof(LocalCredential::_impl_.identity_type_)
      - PROTOBUF_FIELD_OFFSET(LocalCredential, _impl_.advertisement_signing_key_)>(
          reinterpret_cast<char*>(&_impl_.advertisement_signing_key_),
          reinterpret_cast<char*>(&other->_impl_.advertisement_signing_key_));
}

std::string LocalCredential::GetTypeName() const {
  return "nearby.internal.LocalCredential";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::internal::LocalCredential_PrivateKey*
Arena::CreateMaybeMessage< ::nearby::internal::LocalCredential_PrivateKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::LocalCredential_PrivateKey >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::internal::LocalCredential_ConsumedSaltsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::nearby::internal::LocalCredential_ConsumedSaltsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::LocalCredential_ConsumedSaltsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::nearby::internal::LocalCredential*
Arena::CreateMaybeMessage< ::nearby::internal::LocalCredential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::LocalCredential >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
