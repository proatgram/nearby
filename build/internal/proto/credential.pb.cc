// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/credential.proto

#include "internal/proto/credential.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace nearby {
namespace internal {
PROTOBUF_CONSTEXPR SharedCredential::SharedCredential(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.secret_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.key_seed_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.encrypted_metadata_bytes_v0_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_tag_v0_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.connection_signature_verification_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.advertisement_signature_verification_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.encrypted_metadata_bytes_v1_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.metadata_encryption_key_unsigned_adv_tag_v1_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.dusi_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.start_time_millis_)*/ ::int64_t{0}

  , /*decltype(_impl_.end_time_millis_)*/ ::int64_t{0}

  , /*decltype(_impl_.identity_type_)*/ 0

  , /*decltype(_impl_.credential_type_)*/ 0

  , /*decltype(_impl_.id_)*/ ::int64_t{0}

  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SharedCredentialDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharedCredentialDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharedCredentialDefaultTypeInternal() {}
  union {
    SharedCredential _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharedCredentialDefaultTypeInternal _SharedCredential_default_instance_;
}  // namespace internal
}  // namespace nearby
namespace nearby {
namespace internal {
bool IdentityType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    IdentityType_strings[5] = {};

static const char IdentityType_names[] = {
    "IDENTITY_TYPE_PRIVATE"
    "IDENTITY_TYPE_PROVISIONED"
    "IDENTITY_TYPE_PUBLIC"
    "IDENTITY_TYPE_TRUSTED"
    "IDENTITY_TYPE_UNSPECIFIED"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry IdentityType_entries[] =
    {
        {{&IdentityType_names[0], 21}, 1},
        {{&IdentityType_names[21], 25}, 4},
        {{&IdentityType_names[46], 20}, 3},
        {{&IdentityType_names[66], 21}, 2},
        {{&IdentityType_names[87], 25}, 0},
};

static const int IdentityType_entries_by_number[] = {
    4,  // 0 -> IDENTITY_TYPE_UNSPECIFIED
    0,  // 1 -> IDENTITY_TYPE_PRIVATE
    3,  // 2 -> IDENTITY_TYPE_TRUSTED
    2,  // 3 -> IDENTITY_TYPE_PUBLIC
    1,  // 4 -> IDENTITY_TYPE_PROVISIONED
};

const std::string& IdentityType_Name(IdentityType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          IdentityType_entries, IdentityType_entries_by_number,
          5, IdentityType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      IdentityType_entries, IdentityType_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : IdentityType_strings[idx].get();
}

bool IdentityType_Parse(absl::string_view name, IdentityType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      IdentityType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<IdentityType>(int_value);
  }
  return success;
}
bool CredentialType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    CredentialType_strings[3] = {};

static const char CredentialType_names[] = {
    "CREDENTIAL_TYPE_DEVICE"
    "CREDENTIAL_TYPE_GAIA"
    "CREDENTIAL_TYPE_UNKNOWN"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CredentialType_entries[] =
    {
        {{&CredentialType_names[0], 22}, 1},
        {{&CredentialType_names[22], 20}, 2},
        {{&CredentialType_names[42], 23}, 0},
};

static const int CredentialType_entries_by_number[] = {
    2,  // 0 -> CREDENTIAL_TYPE_UNKNOWN
    0,  // 1 -> CREDENTIAL_TYPE_DEVICE
    1,  // 2 -> CREDENTIAL_TYPE_GAIA
};

const std::string& CredentialType_Name(CredentialType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CredentialType_entries, CredentialType_entries_by_number,
          3, CredentialType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CredentialType_entries, CredentialType_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : CredentialType_strings[idx].get();
}

bool CredentialType_Parse(absl::string_view name, CredentialType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CredentialType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<CredentialType>(int_value);
  }
  return success;
}
// ===================================================================

class SharedCredential::_Internal {
 public:
};

SharedCredential::SharedCredential(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:nearby.internal.SharedCredential)
}
SharedCredential::SharedCredential(const SharedCredential& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SharedCredential* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_id_) {}

    , decltype(_impl_.key_seed_) {}

    , decltype(_impl_.encrypted_metadata_bytes_v0_) {}

    , decltype(_impl_.metadata_encryption_key_tag_v0_) {}

    , decltype(_impl_.connection_signature_verification_key_) {}

    , decltype(_impl_.advertisement_signature_verification_key_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.encrypted_metadata_bytes_v1_) {}

    , decltype(_impl_.metadata_encryption_key_unsigned_adv_tag_v1_) {}

    , decltype(_impl_.dusi_) {}

    , decltype(_impl_.start_time_millis_) {}

    , decltype(_impl_.end_time_millis_) {}

    , decltype(_impl_.identity_type_) {}

    , decltype(_impl_.credential_type_) {}

    , decltype(_impl_.id_) {}

    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_secret_id().empty()) {
    _this->_impl_.secret_id_.Set(from._internal_secret_id(), _this->GetArenaForAllocation());
  }
  _impl_.key_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_seed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key_seed().empty()) {
    _this->_impl_.key_seed_.Set(from._internal_key_seed(), _this->GetArenaForAllocation());
  }
  _impl_.encrypted_metadata_bytes_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_metadata_bytes_v0().empty()) {
    _this->_impl_.encrypted_metadata_bytes_v0_.Set(from._internal_encrypted_metadata_bytes_v0(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_tag_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_tag_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key_tag_v0().empty()) {
    _this->_impl_.metadata_encryption_key_tag_v0_.Set(from._internal_metadata_encryption_key_tag_v0(), _this->GetArenaForAllocation());
  }
  _impl_.connection_signature_verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_signature_verification_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_connection_signature_verification_key().empty()) {
    _this->_impl_.connection_signature_verification_key_.Set(from._internal_connection_signature_verification_key(), _this->GetArenaForAllocation());
  }
  _impl_.advertisement_signature_verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.advertisement_signature_verification_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_advertisement_signature_verification_key().empty()) {
    _this->_impl_.advertisement_signature_verification_key_.Set(from._internal_advertisement_signature_verification_key(), _this->GetArenaForAllocation());
  }
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    _this->_impl_.version_.Set(from._internal_version(), _this->GetArenaForAllocation());
  }
  _impl_.encrypted_metadata_bytes_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encrypted_metadata_bytes_v1().empty()) {
    _this->_impl_.encrypted_metadata_bytes_v1_.Set(from._internal_encrypted_metadata_bytes_v1(), _this->GetArenaForAllocation());
  }
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    _this->_impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Set(from._internal_metadata_encryption_key_unsigned_adv_tag_v1(), _this->GetArenaForAllocation());
  }
  _impl_.dusi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dusi_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dusi().empty()) {
    _this->_impl_.dusi_.Set(from._internal_dusi(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.start_time_millis_, &from._impl_.start_time_millis_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.id_) -
    reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.id_));
  // @@protoc_insertion_point(copy_constructor:nearby.internal.SharedCredential)
}

inline void SharedCredential::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_.secret_id_) {}

    , decltype(_impl_.key_seed_) {}

    , decltype(_impl_.encrypted_metadata_bytes_v0_) {}

    , decltype(_impl_.metadata_encryption_key_tag_v0_) {}

    , decltype(_impl_.connection_signature_verification_key_) {}

    , decltype(_impl_.advertisement_signature_verification_key_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.encrypted_metadata_bytes_v1_) {}

    , decltype(_impl_.metadata_encryption_key_unsigned_adv_tag_v1_) {}

    , decltype(_impl_.dusi_) {}

    , decltype(_impl_.start_time_millis_) { ::int64_t{0} }

    , decltype(_impl_.end_time_millis_) { ::int64_t{0} }

    , decltype(_impl_.identity_type_) { 0 }

    , decltype(_impl_.credential_type_) { 0 }

    , decltype(_impl_.id_) { ::int64_t{0} }

    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.secret_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.secret_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_seed_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.key_seed_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_metadata_bytes_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_tag_v0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_tag_v0_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.connection_signature_verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.connection_signature_verification_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.advertisement_signature_verification_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.advertisement_signature_verification_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.version_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.encrypted_metadata_bytes_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.encrypted_metadata_bytes_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.dusi_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.dusi_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SharedCredential::~SharedCredential() {
  // @@protoc_insertion_point(destructor:nearby.internal.SharedCredential)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SharedCredential::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.secret_id_.Destroy();
  _impl_.key_seed_.Destroy();
  _impl_.encrypted_metadata_bytes_v0_.Destroy();
  _impl_.metadata_encryption_key_tag_v0_.Destroy();
  _impl_.connection_signature_verification_key_.Destroy();
  _impl_.advertisement_signature_verification_key_.Destroy();
  _impl_.version_.Destroy();
  _impl_.encrypted_metadata_bytes_v1_.Destroy();
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.Destroy();
  _impl_.dusi_.Destroy();
}

void SharedCredential::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SharedCredential::Clear() {
// @@protoc_insertion_point(message_clear_start:nearby.internal.SharedCredential)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.secret_id_.ClearToEmpty();
  _impl_.key_seed_.ClearToEmpty();
  _impl_.encrypted_metadata_bytes_v0_.ClearToEmpty();
  _impl_.metadata_encryption_key_tag_v0_.ClearToEmpty();
  _impl_.connection_signature_verification_key_.ClearToEmpty();
  _impl_.advertisement_signature_verification_key_.ClearToEmpty();
  _impl_.version_.ClearToEmpty();
  _impl_.encrypted_metadata_bytes_v1_.ClearToEmpty();
  _impl_.metadata_encryption_key_unsigned_adv_tag_v1_.ClearToEmpty();
  _impl_.dusi_.ClearToEmpty();
  ::memset(&_impl_.start_time_millis_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.id_) -
      reinterpret_cast<char*>(&_impl_.start_time_millis_)) + sizeof(_impl_.id_));
  _internal_metadata_.Clear<std::string>();
}

const char* SharedCredential::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes secret_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_secret_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes key_seed = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_key_seed();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 start_time_millis = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          _impl_.start_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 end_time_millis = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 32)) {
          _impl_.end_time_millis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes encrypted_metadata_bytes_v0 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_encrypted_metadata_bytes_v0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key_tag_v0 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_metadata_encryption_key_tag_v0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes connection_signature_verification_key = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_connection_signature_verification_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes advertisement_signature_verification_key = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_advertisement_signature_verification_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.IdentityType identity_type = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 72)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_identity_type(static_cast<::nearby::internal::IdentityType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes version = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_version();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // .nearby.internal.CredentialType credential_type = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 88)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          _internal_set_credential_type(static_cast<::nearby::internal::CredentialType>(val));
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes encrypted_metadata_bytes_v1 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 98)) {
          auto str = _internal_mutable_encrypted_metadata_bytes_v1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 106)) {
          auto str = _internal_mutable_metadata_encryption_key_unsigned_adv_tag_v1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // int64 id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 112)) {
          _impl_.id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // string dusi = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 122)) {
          auto str = _internal_mutable_dusi();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, nullptr));
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SharedCredential::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:nearby.internal.SharedCredential)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    const std::string& _s = this->_internal_secret_id();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    const std::string& _s = this->_internal_key_seed();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        3, this->_internal_start_time_millis(), target);
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        4, this->_internal_end_time_millis(), target);
  }

  // bytes encrypted_metadata_bytes_v0 = 5;
  if (!this->_internal_encrypted_metadata_bytes_v0().empty()) {
    const std::string& _s = this->_internal_encrypted_metadata_bytes_v0();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // bytes metadata_encryption_key_tag_v0 = 6;
  if (!this->_internal_metadata_encryption_key_tag_v0().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_tag_v0();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // bytes connection_signature_verification_key = 7;
  if (!this->_internal_connection_signature_verification_key().empty()) {
    const std::string& _s = this->_internal_connection_signature_verification_key();
    target = stream->WriteBytesMaybeAliased(7, _s, target);
  }

  // bytes advertisement_signature_verification_key = 8;
  if (!this->_internal_advertisement_signature_verification_key().empty()) {
    const std::string& _s = this->_internal_advertisement_signature_verification_key();
    target = stream->WriteBytesMaybeAliased(8, _s, target);
  }

  // .nearby.internal.IdentityType identity_type = 9;
  if (this->_internal_identity_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        9, this->_internal_identity_type(), target);
  }

  // bytes version = 10;
  if (!this->_internal_version().empty()) {
    const std::string& _s = this->_internal_version();
    target = stream->WriteBytesMaybeAliased(10, _s, target);
  }

  // .nearby.internal.CredentialType credential_type = 11;
  if (this->_internal_credential_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        11, this->_internal_credential_type(), target);
  }

  // bytes encrypted_metadata_bytes_v1 = 12;
  if (!this->_internal_encrypted_metadata_bytes_v1().empty()) {
    const std::string& _s = this->_internal_encrypted_metadata_bytes_v1();
    target = stream->WriteBytesMaybeAliased(12, _s, target);
  }

  // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
  if (!this->_internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    const std::string& _s = this->_internal_metadata_encryption_key_unsigned_adv_tag_v1();
    target = stream->WriteBytesMaybeAliased(13, _s, target);
  }

  // int64 id = 14;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(
        14, this->_internal_id(), target);
  }

  // string dusi = 15;
  if (!this->_internal_dusi().empty()) {
    const std::string& _s = this->_internal_dusi();
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE, "nearby.internal.SharedCredential.dusi");
    target = stream->WriteStringMaybeAliased(15, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:nearby.internal.SharedCredential)
  return target;
}

::size_t SharedCredential::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:nearby.internal.SharedCredential)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes secret_id = 1;
  if (!this->_internal_secret_id().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_secret_id());
  }

  // bytes key_seed = 2;
  if (!this->_internal_key_seed().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_key_seed());
  }

  // bytes encrypted_metadata_bytes_v0 = 5;
  if (!this->_internal_encrypted_metadata_bytes_v0().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_metadata_bytes_v0());
  }

  // bytes metadata_encryption_key_tag_v0 = 6;
  if (!this->_internal_metadata_encryption_key_tag_v0().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_tag_v0());
  }

  // bytes connection_signature_verification_key = 7;
  if (!this->_internal_connection_signature_verification_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_connection_signature_verification_key());
  }

  // bytes advertisement_signature_verification_key = 8;
  if (!this->_internal_advertisement_signature_verification_key().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_advertisement_signature_verification_key());
  }

  // bytes version = 10;
  if (!this->_internal_version().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_version());
  }

  // bytes encrypted_metadata_bytes_v1 = 12;
  if (!this->_internal_encrypted_metadata_bytes_v1().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_encrypted_metadata_bytes_v1());
  }

  // bytes metadata_encryption_key_unsigned_adv_tag_v1 = 13;
  if (!this->_internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_metadata_encryption_key_unsigned_adv_tag_v1());
  }

  // string dusi = 15;
  if (!this->_internal_dusi().empty()) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                    this->_internal_dusi());
  }

  // int64 start_time_millis = 3;
  if (this->_internal_start_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_start_time_millis());
  }

  // int64 end_time_millis = 4;
  if (this->_internal_end_time_millis() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_end_time_millis());
  }

  // .nearby.internal.IdentityType identity_type = 9;
  if (this->_internal_identity_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_identity_type());
  }

  // .nearby.internal.CredentialType credential_type = 11;
  if (this->_internal_credential_type() != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_credential_type());
  }

  // int64 id = 14;
  if (this->_internal_id() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
        this->_internal_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SharedCredential::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SharedCredential*>(
      &from));
}

void SharedCredential::MergeFrom(const SharedCredential& from) {
  SharedCredential* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:nearby.internal.SharedCredential)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_secret_id().empty()) {
    _this->_internal_set_secret_id(from._internal_secret_id());
  }
  if (!from._internal_key_seed().empty()) {
    _this->_internal_set_key_seed(from._internal_key_seed());
  }
  if (!from._internal_encrypted_metadata_bytes_v0().empty()) {
    _this->_internal_set_encrypted_metadata_bytes_v0(from._internal_encrypted_metadata_bytes_v0());
  }
  if (!from._internal_metadata_encryption_key_tag_v0().empty()) {
    _this->_internal_set_metadata_encryption_key_tag_v0(from._internal_metadata_encryption_key_tag_v0());
  }
  if (!from._internal_connection_signature_verification_key().empty()) {
    _this->_internal_set_connection_signature_verification_key(from._internal_connection_signature_verification_key());
  }
  if (!from._internal_advertisement_signature_verification_key().empty()) {
    _this->_internal_set_advertisement_signature_verification_key(from._internal_advertisement_signature_verification_key());
  }
  if (!from._internal_version().empty()) {
    _this->_internal_set_version(from._internal_version());
  }
  if (!from._internal_encrypted_metadata_bytes_v1().empty()) {
    _this->_internal_set_encrypted_metadata_bytes_v1(from._internal_encrypted_metadata_bytes_v1());
  }
  if (!from._internal_metadata_encryption_key_unsigned_adv_tag_v1().empty()) {
    _this->_internal_set_metadata_encryption_key_unsigned_adv_tag_v1(from._internal_metadata_encryption_key_unsigned_adv_tag_v1());
  }
  if (!from._internal_dusi().empty()) {
    _this->_internal_set_dusi(from._internal_dusi());
  }
  if (from._internal_start_time_millis() != 0) {
    _this->_internal_set_start_time_millis(from._internal_start_time_millis());
  }
  if (from._internal_end_time_millis() != 0) {
    _this->_internal_set_end_time_millis(from._internal_end_time_millis());
  }
  if (from._internal_identity_type() != 0) {
    _this->_internal_set_identity_type(from._internal_identity_type());
  }
  if (from._internal_credential_type() != 0) {
    _this->_internal_set_credential_type(from._internal_credential_type());
  }
  if (from._internal_id() != 0) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SharedCredential::CopyFrom(const SharedCredential& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:nearby.internal.SharedCredential)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedCredential::IsInitialized() const {
  return true;
}

void SharedCredential::InternalSwap(SharedCredential* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.secret_id_, lhs_arena,
                                       &other->_impl_.secret_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.key_seed_, lhs_arena,
                                       &other->_impl_.key_seed_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_bytes_v0_, lhs_arena,
                                       &other->_impl_.encrypted_metadata_bytes_v0_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_tag_v0_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_tag_v0_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.connection_signature_verification_key_, lhs_arena,
                                       &other->_impl_.connection_signature_verification_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.advertisement_signature_verification_key_, lhs_arena,
                                       &other->_impl_.advertisement_signature_verification_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.version_, lhs_arena,
                                       &other->_impl_.version_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.encrypted_metadata_bytes_v1_, lhs_arena,
                                       &other->_impl_.encrypted_metadata_bytes_v1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.metadata_encryption_key_unsigned_adv_tag_v1_, lhs_arena,
                                       &other->_impl_.metadata_encryption_key_unsigned_adv_tag_v1_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dusi_, lhs_arena,
                                       &other->_impl_.dusi_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.id_)
      + sizeof(SharedCredential::_impl_.id_)
      - PROTOBUF_FIELD_OFFSET(SharedCredential, _impl_.start_time_millis_)>(
          reinterpret_cast<char*>(&_impl_.start_time_millis_),
          reinterpret_cast<char*>(&other->_impl_.start_time_millis_));
}

std::string SharedCredential::GetTypeName() const {
  return "nearby.internal.SharedCredential";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::nearby::internal::SharedCredential*
Arena::CreateMaybeMessage< ::nearby::internal::SharedCredential >(Arena* arena) {
  return Arena::CreateMessageInternal< ::nearby::internal::SharedCredential >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
