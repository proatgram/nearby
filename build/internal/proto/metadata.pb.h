// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal/proto/metadata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fmetadata_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fmetadata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_internal_2fproto_2fmetadata_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_internal_2fproto_2fmetadata_2eproto {
  static const ::uint32_t offsets[];
};
namespace nearby {
namespace internal {
class DeviceIdentityMetaData;
struct DeviceIdentityMetaDataDefaultTypeInternal;
extern DeviceIdentityMetaDataDefaultTypeInternal _DeviceIdentityMetaData_default_instance_;
class Metadata;
struct MetadataDefaultTypeInternal;
extern MetadataDefaultTypeInternal _Metadata_default_instance_;
}  // namespace internal
}  // namespace nearby
PROTOBUF_NAMESPACE_OPEN
template <>
::nearby::internal::DeviceIdentityMetaData* Arena::CreateMaybeMessage<::nearby::internal::DeviceIdentityMetaData>(Arena*);
template <>
::nearby::internal::Metadata* Arena::CreateMaybeMessage<::nearby::internal::Metadata>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace nearby {
namespace internal {
enum DeviceType : int {
  DEVICE_TYPE_UNKNOWN = 0,
  DEVICE_TYPE_PHONE = 1,
  DEVICE_TYPE_TABLET = 2,
  DEVICE_TYPE_DISPLAY = 3,
  DEVICE_TYPE_LAPTOP = 4,
  DEVICE_TYPE_TV = 5,
  DEVICE_TYPE_WATCH = 6,
  DEVICE_TYPE_CHROMEOS = 7,
  DEVICE_TYPE_FOLDABLE = 8,
  DEVICE_TYPE_AUTOMOTIVE = 9,
  DEVICE_TYPE_SPEAKER = 10,
  DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = static_cast<DeviceType>(0);
constexpr DeviceType DeviceType_MAX = static_cast<DeviceType>(10);
constexpr int DeviceType_ARRAYSIZE = 10 + 1;
const std::string& DeviceType_Name(DeviceType value);
template <typename T>
const std::string& DeviceType_Name(T value) {
  static_assert(std::is_same<T, DeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceType_Name().");
  return DeviceType_Name(static_cast<DeviceType>(value));
}
const std::string& DeviceType_Name(DeviceType value);
bool DeviceType_Parse(absl::string_view name, DeviceType* value);
enum InstanceType : int {
  INSTANCE_TYPE_UNKNOWN = 0,
  INSTANCE_TYPE_MAIN = 1,
  INSTANCE_TYPE_SECONDARY = 2,
  InstanceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  InstanceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool InstanceType_IsValid(int value);
constexpr InstanceType InstanceType_MIN = static_cast<InstanceType>(0);
constexpr InstanceType InstanceType_MAX = static_cast<InstanceType>(2);
constexpr int InstanceType_ARRAYSIZE = 2 + 1;
const std::string& InstanceType_Name(InstanceType value);
template <typename T>
const std::string& InstanceType_Name(T value) {
  static_assert(std::is_same<T, InstanceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InstanceType_Name().");
  return InstanceType_Name(static_cast<InstanceType>(value));
}
const std::string& InstanceType_Name(InstanceType value);
bool InstanceType_Parse(absl::string_view name, InstanceType* value);

// ===================================================================


// -------------------------------------------------------------------

class DeviceIdentityMetaData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.internal.DeviceIdentityMetaData) */ {
 public:
  inline DeviceIdentityMetaData() : DeviceIdentityMetaData(nullptr) {}
  ~DeviceIdentityMetaData() override;
  explicit PROTOBUF_CONSTEXPR DeviceIdentityMetaData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceIdentityMetaData(const DeviceIdentityMetaData& from);
  DeviceIdentityMetaData(DeviceIdentityMetaData&& from) noexcept
    : DeviceIdentityMetaData() {
    *this = ::std::move(from);
  }

  inline DeviceIdentityMetaData& operator=(const DeviceIdentityMetaData& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceIdentityMetaData& operator=(DeviceIdentityMetaData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceIdentityMetaData& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceIdentityMetaData* internal_default_instance() {
    return reinterpret_cast<const DeviceIdentityMetaData*>(
               &_DeviceIdentityMetaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceIdentityMetaData& a, DeviceIdentityMetaData& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceIdentityMetaData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceIdentityMetaData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceIdentityMetaData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceIdentityMetaData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeviceIdentityMetaData& from);
  void MergeFrom(const DeviceIdentityMetaData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceIdentityMetaData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.internal.DeviceIdentityMetaData";
  }
  protected:
  explicit DeviceIdentityMetaData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceNameFieldNumber = 2,
    kBluetoothMacAddressFieldNumber = 3,
    kDeviceTypeFieldNumber = 1,
    kInstanceTypeFieldNumber = 4,
  };
  // string device_name = 2;
  void clear_device_name() ;
  const std::string& device_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* ptr);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // bytes bluetooth_mac_address = 3;
  void clear_bluetooth_mac_address() ;
  const std::string& bluetooth_mac_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bluetooth_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_bluetooth_mac_address();
  PROTOBUF_NODISCARD std::string* release_bluetooth_mac_address();
  void set_allocated_bluetooth_mac_address(std::string* ptr);

  private:
  const std::string& _internal_bluetooth_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluetooth_mac_address(
      const std::string& value);
  std::string* _internal_mutable_bluetooth_mac_address();

  public:
  // .nearby.internal.DeviceType device_type = 1;
  void clear_device_type() ;
  ::nearby::internal::DeviceType device_type() const;
  void set_device_type(::nearby::internal::DeviceType value);

  private:
  ::nearby::internal::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::nearby::internal::DeviceType value);

  public:
  // .nearby.internal.InstanceType instance_type = 4;
  void clear_instance_type() ;
  ::nearby::internal::InstanceType instance_type() const;
  void set_instance_type(::nearby::internal::InstanceType value);

  private:
  ::nearby::internal::InstanceType _internal_instance_type() const;
  void _internal_set_instance_type(::nearby::internal::InstanceType value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.internal.DeviceIdentityMetaData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluetooth_mac_address_;
    int device_type_;
    int instance_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2fproto_2fmetadata_2eproto;
};// -------------------------------------------------------------------

class Metadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:nearby.internal.Metadata) */ {
 public:
  inline Metadata() : Metadata(nullptr) {}
  ~Metadata() override;
  explicit PROTOBUF_CONSTEXPR Metadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Metadata(const Metadata& from);
  Metadata(Metadata&& from) noexcept
    : Metadata() {
    *this = ::std::move(from);
  }

  inline Metadata& operator=(const Metadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline Metadata& operator=(Metadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Metadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const Metadata* internal_default_instance() {
    return reinterpret_cast<const Metadata*>(
               &_Metadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Metadata& a, Metadata& b) {
    a.Swap(&b);
  }
  inline void Swap(Metadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Metadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Metadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Metadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Metadata& from);
  void MergeFrom(const Metadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Metadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "nearby.internal.Metadata";
  }
  protected:
  explicit Metadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountNameFieldNumber = 2,
    kDeviceNameFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kDeviceProfileUrlFieldNumber = 5,
    kBluetoothMacAddressFieldNumber = 6,
    kDeviceTypeFieldNumber = 1,
    kInstanceTypeFieldNumber = 7,
  };
  // string account_name = 2;
  void clear_account_name() ;
  const std::string& account_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_account_name(Arg_&& arg, Args_... args);
  std::string* mutable_account_name();
  PROTOBUF_NODISCARD std::string* release_account_name();
  void set_allocated_account_name(std::string* ptr);

  private:
  const std::string& _internal_account_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account_name(
      const std::string& value);
  std::string* _internal_mutable_account_name();

  public:
  // string device_name = 3;
  void clear_device_name() ;
  const std::string& device_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_name(Arg_&& arg, Args_... args);
  std::string* mutable_device_name();
  PROTOBUF_NODISCARD std::string* release_device_name();
  void set_allocated_device_name(std::string* ptr);

  private:
  const std::string& _internal_device_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_name(
      const std::string& value);
  std::string* _internal_mutable_device_name();

  public:
  // string user_name = 4;
  void clear_user_name() ;
  const std::string& user_name() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_name(Arg_&& arg, Args_... args);
  std::string* mutable_user_name();
  PROTOBUF_NODISCARD std::string* release_user_name();
  void set_allocated_user_name(std::string* ptr);

  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(
      const std::string& value);
  std::string* _internal_mutable_user_name();

  public:
  // string device_profile_url = 5;
  void clear_device_profile_url() ;
  const std::string& device_profile_url() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_profile_url(Arg_&& arg, Args_... args);
  std::string* mutable_device_profile_url();
  PROTOBUF_NODISCARD std::string* release_device_profile_url();
  void set_allocated_device_profile_url(std::string* ptr);

  private:
  const std::string& _internal_device_profile_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_profile_url(
      const std::string& value);
  std::string* _internal_mutable_device_profile_url();

  public:
  // bytes bluetooth_mac_address = 6;
  void clear_bluetooth_mac_address() ;
  const std::string& bluetooth_mac_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bluetooth_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_bluetooth_mac_address();
  PROTOBUF_NODISCARD std::string* release_bluetooth_mac_address();
  void set_allocated_bluetooth_mac_address(std::string* ptr);

  private:
  const std::string& _internal_bluetooth_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluetooth_mac_address(
      const std::string& value);
  std::string* _internal_mutable_bluetooth_mac_address();

  public:
  // .nearby.internal.DeviceType device_type = 1;
  void clear_device_type() ;
  ::nearby::internal::DeviceType device_type() const;
  void set_device_type(::nearby::internal::DeviceType value);

  private:
  ::nearby::internal::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::nearby::internal::DeviceType value);

  public:
  // .nearby.internal.InstanceType instance_type = 7;
  void clear_instance_type() ;
  ::nearby::internal::InstanceType instance_type() const;
  void set_instance_type(::nearby::internal::InstanceType value);

  private:
  ::nearby::internal::InstanceType _internal_instance_type() const;
  void _internal_set_instance_type(::nearby::internal::InstanceType value);

  public:
  // @@protoc_insertion_point(class_scope:nearby.internal.Metadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_profile_url_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluetooth_mac_address_;
    int device_type_;
    int instance_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_internal_2fproto_2fmetadata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceIdentityMetaData

// .nearby.internal.DeviceType device_type = 1;
inline void DeviceIdentityMetaData::clear_device_type() {
  _impl_.device_type_ = 0;
}
inline ::nearby::internal::DeviceType DeviceIdentityMetaData::device_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.DeviceIdentityMetaData.device_type)
  return _internal_device_type();
}
inline void DeviceIdentityMetaData::set_device_type(::nearby::internal::DeviceType value) {
   _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.DeviceIdentityMetaData.device_type)
}
inline ::nearby::internal::DeviceType DeviceIdentityMetaData::_internal_device_type() const {
  return static_cast<::nearby::internal::DeviceType>(_impl_.device_type_);
}
inline void DeviceIdentityMetaData::_internal_set_device_type(::nearby::internal::DeviceType value) {
  ;
  _impl_.device_type_ = value;
}

// string device_name = 2;
inline void DeviceIdentityMetaData::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& DeviceIdentityMetaData::device_name() const {
  // @@protoc_insertion_point(field_get:nearby.internal.DeviceIdentityMetaData.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceIdentityMetaData::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.DeviceIdentityMetaData.device_name)
}
inline std::string* DeviceIdentityMetaData::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:nearby.internal.DeviceIdentityMetaData.device_name)
  return _s;
}
inline const std::string& DeviceIdentityMetaData::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void DeviceIdentityMetaData::_internal_set_device_name(const std::string& value) {
  ;


  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceIdentityMetaData::_internal_mutable_device_name() {
  ;
  return _impl_.device_name_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceIdentityMetaData::release_device_name() {
  // @@protoc_insertion_point(field_release:nearby.internal.DeviceIdentityMetaData.device_name)
  return _impl_.device_name_.Release();
}
inline void DeviceIdentityMetaData::set_allocated_device_name(std::string* value) {
  _impl_.device_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.DeviceIdentityMetaData.device_name)
}

// bytes bluetooth_mac_address = 3;
inline void DeviceIdentityMetaData::clear_bluetooth_mac_address() {
  _impl_.bluetooth_mac_address_.ClearToEmpty();
}
inline const std::string& DeviceIdentityMetaData::bluetooth_mac_address() const {
  // @@protoc_insertion_point(field_get:nearby.internal.DeviceIdentityMetaData.bluetooth_mac_address)
  return _internal_bluetooth_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceIdentityMetaData::set_bluetooth_mac_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bluetooth_mac_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.DeviceIdentityMetaData.bluetooth_mac_address)
}
inline std::string* DeviceIdentityMetaData::mutable_bluetooth_mac_address() {
  std::string* _s = _internal_mutable_bluetooth_mac_address();
  // @@protoc_insertion_point(field_mutable:nearby.internal.DeviceIdentityMetaData.bluetooth_mac_address)
  return _s;
}
inline const std::string& DeviceIdentityMetaData::_internal_bluetooth_mac_address() const {
  return _impl_.bluetooth_mac_address_.Get();
}
inline void DeviceIdentityMetaData::_internal_set_bluetooth_mac_address(const std::string& value) {
  ;


  _impl_.bluetooth_mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceIdentityMetaData::_internal_mutable_bluetooth_mac_address() {
  ;
  return _impl_.bluetooth_mac_address_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceIdentityMetaData::release_bluetooth_mac_address() {
  // @@protoc_insertion_point(field_release:nearby.internal.DeviceIdentityMetaData.bluetooth_mac_address)
  return _impl_.bluetooth_mac_address_.Release();
}
inline void DeviceIdentityMetaData::set_allocated_bluetooth_mac_address(std::string* value) {
  _impl_.bluetooth_mac_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bluetooth_mac_address_.IsDefault()) {
          _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.DeviceIdentityMetaData.bluetooth_mac_address)
}

// .nearby.internal.InstanceType instance_type = 4;
inline void DeviceIdentityMetaData::clear_instance_type() {
  _impl_.instance_type_ = 0;
}
inline ::nearby::internal::InstanceType DeviceIdentityMetaData::instance_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.DeviceIdentityMetaData.instance_type)
  return _internal_instance_type();
}
inline void DeviceIdentityMetaData::set_instance_type(::nearby::internal::InstanceType value) {
   _internal_set_instance_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.DeviceIdentityMetaData.instance_type)
}
inline ::nearby::internal::InstanceType DeviceIdentityMetaData::_internal_instance_type() const {
  return static_cast<::nearby::internal::InstanceType>(_impl_.instance_type_);
}
inline void DeviceIdentityMetaData::_internal_set_instance_type(::nearby::internal::InstanceType value) {
  ;
  _impl_.instance_type_ = value;
}

// -------------------------------------------------------------------

// Metadata

// .nearby.internal.DeviceType device_type = 1;
inline void Metadata::clear_device_type() {
  _impl_.device_type_ = 0;
}
inline ::nearby::internal::DeviceType Metadata::device_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.device_type)
  return _internal_device_type();
}
inline void Metadata::set_device_type(::nearby::internal::DeviceType value) {
   _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.device_type)
}
inline ::nearby::internal::DeviceType Metadata::_internal_device_type() const {
  return static_cast<::nearby::internal::DeviceType>(_impl_.device_type_);
}
inline void Metadata::_internal_set_device_type(::nearby::internal::DeviceType value) {
  ;
  _impl_.device_type_ = value;
}

// string account_name = 2;
inline void Metadata::clear_account_name() {
  _impl_.account_name_.ClearToEmpty();
}
inline const std::string& Metadata::account_name() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.account_name)
  return _internal_account_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_account_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.account_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.account_name)
}
inline std::string* Metadata::mutable_account_name() {
  std::string* _s = _internal_mutable_account_name();
  // @@protoc_insertion_point(field_mutable:nearby.internal.Metadata.account_name)
  return _s;
}
inline const std::string& Metadata::_internal_account_name() const {
  return _impl_.account_name_.Get();
}
inline void Metadata::_internal_set_account_name(const std::string& value) {
  ;


  _impl_.account_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_account_name() {
  ;
  return _impl_.account_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_account_name() {
  // @@protoc_insertion_point(field_release:nearby.internal.Metadata.account_name)
  return _impl_.account_name_.Release();
}
inline void Metadata::set_allocated_account_name(std::string* value) {
  _impl_.account_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.account_name_.IsDefault()) {
          _impl_.account_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.Metadata.account_name)
}

// string device_name = 3;
inline void Metadata::clear_device_name() {
  _impl_.device_name_.ClearToEmpty();
}
inline const std::string& Metadata::device_name() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.device_name)
  return _internal_device_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_device_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.device_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.device_name)
}
inline std::string* Metadata::mutable_device_name() {
  std::string* _s = _internal_mutable_device_name();
  // @@protoc_insertion_point(field_mutable:nearby.internal.Metadata.device_name)
  return _s;
}
inline const std::string& Metadata::_internal_device_name() const {
  return _impl_.device_name_.Get();
}
inline void Metadata::_internal_set_device_name(const std::string& value) {
  ;


  _impl_.device_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_device_name() {
  ;
  return _impl_.device_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_device_name() {
  // @@protoc_insertion_point(field_release:nearby.internal.Metadata.device_name)
  return _impl_.device_name_.Release();
}
inline void Metadata::set_allocated_device_name(std::string* value) {
  _impl_.device_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_name_.IsDefault()) {
          _impl_.device_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.Metadata.device_name)
}

// string user_name = 4;
inline void Metadata::clear_user_name() {
  _impl_.user_name_.ClearToEmpty();
}
inline const std::string& Metadata::user_name() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.user_name)
  return _internal_user_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_user_name(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.user_name_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.user_name)
}
inline std::string* Metadata::mutable_user_name() {
  std::string* _s = _internal_mutable_user_name();
  // @@protoc_insertion_point(field_mutable:nearby.internal.Metadata.user_name)
  return _s;
}
inline const std::string& Metadata::_internal_user_name() const {
  return _impl_.user_name_.Get();
}
inline void Metadata::_internal_set_user_name(const std::string& value) {
  ;


  _impl_.user_name_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_user_name() {
  ;
  return _impl_.user_name_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_user_name() {
  // @@protoc_insertion_point(field_release:nearby.internal.Metadata.user_name)
  return _impl_.user_name_.Release();
}
inline void Metadata::set_allocated_user_name(std::string* value) {
  _impl_.user_name_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_name_.IsDefault()) {
          _impl_.user_name_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.Metadata.user_name)
}

// string device_profile_url = 5;
inline void Metadata::clear_device_profile_url() {
  _impl_.device_profile_url_.ClearToEmpty();
}
inline const std::string& Metadata::device_profile_url() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.device_profile_url)
  return _internal_device_profile_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_device_profile_url(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.device_profile_url_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.device_profile_url)
}
inline std::string* Metadata::mutable_device_profile_url() {
  std::string* _s = _internal_mutable_device_profile_url();
  // @@protoc_insertion_point(field_mutable:nearby.internal.Metadata.device_profile_url)
  return _s;
}
inline const std::string& Metadata::_internal_device_profile_url() const {
  return _impl_.device_profile_url_.Get();
}
inline void Metadata::_internal_set_device_profile_url(const std::string& value) {
  ;


  _impl_.device_profile_url_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_device_profile_url() {
  ;
  return _impl_.device_profile_url_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_device_profile_url() {
  // @@protoc_insertion_point(field_release:nearby.internal.Metadata.device_profile_url)
  return _impl_.device_profile_url_.Release();
}
inline void Metadata::set_allocated_device_profile_url(std::string* value) {
  _impl_.device_profile_url_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_profile_url_.IsDefault()) {
          _impl_.device_profile_url_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.Metadata.device_profile_url)
}

// bytes bluetooth_mac_address = 6;
inline void Metadata::clear_bluetooth_mac_address() {
  _impl_.bluetooth_mac_address_.ClearToEmpty();
}
inline const std::string& Metadata::bluetooth_mac_address() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.bluetooth_mac_address)
  return _internal_bluetooth_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Metadata::set_bluetooth_mac_address(Arg_&& arg,
                                                     Args_... args) {
  ;
  _impl_.bluetooth_mac_address_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.bluetooth_mac_address)
}
inline std::string* Metadata::mutable_bluetooth_mac_address() {
  std::string* _s = _internal_mutable_bluetooth_mac_address();
  // @@protoc_insertion_point(field_mutable:nearby.internal.Metadata.bluetooth_mac_address)
  return _s;
}
inline const std::string& Metadata::_internal_bluetooth_mac_address() const {
  return _impl_.bluetooth_mac_address_.Get();
}
inline void Metadata::_internal_set_bluetooth_mac_address(const std::string& value) {
  ;


  _impl_.bluetooth_mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* Metadata::_internal_mutable_bluetooth_mac_address() {
  ;
  return _impl_.bluetooth_mac_address_.Mutable( GetArenaForAllocation());
}
inline std::string* Metadata::release_bluetooth_mac_address() {
  // @@protoc_insertion_point(field_release:nearby.internal.Metadata.bluetooth_mac_address)
  return _impl_.bluetooth_mac_address_.Release();
}
inline void Metadata::set_allocated_bluetooth_mac_address(std::string* value) {
  _impl_.bluetooth_mac_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bluetooth_mac_address_.IsDefault()) {
          _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:nearby.internal.Metadata.bluetooth_mac_address)
}

// .nearby.internal.InstanceType instance_type = 7;
inline void Metadata::clear_instance_type() {
  _impl_.instance_type_ = 0;
}
inline ::nearby::internal::InstanceType Metadata::instance_type() const {
  // @@protoc_insertion_point(field_get:nearby.internal.Metadata.instance_type)
  return _internal_instance_type();
}
inline void Metadata::set_instance_type(::nearby::internal::InstanceType value) {
   _internal_set_instance_type(value);
  // @@protoc_insertion_point(field_set:nearby.internal.Metadata.instance_type)
}
inline ::nearby::internal::InstanceType Metadata::_internal_instance_type() const {
  return static_cast<::nearby::internal::InstanceType>(_impl_.instance_type_);
}
inline void Metadata::_internal_set_instance_type(::nearby::internal::InstanceType value) {
  ;
  _impl_.instance_type_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace internal
}  // namespace nearby


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::nearby::internal::DeviceType> : std::true_type {};
template <>
struct is_proto_enum<::nearby::internal::InstanceType> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_internal_2fproto_2fmetadata_2eproto_2epb_2eh
