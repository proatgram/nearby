// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: securemessage.proto

#include "securemessage.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace securemessage {
PROTOBUF_CONSTEXPR SecureMessage::SecureMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_and_body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.signature_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct SecureMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SecureMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SecureMessageDefaultTypeInternal() {}
  union {
    SecureMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SecureMessageDefaultTypeInternal _SecureMessage_default_instance_;
PROTOBUF_CONSTEXPR Header::Header(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.verification_key_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.decryption_key_id_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.iv_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.public_metadata_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.associated_data_length_)*/ 0u

  , /*decltype(_impl_.signature_scheme_)*/ 1

  , /*decltype(_impl_.encryption_scheme_)*/ 1
} {}
struct HeaderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderDefaultTypeInternal() {}
  union {
    Header _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderDefaultTypeInternal _Header_default_instance_;
PROTOBUF_CONSTEXPR HeaderAndBody::HeaderAndBody(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.header_)*/nullptr} {}
struct HeaderAndBodyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderAndBodyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderAndBodyDefaultTypeInternal() {}
  union {
    HeaderAndBody _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderAndBodyDefaultTypeInternal _HeaderAndBody_default_instance_;
PROTOBUF_CONSTEXPR HeaderAndBodyInternal::HeaderAndBodyInternal(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.header_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.body_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct HeaderAndBodyInternalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR HeaderAndBodyInternalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~HeaderAndBodyInternalDefaultTypeInternal() {}
  union {
    HeaderAndBodyInternal _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 HeaderAndBodyInternalDefaultTypeInternal _HeaderAndBodyInternal_default_instance_;
PROTOBUF_CONSTEXPR EcP256PublicKey::EcP256PublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.y_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct EcP256PublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EcP256PublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EcP256PublicKeyDefaultTypeInternal() {}
  union {
    EcP256PublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EcP256PublicKeyDefaultTypeInternal _EcP256PublicKey_default_instance_;
PROTOBUF_CONSTEXPR SimpleRsaPublicKey::SimpleRsaPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.n_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.e_)*/ 65537
} {}
struct SimpleRsaPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SimpleRsaPublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SimpleRsaPublicKeyDefaultTypeInternal() {}
  union {
    SimpleRsaPublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SimpleRsaPublicKeyDefaultTypeInternal _SimpleRsaPublicKey_default_instance_;
PROTOBUF_CONSTEXPR DhPublicKey::DhPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.y_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct DhPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DhPublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DhPublicKeyDefaultTypeInternal() {}
  union {
    DhPublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DhPublicKeyDefaultTypeInternal _DhPublicKey_default_instance_;
PROTOBUF_CONSTEXPR GenericPublicKey::GenericPublicKey(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.ec_p256_public_key_)*/nullptr
  , /*decltype(_impl_.rsa2048_public_key_)*/nullptr
  , /*decltype(_impl_.dh2048_public_key_)*/nullptr
  , /*decltype(_impl_.type_)*/ 1
} {}
struct GenericPublicKeyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GenericPublicKeyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GenericPublicKeyDefaultTypeInternal() {}
  union {
    GenericPublicKey _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GenericPublicKeyDefaultTypeInternal _GenericPublicKey_default_instance_;
}  // namespace securemessage
namespace securemessage {
bool SigScheme_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    SigScheme_strings[3] = {};

static const char SigScheme_names[] = {
    "ECDSA_P256_SHA256"
    "HMAC_SHA256"
    "RSA2048_SHA256"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SigScheme_entries[] =
    {
        {{&SigScheme_names[0], 17}, 2},
        {{&SigScheme_names[17], 11}, 1},
        {{&SigScheme_names[28], 14}, 3},
};

static const int SigScheme_entries_by_number[] = {
    1,  // 1 -> HMAC_SHA256
    0,  // 2 -> ECDSA_P256_SHA256
    2,  // 3 -> RSA2048_SHA256
};

const std::string& SigScheme_Name(SigScheme value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SigScheme_entries, SigScheme_entries_by_number,
          3, SigScheme_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SigScheme_entries, SigScheme_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : SigScheme_strings[idx].get();
}

bool SigScheme_Parse(absl::string_view name, SigScheme* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SigScheme_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SigScheme>(int_value);
  }
  return success;
}
bool EncScheme_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    EncScheme_strings[2] = {};

static const char EncScheme_names[] = {
    "AES_256_CBC"
    "NONE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry EncScheme_entries[] =
    {
        {{&EncScheme_names[0], 11}, 2},
        {{&EncScheme_names[11], 4}, 1},
};

static const int EncScheme_entries_by_number[] = {
    1,  // 1 -> NONE
    0,  // 2 -> AES_256_CBC
};

const std::string& EncScheme_Name(EncScheme value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          EncScheme_entries, EncScheme_entries_by_number,
          2, EncScheme_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      EncScheme_entries, EncScheme_entries_by_number, 2,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : EncScheme_strings[idx].get();
}

bool EncScheme_Parse(absl::string_view name, EncScheme* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      EncScheme_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<EncScheme>(int_value);
  }
  return success;
}
bool PublicKeyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    PublicKeyType_strings[3] = {};

static const char PublicKeyType_names[] = {
    "DH2048_MODP"
    "EC_P256"
    "RSA2048"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry PublicKeyType_entries[] =
    {
        {{&PublicKeyType_names[0], 11}, 3},
        {{&PublicKeyType_names[11], 7}, 1},
        {{&PublicKeyType_names[18], 7}, 2},
};

static const int PublicKeyType_entries_by_number[] = {
    1,  // 1 -> EC_P256
    2,  // 2 -> RSA2048
    0,  // 3 -> DH2048_MODP
};

const std::string& PublicKeyType_Name(PublicKeyType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          PublicKeyType_entries, PublicKeyType_entries_by_number,
          3, PublicKeyType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      PublicKeyType_entries, PublicKeyType_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : PublicKeyType_strings[idx].get();
}

bool PublicKeyType_Parse(absl::string_view name, PublicKeyType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      PublicKeyType_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<PublicKeyType>(int_value);
  }
  return success;
}
// ===================================================================

class SecureMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SecureMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SecureMessage, _impl_._has_bits_);
  static void set_has_header_and_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_signature(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

SecureMessage::SecureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.SecureMessage)
}
SecureMessage::SecureMessage(const SecureMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SecureMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_and_body_) {}

    , decltype(_impl_.signature_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.header_and_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_and_body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_and_body_.Set(from._internal_header_and_body(), _this->GetArenaForAllocation());
  }
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.signature_.Set(from._internal_signature(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:securemessage.SecureMessage)
}

inline void SecureMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_and_body_) {}

    , decltype(_impl_.signature_) {}

  };
  _impl_.header_and_body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_and_body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SecureMessage::~SecureMessage() {
  // @@protoc_insertion_point(destructor:securemessage.SecureMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SecureMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_and_body_.Destroy();
  _impl_.signature_.Destroy();
}

void SecureMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SecureMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.SecureMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.header_and_body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.signature_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SecureMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes header_and_body = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header_and_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes signature = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_signature();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SecureMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.SecureMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes header_and_body = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_header_and_body();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // required bytes signature = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_signature();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.SecureMessage)
  return target;
}

::size_t SecureMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securemessage.SecureMessage)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required bytes header_and_body = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_header_and_body());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bytes signature = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());
  }

  return total_size;
}
::size_t SecureMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.SecureMessage)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes header_and_body = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_header_and_body());

    // required bytes signature = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_signature());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SecureMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SecureMessage*>(
      &from));
}

void SecureMessage::MergeFrom(const SecureMessage& from) {
  SecureMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.SecureMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header_and_body(from._internal_header_and_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_signature(from._internal_signature());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SecureMessage::CopyFrom(const SecureMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.SecureMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SecureMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SecureMessage::InternalSwap(SecureMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_and_body_, lhs_arena,
                                       &other->_impl_.header_and_body_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.signature_, lhs_arena,
                                       &other->_impl_.signature_, rhs_arena);
}

std::string SecureMessage::GetTypeName() const {
  return "securemessage.SecureMessage";
}

// ===================================================================

class Header::_Internal {
 public:
  using HasBits = decltype(std::declval<Header>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Header, _impl_._has_bits_);
  static void set_has_signature_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_encryption_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_verification_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_decryption_key_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_iv(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_public_metadata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_associated_data_length(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000060) ^ 0x00000060) != 0;
  }
};

Header::Header(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.Header)
}
Header::Header(const Header& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Header* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.verification_key_id_) {}

    , decltype(_impl_.decryption_key_id_) {}

    , decltype(_impl_.iv_) {}

    , decltype(_impl_.public_metadata_) {}

    , decltype(_impl_.associated_data_length_) {}

    , decltype(_impl_.signature_scheme_) {}

    , decltype(_impl_.encryption_scheme_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.verification_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verification_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.verification_key_id_.Set(from._internal_verification_key_id(), _this->GetArenaForAllocation());
  }
  _impl_.decryption_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.decryption_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.decryption_key_id_.Set(from._internal_decryption_key_id(), _this->GetArenaForAllocation());
  }
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.iv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.iv_.Set(from._internal_iv(), _this->GetArenaForAllocation());
  }
  _impl_.public_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.public_metadata_.Set(from._internal_public_metadata(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.associated_data_length_, &from._impl_.associated_data_length_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.encryption_scheme_) -
    reinterpret_cast<char*>(&_impl_.associated_data_length_)) + sizeof(_impl_.encryption_scheme_));
  // @@protoc_insertion_point(copy_constructor:securemessage.Header)
}

inline void Header::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.verification_key_id_) {}

    , decltype(_impl_.decryption_key_id_) {}

    , decltype(_impl_.iv_) {}

    , decltype(_impl_.public_metadata_) {}

    , decltype(_impl_.associated_data_length_) { 0u }

    , decltype(_impl_.signature_scheme_) { 1 }

    , decltype(_impl_.encryption_scheme_) { 1 }

  };
  _impl_.verification_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.verification_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decryption_key_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.decryption_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.iv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_metadata_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Header::~Header() {
  // @@protoc_insertion_point(destructor:securemessage.Header)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Header::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.verification_key_id_.Destroy();
  _impl_.decryption_key_id_.Destroy();
  _impl_.iv_.Destroy();
  _impl_.public_metadata_.Destroy();
}

void Header::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Header::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.Header)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.verification_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.decryption_key_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.iv_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.public_metadata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000070u) {
    _impl_.associated_data_length_ = 0u;
    _impl_.signature_scheme_ = 1;
    _impl_.encryption_scheme_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Header::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .securemessage.SigScheme signature_scheme = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securemessage::SigScheme_IsValid(static_cast<int>(val)))) {
            _internal_set_signature_scheme(static_cast<::securemessage::SigScheme>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // required .securemessage.EncScheme encryption_scheme = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securemessage::EncScheme_IsValid(static_cast<int>(val)))) {
            _internal_set_encryption_scheme(static_cast<::securemessage::EncScheme>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes verification_key_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_verification_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes decryption_key_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_decryption_key_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes iv = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_iv();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes public_metadata = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_public_metadata();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional uint32 associated_data_length = 7 [default = 0];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 56)) {
          _Internal::set_has_associated_data_length(&has_bits);
          _impl_.associated_data_length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Header::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.Header)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .securemessage.SigScheme signature_scheme = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_signature_scheme(), target);
  }

  // required .securemessage.EncScheme encryption_scheme = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_encryption_scheme(), target);
  }

  // optional bytes verification_key_id = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_verification_key_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // optional bytes decryption_key_id = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_decryption_key_id();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  // optional bytes iv = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_iv();
    target = stream->WriteBytesMaybeAliased(5, _s, target);
  }

  // optional bytes public_metadata = 6;
  if (cached_has_bits & 0x00000008u) {
    const std::string& _s = this->_internal_public_metadata();
    target = stream->WriteBytesMaybeAliased(6, _s, target);
  }

  // optional uint32 associated_data_length = 7 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_associated_data_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.Header)
  return target;
}

::size_t Header::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securemessage.Header)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000020u) != 0) {
    // required .securemessage.SigScheme signature_scheme = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_signature_scheme());
  }

  if ((_impl_._has_bits_[0] & 0x00000040u) != 0) {
    // required .securemessage.EncScheme encryption_scheme = 2;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_scheme());
  }

  return total_size;
}
::size_t Header::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.Header)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000060) ^ 0x00000060) == 0) {  // All required fields are present.
    // required .securemessage.SigScheme signature_scheme = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_signature_scheme());

    // required .securemessage.EncScheme encryption_scheme = 2;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_encryption_scheme());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional bytes verification_key_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_verification_key_id());
    }

    // optional bytes decryption_key_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_decryption_key_id());
    }

    // optional bytes iv = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_iv());
    }

    // optional bytes public_metadata = 6;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_public_metadata());
    }

    // optional uint32 associated_data_length = 7 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_associated_data_length());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Header::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Header*>(
      &from));
}

void Header::MergeFrom(const Header& from) {
  Header* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.Header)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_verification_key_id(from._internal_verification_key_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_decryption_key_id(from._internal_decryption_key_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_iv(from._internal_iv());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_public_metadata(from._internal_public_metadata());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.associated_data_length_ = from._impl_.associated_data_length_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.signature_scheme_ = from._impl_.signature_scheme_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.encryption_scheme_ = from._impl_.encryption_scheme_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Header::CopyFrom(const Header& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.Header)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Header::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void Header::InternalSwap(Header* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.verification_key_id_, lhs_arena,
                                       &other->_impl_.verification_key_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.decryption_key_id_, lhs_arena,
                                       &other->_impl_.decryption_key_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iv_, lhs_arena,
                                       &other->_impl_.iv_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_metadata_, lhs_arena,
                                       &other->_impl_.public_metadata_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Header, _impl_.encryption_scheme_)
      + sizeof(Header::_impl_.encryption_scheme_)
      - PROTOBUF_FIELD_OFFSET(Header, _impl_.associated_data_length_)>(
          reinterpret_cast<char*>(&_impl_.associated_data_length_),
          reinterpret_cast<char*>(&other->_impl_.associated_data_length_));
}

std::string Header::GetTypeName() const {
  return "securemessage.Header";
}

// ===================================================================

class HeaderAndBody::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderAndBody>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeaderAndBody, _impl_._has_bits_);
  static const ::securemessage::Header& header(const HeaderAndBody* msg);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

const ::securemessage::Header&
HeaderAndBody::_Internal::header(const HeaderAndBody* msg) {
  return *msg->_impl_.header_;
}
HeaderAndBody::HeaderAndBody(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.HeaderAndBody)
}
HeaderAndBody::HeaderAndBody(const HeaderAndBody& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeaderAndBody* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_) {}

    , decltype(_impl_.header_){nullptr}};

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.header_ = new ::securemessage::Header(*from._impl_.header_);
  }
  // @@protoc_insertion_point(copy_constructor:securemessage.HeaderAndBody)
}

inline void HeaderAndBody::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.body_) {}

    , decltype(_impl_.header_){nullptr}
  };
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderAndBody::~HeaderAndBody() {
  // @@protoc_insertion_point(destructor:securemessage.HeaderAndBody)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderAndBody::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.body_.Destroy();
  if (this != internal_default_instance()) delete _impl_.header_;
}

void HeaderAndBody::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderAndBody::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.HeaderAndBody)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.header_ != nullptr);
      _impl_.header_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeaderAndBody::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .securemessage.Header header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeaderAndBody::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.HeaderAndBody)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .securemessage.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::header(this),
        _Internal::header(this).GetCachedSize(), target, stream);
  }

  // required bytes body = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.HeaderAndBody)
  return target;
}

::size_t HeaderAndBody::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securemessage.HeaderAndBody)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required bytes body = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required .securemessage.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);
  }

  return total_size;
}
::size_t HeaderAndBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.HeaderAndBody)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes body = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());

    // required .securemessage.Header header = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.header_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderAndBody::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeaderAndBody*>(
      &from));
}

void HeaderAndBody::MergeFrom(const HeaderAndBody& from) {
  HeaderAndBody* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.HeaderAndBody)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_body(from._internal_body());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_header()->::securemessage::Header::MergeFrom(
          from._internal_header());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeaderAndBody::CopyFrom(const HeaderAndBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.HeaderAndBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderAndBody::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.header_->IsInitialized()) return false;
  }
  return true;
}

void HeaderAndBody::InternalSwap(HeaderAndBody* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
  swap(_impl_.header_, other->_impl_.header_);
}

std::string HeaderAndBody::GetTypeName() const {
  return "securemessage.HeaderAndBody";
}

// ===================================================================

class HeaderAndBodyInternal::_Internal {
 public:
  using HasBits = decltype(std::declval<HeaderAndBodyInternal>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(HeaderAndBodyInternal, _impl_._has_bits_);
  static void set_has_header(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_body(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

HeaderAndBodyInternal::HeaderAndBodyInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.HeaderAndBodyInternal)
}
HeaderAndBodyInternal::HeaderAndBodyInternal(const HeaderAndBodyInternal& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  HeaderAndBodyInternal* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_) {}

    , decltype(_impl_.body_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.header_.Set(from._internal_header(), _this->GetArenaForAllocation());
  }
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.body_.Set(from._internal_body(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:securemessage.HeaderAndBodyInternal)
}

inline void HeaderAndBodyInternal::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.header_) {}

    , decltype(_impl_.body_) {}

  };
  _impl_.header_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.header_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeaderAndBodyInternal::~HeaderAndBodyInternal() {
  // @@protoc_insertion_point(destructor:securemessage.HeaderAndBodyInternal)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void HeaderAndBodyInternal::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.header_.Destroy();
  _impl_.body_.Destroy();
}

void HeaderAndBodyInternal::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void HeaderAndBodyInternal::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.HeaderAndBodyInternal)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.header_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.body_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* HeaderAndBodyInternal::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes body = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_body();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* HeaderAndBodyInternal::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.HeaderAndBodyInternal)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes header = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_header();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // required bytes body = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_body();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.HeaderAndBodyInternal)
  return target;
}

::size_t HeaderAndBodyInternal::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securemessage.HeaderAndBodyInternal)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required bytes header = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_header());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bytes body = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());
  }

  return total_size;
}
::size_t HeaderAndBodyInternal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.HeaderAndBodyInternal)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes header = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_header());

    // required bytes body = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_body());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeaderAndBodyInternal::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const HeaderAndBodyInternal*>(
      &from));
}

void HeaderAndBodyInternal::MergeFrom(const HeaderAndBodyInternal& from) {
  HeaderAndBodyInternal* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.HeaderAndBodyInternal)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_header(from._internal_header());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_body(from._internal_body());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void HeaderAndBodyInternal::CopyFrom(const HeaderAndBodyInternal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.HeaderAndBodyInternal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeaderAndBodyInternal::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void HeaderAndBodyInternal::InternalSwap(HeaderAndBodyInternal* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.header_, lhs_arena,
                                       &other->_impl_.header_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.body_, lhs_arena,
                                       &other->_impl_.body_, rhs_arena);
}

std::string HeaderAndBodyInternal::GetTypeName() const {
  return "securemessage.HeaderAndBodyInternal";
}

// ===================================================================

class EcP256PublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<EcP256PublicKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EcP256PublicKey, _impl_._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

EcP256PublicKey::EcP256PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.EcP256PublicKey)
}
EcP256PublicKey::EcP256PublicKey(const EcP256PublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EcP256PublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x_.Set(from._internal_x(), _this->GetArenaForAllocation());
  }
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.y_.Set(from._internal_y(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:securemessage.EcP256PublicKey)
}

inline void EcP256PublicKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}

  };
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EcP256PublicKey::~EcP256PublicKey() {
  // @@protoc_insertion_point(destructor:securemessage.EcP256PublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EcP256PublicKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_.Destroy();
  _impl_.y_.Destroy();
}

void EcP256PublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EcP256PublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.EcP256PublicKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EcP256PublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EcP256PublicKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.EcP256PublicKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes x = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_x();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // required bytes y = 2;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_y();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.EcP256PublicKey)
  return target;
}

::size_t EcP256PublicKey::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securemessage.EcP256PublicKey)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required bytes x = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_x());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bytes y = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_y());
  }

  return total_size;
}
::size_t EcP256PublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.EcP256PublicKey)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes x = 1;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_x());

    // required bytes y = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EcP256PublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EcP256PublicKey*>(
      &from));
}

void EcP256PublicKey::MergeFrom(const EcP256PublicKey& from) {
  EcP256PublicKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.EcP256PublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_x(from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_y(from._internal_y());
    }
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EcP256PublicKey::CopyFrom(const EcP256PublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.EcP256PublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcP256PublicKey::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EcP256PublicKey::InternalSwap(EcP256PublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x_, lhs_arena,
                                       &other->_impl_.x_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.y_, lhs_arena,
                                       &other->_impl_.y_, rhs_arena);
}

std::string EcP256PublicKey::GetTypeName() const {
  return "securemessage.EcP256PublicKey";
}

// ===================================================================

class SimpleRsaPublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<SimpleRsaPublicKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SimpleRsaPublicKey, _impl_._has_bits_);
  static void set_has_n(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_e(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

SimpleRsaPublicKey::SimpleRsaPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.SimpleRsaPublicKey)
}
SimpleRsaPublicKey::SimpleRsaPublicKey(const SimpleRsaPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SimpleRsaPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.n_) {}

    , decltype(_impl_.e_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.n_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.n_.Set(from._internal_n(), _this->GetArenaForAllocation());
  }
  _this->_impl_.e_ = from._impl_.e_;
  // @@protoc_insertion_point(copy_constructor:securemessage.SimpleRsaPublicKey)
}

inline void SimpleRsaPublicKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.n_) {}

    , decltype(_impl_.e_) { 65537 }

  };
  _impl_.n_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.n_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SimpleRsaPublicKey::~SimpleRsaPublicKey() {
  // @@protoc_insertion_point(destructor:securemessage.SimpleRsaPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SimpleRsaPublicKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.n_.Destroy();
}

void SimpleRsaPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SimpleRsaPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.SimpleRsaPublicKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.n_.ClearNonDefaultToEmpty();
    }
    _impl_.e_ = 65537;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SimpleRsaPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes n = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_n();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 e = 2 [default = 65537];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_e(&has_bits);
          _impl_.e_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SimpleRsaPublicKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.SimpleRsaPublicKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes n = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_n();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional int32 e = 2 [default = 65537];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_e(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.SimpleRsaPublicKey)
  return target;
}

::size_t SimpleRsaPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.SimpleRsaPublicKey)
  ::size_t total_size = 0;

  // required bytes n = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_n());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 e = 2 [default = 65537];
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_e());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SimpleRsaPublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SimpleRsaPublicKey*>(
      &from));
}

void SimpleRsaPublicKey::MergeFrom(const SimpleRsaPublicKey& from) {
  SimpleRsaPublicKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.SimpleRsaPublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_n(from._internal_n());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.e_ = from._impl_.e_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SimpleRsaPublicKey::CopyFrom(const SimpleRsaPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.SimpleRsaPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimpleRsaPublicKey::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void SimpleRsaPublicKey::InternalSwap(SimpleRsaPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.n_, lhs_arena,
                                       &other->_impl_.n_, rhs_arena);

  swap(_impl_.e_, other->_impl_.e_);
}

std::string SimpleRsaPublicKey::GetTypeName() const {
  return "securemessage.SimpleRsaPublicKey";
}

// ===================================================================

class DhPublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<DhPublicKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DhPublicKey, _impl_._has_bits_);
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

DhPublicKey::DhPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.DhPublicKey)
}
DhPublicKey::DhPublicKey(const DhPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DhPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.y_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.y_.Set(from._internal_y(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:securemessage.DhPublicKey)
}

inline void DhPublicKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.y_) {}

  };
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DhPublicKey::~DhPublicKey() {
  // @@protoc_insertion_point(destructor:securemessage.DhPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DhPublicKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.y_.Destroy();
}

void DhPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DhPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.DhPublicKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.y_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DhPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required bytes y = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DhPublicKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.DhPublicKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required bytes y = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_y();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.DhPublicKey)
  return target;
}

::size_t DhPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.DhPublicKey)
  ::size_t total_size = 0;

  // required bytes y = 1;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_y());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DhPublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DhPublicKey*>(
      &from));
}

void DhPublicKey::MergeFrom(const DhPublicKey& from) {
  DhPublicKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.DhPublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_y(from._internal_y());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DhPublicKey::CopyFrom(const DhPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.DhPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DhPublicKey::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void DhPublicKey::InternalSwap(DhPublicKey* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.y_, lhs_arena,
                                       &other->_impl_.y_, rhs_arena);
}

std::string DhPublicKey::GetTypeName() const {
  return "securemessage.DhPublicKey";
}

// ===================================================================

class GenericPublicKey::_Internal {
 public:
  using HasBits = decltype(std::declval<GenericPublicKey>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GenericPublicKey, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::securemessage::EcP256PublicKey& ec_p256_public_key(const GenericPublicKey* msg);
  static void set_has_ec_p256_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::securemessage::SimpleRsaPublicKey& rsa2048_public_key(const GenericPublicKey* msg);
  static void set_has_rsa2048_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::securemessage::DhPublicKey& dh2048_public_key(const GenericPublicKey* msg);
  static void set_has_dh2048_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

const ::securemessage::EcP256PublicKey&
GenericPublicKey::_Internal::ec_p256_public_key(const GenericPublicKey* msg) {
  return *msg->_impl_.ec_p256_public_key_;
}
const ::securemessage::SimpleRsaPublicKey&
GenericPublicKey::_Internal::rsa2048_public_key(const GenericPublicKey* msg) {
  return *msg->_impl_.rsa2048_public_key_;
}
const ::securemessage::DhPublicKey&
GenericPublicKey::_Internal::dh2048_public_key(const GenericPublicKey* msg) {
  return *msg->_impl_.dh2048_public_key_;
}
GenericPublicKey::GenericPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securemessage.GenericPublicKey)
}
GenericPublicKey::GenericPublicKey(const GenericPublicKey& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  GenericPublicKey* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ec_p256_public_key_){nullptr}
    , decltype(_impl_.rsa2048_public_key_){nullptr}
    , decltype(_impl_.dh2048_public_key_){nullptr}
    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.ec_p256_public_key_ = new ::securemessage::EcP256PublicKey(*from._impl_.ec_p256_public_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.rsa2048_public_key_ = new ::securemessage::SimpleRsaPublicKey(*from._impl_.rsa2048_public_key_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.dh2048_public_key_ = new ::securemessage::DhPublicKey(*from._impl_.dh2048_public_key_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:securemessage.GenericPublicKey)
}

inline void GenericPublicKey::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.ec_p256_public_key_){nullptr}
    , decltype(_impl_.rsa2048_public_key_){nullptr}
    , decltype(_impl_.dh2048_public_key_){nullptr}
    , decltype(_impl_.type_) { 1 }

  };
}

GenericPublicKey::~GenericPublicKey() {
  // @@protoc_insertion_point(destructor:securemessage.GenericPublicKey)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GenericPublicKey::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.ec_p256_public_key_;
  if (this != internal_default_instance()) delete _impl_.rsa2048_public_key_;
  if (this != internal_default_instance()) delete _impl_.dh2048_public_key_;
}

void GenericPublicKey::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void GenericPublicKey::Clear() {
// @@protoc_insertion_point(message_clear_start:securemessage.GenericPublicKey)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ec_p256_public_key_ != nullptr);
      _impl_.ec_p256_public_key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.rsa2048_public_key_ != nullptr);
      _impl_.rsa2048_public_key_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dh2048_public_key_ != nullptr);
      _impl_.dh2048_public_key_->Clear();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* GenericPublicKey::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .securemessage.PublicKeyType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securemessage::PublicKeyType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::securemessage::PublicKeyType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ec_p256_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rsa2048_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .securemessage.DhPublicKey dh2048_public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_dh2048_public_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* GenericPublicKey::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securemessage.GenericPublicKey)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .securemessage.PublicKeyType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ec_p256_public_key(this),
        _Internal::ec_p256_public_key(this).GetCachedSize(), target, stream);
  }

  // optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::rsa2048_public_key(this),
        _Internal::rsa2048_public_key(this).GetCachedSize(), target, stream);
  }

  // optional .securemessage.DhPublicKey dh2048_public_key = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::dh2048_public_key(this),
        _Internal::dh2048_public_key(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securemessage.GenericPublicKey)
  return target;
}

::size_t GenericPublicKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securemessage.GenericPublicKey)
  ::size_t total_size = 0;

  // required .securemessage.PublicKeyType type = 1;
  if ((_impl_._has_bits_[0] & 0x00000008u) != 0) {
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ec_p256_public_key_);
    }

    // optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.rsa2048_public_key_);
    }

    // optional .securemessage.DhPublicKey dh2048_public_key = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.dh2048_public_key_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericPublicKey::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const GenericPublicKey*>(
      &from));
}

void GenericPublicKey::MergeFrom(const GenericPublicKey& from) {
  GenericPublicKey* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securemessage.GenericPublicKey)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_ec_p256_public_key()->::securemessage::EcP256PublicKey::MergeFrom(
          from._internal_ec_p256_public_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_rsa2048_public_key()->::securemessage::SimpleRsaPublicKey::MergeFrom(
          from._internal_rsa2048_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_dh2048_public_key()->::securemessage::DhPublicKey::MergeFrom(
          from._internal_dh2048_public_key());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void GenericPublicKey::CopyFrom(const GenericPublicKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securemessage.GenericPublicKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericPublicKey::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.ec_p256_public_key_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    if (!_impl_.rsa2048_public_key_->IsInitialized()) return false;
  }
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.dh2048_public_key_->IsInitialized()) return false;
  }
  return true;
}

void GenericPublicKey::InternalSwap(GenericPublicKey* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GenericPublicKey, _impl_.type_)
      + sizeof(GenericPublicKey::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GenericPublicKey, _impl_.ec_p256_public_key_)>(
          reinterpret_cast<char*>(&_impl_.ec_p256_public_key_),
          reinterpret_cast<char*>(&other->_impl_.ec_p256_public_key_));
}

std::string GenericPublicKey::GetTypeName() const {
  return "securemessage.GenericPublicKey";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace securemessage
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::securemessage::SecureMessage*
Arena::CreateMaybeMessage< ::securemessage::SecureMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::SecureMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::Header*
Arena::CreateMaybeMessage< ::securemessage::Header >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::Header >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::HeaderAndBody*
Arena::CreateMaybeMessage< ::securemessage::HeaderAndBody >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::HeaderAndBody >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::HeaderAndBodyInternal*
Arena::CreateMaybeMessage< ::securemessage::HeaderAndBodyInternal >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::HeaderAndBodyInternal >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::EcP256PublicKey*
Arena::CreateMaybeMessage< ::securemessage::EcP256PublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::EcP256PublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::SimpleRsaPublicKey*
Arena::CreateMaybeMessage< ::securemessage::SimpleRsaPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::SimpleRsaPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::DhPublicKey*
Arena::CreateMaybeMessage< ::securemessage::DhPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::DhPublicKey >(arena);
}
template<> PROTOBUF_NOINLINE ::securemessage::GenericPublicKey*
Arena::CreateMaybeMessage< ::securemessage::GenericPublicKey >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securemessage::GenericPublicKey >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
