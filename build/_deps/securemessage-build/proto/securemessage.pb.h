// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: securemessage.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_securemessage_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_securemessage_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_securemessage_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_securemessage_2eproto {
  static const ::uint32_t offsets[];
};
namespace securemessage {
class DhPublicKey;
struct DhPublicKeyDefaultTypeInternal;
extern DhPublicKeyDefaultTypeInternal _DhPublicKey_default_instance_;
class EcP256PublicKey;
struct EcP256PublicKeyDefaultTypeInternal;
extern EcP256PublicKeyDefaultTypeInternal _EcP256PublicKey_default_instance_;
class GenericPublicKey;
struct GenericPublicKeyDefaultTypeInternal;
extern GenericPublicKeyDefaultTypeInternal _GenericPublicKey_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class HeaderAndBody;
struct HeaderAndBodyDefaultTypeInternal;
extern HeaderAndBodyDefaultTypeInternal _HeaderAndBody_default_instance_;
class HeaderAndBodyInternal;
struct HeaderAndBodyInternalDefaultTypeInternal;
extern HeaderAndBodyInternalDefaultTypeInternal _HeaderAndBodyInternal_default_instance_;
class SecureMessage;
struct SecureMessageDefaultTypeInternal;
extern SecureMessageDefaultTypeInternal _SecureMessage_default_instance_;
class SimpleRsaPublicKey;
struct SimpleRsaPublicKeyDefaultTypeInternal;
extern SimpleRsaPublicKeyDefaultTypeInternal _SimpleRsaPublicKey_default_instance_;
}  // namespace securemessage
PROTOBUF_NAMESPACE_OPEN
template <>
::securemessage::DhPublicKey* Arena::CreateMaybeMessage<::securemessage::DhPublicKey>(Arena*);
template <>
::securemessage::EcP256PublicKey* Arena::CreateMaybeMessage<::securemessage::EcP256PublicKey>(Arena*);
template <>
::securemessage::GenericPublicKey* Arena::CreateMaybeMessage<::securemessage::GenericPublicKey>(Arena*);
template <>
::securemessage::Header* Arena::CreateMaybeMessage<::securemessage::Header>(Arena*);
template <>
::securemessage::HeaderAndBody* Arena::CreateMaybeMessage<::securemessage::HeaderAndBody>(Arena*);
template <>
::securemessage::HeaderAndBodyInternal* Arena::CreateMaybeMessage<::securemessage::HeaderAndBodyInternal>(Arena*);
template <>
::securemessage::SecureMessage* Arena::CreateMaybeMessage<::securemessage::SecureMessage>(Arena*);
template <>
::securemessage::SimpleRsaPublicKey* Arena::CreateMaybeMessage<::securemessage::SimpleRsaPublicKey>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace securemessage {
enum SigScheme : int {
  HMAC_SHA256 = 1,
  ECDSA_P256_SHA256 = 2,
  RSA2048_SHA256 = 3,
};

bool SigScheme_IsValid(int value);
constexpr SigScheme SigScheme_MIN = static_cast<SigScheme>(1);
constexpr SigScheme SigScheme_MAX = static_cast<SigScheme>(3);
constexpr int SigScheme_ARRAYSIZE = 3 + 1;
const std::string& SigScheme_Name(SigScheme value);
template <typename T>
const std::string& SigScheme_Name(T value) {
  static_assert(std::is_same<T, SigScheme>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SigScheme_Name().");
  return SigScheme_Name(static_cast<SigScheme>(value));
}
const std::string& SigScheme_Name(SigScheme value);
bool SigScheme_Parse(absl::string_view name, SigScheme* value);
enum EncScheme : int {
  NONE = 1,
  AES_256_CBC = 2,
};

bool EncScheme_IsValid(int value);
constexpr EncScheme EncScheme_MIN = static_cast<EncScheme>(1);
constexpr EncScheme EncScheme_MAX = static_cast<EncScheme>(2);
constexpr int EncScheme_ARRAYSIZE = 2 + 1;
const std::string& EncScheme_Name(EncScheme value);
template <typename T>
const std::string& EncScheme_Name(T value) {
  static_assert(std::is_same<T, EncScheme>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to EncScheme_Name().");
  return EncScheme_Name(static_cast<EncScheme>(value));
}
const std::string& EncScheme_Name(EncScheme value);
bool EncScheme_Parse(absl::string_view name, EncScheme* value);
enum PublicKeyType : int {
  EC_P256 = 1,
  RSA2048 = 2,
  DH2048_MODP = 3,
};

bool PublicKeyType_IsValid(int value);
constexpr PublicKeyType PublicKeyType_MIN = static_cast<PublicKeyType>(1);
constexpr PublicKeyType PublicKeyType_MAX = static_cast<PublicKeyType>(3);
constexpr int PublicKeyType_ARRAYSIZE = 3 + 1;
const std::string& PublicKeyType_Name(PublicKeyType value);
template <typename T>
const std::string& PublicKeyType_Name(T value) {
  static_assert(std::is_same<T, PublicKeyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to PublicKeyType_Name().");
  return PublicKeyType_Name(static_cast<PublicKeyType>(value));
}
const std::string& PublicKeyType_Name(PublicKeyType value);
bool PublicKeyType_Parse(absl::string_view name, PublicKeyType* value);

// ===================================================================


// -------------------------------------------------------------------

class SecureMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.SecureMessage) */ {
 public:
  inline SecureMessage() : SecureMessage(nullptr) {}
  ~SecureMessage() override;
  explicit PROTOBUF_CONSTEXPR SecureMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SecureMessage(const SecureMessage& from);
  SecureMessage(SecureMessage&& from) noexcept
    : SecureMessage() {
    *this = ::std::move(from);
  }

  inline SecureMessage& operator=(const SecureMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SecureMessage& operator=(SecureMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SecureMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SecureMessage* internal_default_instance() {
    return reinterpret_cast<const SecureMessage*>(
               &_SecureMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SecureMessage& a, SecureMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SecureMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SecureMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SecureMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SecureMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SecureMessage& from);
  void MergeFrom(const SecureMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SecureMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.SecureMessage";
  }
  protected:
  explicit SecureMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderAndBodyFieldNumber = 1,
    kSignatureFieldNumber = 2,
  };
  // required bytes header_and_body = 1;
  bool has_header_and_body() const;
  void clear_header_and_body() ;
  const std::string& header_and_body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header_and_body(Arg_&& arg, Args_... args);
  std::string* mutable_header_and_body();
  PROTOBUF_NODISCARD std::string* release_header_and_body();
  void set_allocated_header_and_body(std::string* ptr);

  private:
  const std::string& _internal_header_and_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header_and_body(
      const std::string& value);
  std::string* _internal_mutable_header_and_body();

  public:
  // required bytes signature = 2;
  bool has_signature() const;
  void clear_signature() ;
  const std::string& signature() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signature(Arg_&& arg, Args_... args);
  std::string* mutable_signature();
  PROTOBUF_NODISCARD std::string* release_signature();
  void set_allocated_signature(std::string* ptr);

  private:
  const std::string& _internal_signature() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signature(
      const std::string& value);
  std::string* _internal_mutable_signature();

  public:
  // @@protoc_insertion_point(class_scope:securemessage.SecureMessage)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_and_body_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit PROTOBUF_CONSTEXPR Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Header& from);
  void MergeFrom(const Header& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerificationKeyIdFieldNumber = 3,
    kDecryptionKeyIdFieldNumber = 4,
    kIvFieldNumber = 5,
    kPublicMetadataFieldNumber = 6,
    kAssociatedDataLengthFieldNumber = 7,
    kSignatureSchemeFieldNumber = 1,
    kEncryptionSchemeFieldNumber = 2,
  };
  // optional bytes verification_key_id = 3;
  bool has_verification_key_id() const;
  void clear_verification_key_id() ;
  const std::string& verification_key_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_verification_key_id(Arg_&& arg, Args_... args);
  std::string* mutable_verification_key_id();
  PROTOBUF_NODISCARD std::string* release_verification_key_id();
  void set_allocated_verification_key_id(std::string* ptr);

  private:
  const std::string& _internal_verification_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_verification_key_id(
      const std::string& value);
  std::string* _internal_mutable_verification_key_id();

  public:
  // optional bytes decryption_key_id = 4;
  bool has_decryption_key_id() const;
  void clear_decryption_key_id() ;
  const std::string& decryption_key_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_decryption_key_id(Arg_&& arg, Args_... args);
  std::string* mutable_decryption_key_id();
  PROTOBUF_NODISCARD std::string* release_decryption_key_id();
  void set_allocated_decryption_key_id(std::string* ptr);

  private:
  const std::string& _internal_decryption_key_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decryption_key_id(
      const std::string& value);
  std::string* _internal_mutable_decryption_key_id();

  public:
  // optional bytes iv = 5;
  bool has_iv() const;
  void clear_iv() ;
  const std::string& iv() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_iv(Arg_&& arg, Args_... args);
  std::string* mutable_iv();
  PROTOBUF_NODISCARD std::string* release_iv();
  void set_allocated_iv(std::string* ptr);

  private:
  const std::string& _internal_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_iv(
      const std::string& value);
  std::string* _internal_mutable_iv();

  public:
  // optional bytes public_metadata = 6;
  bool has_public_metadata() const;
  void clear_public_metadata() ;
  const std::string& public_metadata() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_metadata(Arg_&& arg, Args_... args);
  std::string* mutable_public_metadata();
  PROTOBUF_NODISCARD std::string* release_public_metadata();
  void set_allocated_public_metadata(std::string* ptr);

  private:
  const std::string& _internal_public_metadata() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_metadata(
      const std::string& value);
  std::string* _internal_mutable_public_metadata();

  public:
  // optional uint32 associated_data_length = 7 [default = 0];
  bool has_associated_data_length() const;
  void clear_associated_data_length() ;
  ::uint32_t associated_data_length() const;
  void set_associated_data_length(::uint32_t value);

  private:
  ::uint32_t _internal_associated_data_length() const;
  void _internal_set_associated_data_length(::uint32_t value);

  public:
  // required .securemessage.SigScheme signature_scheme = 1;
  bool has_signature_scheme() const;
  void clear_signature_scheme() ;
  ::securemessage::SigScheme signature_scheme() const;
  void set_signature_scheme(::securemessage::SigScheme value);

  private:
  ::securemessage::SigScheme _internal_signature_scheme() const;
  void _internal_set_signature_scheme(::securemessage::SigScheme value);

  public:
  // required .securemessage.EncScheme encryption_scheme = 2;
  bool has_encryption_scheme() const;
  void clear_encryption_scheme() ;
  ::securemessage::EncScheme encryption_scheme() const;
  void set_encryption_scheme(::securemessage::EncScheme value);

  private:
  ::securemessage::EncScheme _internal_encryption_scheme() const;
  void _internal_set_encryption_scheme(::securemessage::EncScheme value);

  public:
  // @@protoc_insertion_point(class_scope:securemessage.Header)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr verification_key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decryption_key_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr iv_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_metadata_;
    ::uint32_t associated_data_length_;
    int signature_scheme_;
    int encryption_scheme_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class HeaderAndBody final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.HeaderAndBody) */ {
 public:
  inline HeaderAndBody() : HeaderAndBody(nullptr) {}
  ~HeaderAndBody() override;
  explicit PROTOBUF_CONSTEXPR HeaderAndBody(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderAndBody(const HeaderAndBody& from);
  HeaderAndBody(HeaderAndBody&& from) noexcept
    : HeaderAndBody() {
    *this = ::std::move(from);
  }

  inline HeaderAndBody& operator=(const HeaderAndBody& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderAndBody& operator=(HeaderAndBody&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeaderAndBody& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderAndBody* internal_default_instance() {
    return reinterpret_cast<const HeaderAndBody*>(
               &_HeaderAndBody_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeaderAndBody& a, HeaderAndBody& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderAndBody* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderAndBody* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderAndBody* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeaderAndBody>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeaderAndBody& from);
  void MergeFrom(const HeaderAndBody& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeaderAndBody* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.HeaderAndBody";
  }
  protected:
  explicit HeaderAndBody(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBodyFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // required bytes body = 2;
  bool has_body() const;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // required .securemessage.Header header = 1;
  bool has_header() const;
  void clear_header() ;
  const ::securemessage::Header& header() const;
  PROTOBUF_NODISCARD ::securemessage::Header* release_header();
  ::securemessage::Header* mutable_header();
  void set_allocated_header(::securemessage::Header* header);
  private:
  const ::securemessage::Header& _internal_header() const;
  ::securemessage::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::securemessage::Header* header);
  ::securemessage::Header* unsafe_arena_release_header();
  // @@protoc_insertion_point(class_scope:securemessage.HeaderAndBody)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
    ::securemessage::Header* header_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class HeaderAndBodyInternal final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.HeaderAndBodyInternal) */ {
 public:
  inline HeaderAndBodyInternal() : HeaderAndBodyInternal(nullptr) {}
  ~HeaderAndBodyInternal() override;
  explicit PROTOBUF_CONSTEXPR HeaderAndBodyInternal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeaderAndBodyInternal(const HeaderAndBodyInternal& from);
  HeaderAndBodyInternal(HeaderAndBodyInternal&& from) noexcept
    : HeaderAndBodyInternal() {
    *this = ::std::move(from);
  }

  inline HeaderAndBodyInternal& operator=(const HeaderAndBodyInternal& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeaderAndBodyInternal& operator=(HeaderAndBodyInternal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const HeaderAndBodyInternal& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeaderAndBodyInternal* internal_default_instance() {
    return reinterpret_cast<const HeaderAndBodyInternal*>(
               &_HeaderAndBodyInternal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeaderAndBodyInternal& a, HeaderAndBodyInternal& b) {
    a.Swap(&b);
  }
  inline void Swap(HeaderAndBodyInternal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeaderAndBodyInternal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeaderAndBodyInternal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeaderAndBodyInternal>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const HeaderAndBodyInternal& from);
  void MergeFrom(const HeaderAndBodyInternal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HeaderAndBodyInternal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.HeaderAndBodyInternal";
  }
  protected:
  explicit HeaderAndBodyInternal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kBodyFieldNumber = 2,
  };
  // required bytes header = 1;
  bool has_header() const;
  void clear_header() ;
  const std::string& header() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_header(Arg_&& arg, Args_... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* ptr);

  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(
      const std::string& value);
  std::string* _internal_mutable_header();

  public:
  // required bytes body = 2;
  bool has_body() const;
  void clear_body() ;
  const std::string& body() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_body(Arg_&& arg, Args_... args);
  std::string* mutable_body();
  PROTOBUF_NODISCARD std::string* release_body();
  void set_allocated_body(std::string* ptr);

  private:
  const std::string& _internal_body() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_body(
      const std::string& value);
  std::string* _internal_mutable_body();

  public:
  // @@protoc_insertion_point(class_scope:securemessage.HeaderAndBodyInternal)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr body_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class EcP256PublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.EcP256PublicKey) */ {
 public:
  inline EcP256PublicKey() : EcP256PublicKey(nullptr) {}
  ~EcP256PublicKey() override;
  explicit PROTOBUF_CONSTEXPR EcP256PublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EcP256PublicKey(const EcP256PublicKey& from);
  EcP256PublicKey(EcP256PublicKey&& from) noexcept
    : EcP256PublicKey() {
    *this = ::std::move(from);
  }

  inline EcP256PublicKey& operator=(const EcP256PublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcP256PublicKey& operator=(EcP256PublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EcP256PublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcP256PublicKey* internal_default_instance() {
    return reinterpret_cast<const EcP256PublicKey*>(
               &_EcP256PublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(EcP256PublicKey& a, EcP256PublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(EcP256PublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcP256PublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcP256PublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcP256PublicKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EcP256PublicKey& from);
  void MergeFrom(const EcP256PublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EcP256PublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.EcP256PublicKey";
  }
  protected:
  explicit EcP256PublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required bytes x = 1;
  bool has_x() const;
  void clear_x() ;
  const std::string& x() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_x(Arg_&& arg, Args_... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* ptr);

  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(
      const std::string& value);
  std::string* _internal_mutable_x();

  public:
  // required bytes y = 2;
  bool has_y() const;
  void clear_y() ;
  const std::string& y() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_y(Arg_&& arg, Args_... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* ptr);

  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(
      const std::string& value);
  std::string* _internal_mutable_y();

  public:
  // @@protoc_insertion_point(class_scope:securemessage.EcP256PublicKey)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class SimpleRsaPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.SimpleRsaPublicKey) */ {
 public:
  inline SimpleRsaPublicKey() : SimpleRsaPublicKey(nullptr) {}
  ~SimpleRsaPublicKey() override;
  explicit PROTOBUF_CONSTEXPR SimpleRsaPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SimpleRsaPublicKey(const SimpleRsaPublicKey& from);
  SimpleRsaPublicKey(SimpleRsaPublicKey&& from) noexcept
    : SimpleRsaPublicKey() {
    *this = ::std::move(from);
  }

  inline SimpleRsaPublicKey& operator=(const SimpleRsaPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline SimpleRsaPublicKey& operator=(SimpleRsaPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SimpleRsaPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const SimpleRsaPublicKey* internal_default_instance() {
    return reinterpret_cast<const SimpleRsaPublicKey*>(
               &_SimpleRsaPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SimpleRsaPublicKey& a, SimpleRsaPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(SimpleRsaPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SimpleRsaPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SimpleRsaPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SimpleRsaPublicKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SimpleRsaPublicKey& from);
  void MergeFrom(const SimpleRsaPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SimpleRsaPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.SimpleRsaPublicKey";
  }
  protected:
  explicit SimpleRsaPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNFieldNumber = 1,
    kEFieldNumber = 2,
  };
  // required bytes n = 1;
  bool has_n() const;
  void clear_n() ;
  const std::string& n() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_n(Arg_&& arg, Args_... args);
  std::string* mutable_n();
  PROTOBUF_NODISCARD std::string* release_n();
  void set_allocated_n(std::string* ptr);

  private:
  const std::string& _internal_n() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_n(
      const std::string& value);
  std::string* _internal_mutable_n();

  public:
  // optional int32 e = 2 [default = 65537];
  bool has_e() const;
  void clear_e() ;
  ::int32_t e() const;
  void set_e(::int32_t value);

  private:
  ::int32_t _internal_e() const;
  void _internal_set_e(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securemessage.SimpleRsaPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr n_;
    ::int32_t e_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class DhPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.DhPublicKey) */ {
 public:
  inline DhPublicKey() : DhPublicKey(nullptr) {}
  ~DhPublicKey() override;
  explicit PROTOBUF_CONSTEXPR DhPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DhPublicKey(const DhPublicKey& from);
  DhPublicKey(DhPublicKey&& from) noexcept
    : DhPublicKey() {
    *this = ::std::move(from);
  }

  inline DhPublicKey& operator=(const DhPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline DhPublicKey& operator=(DhPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DhPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const DhPublicKey* internal_default_instance() {
    return reinterpret_cast<const DhPublicKey*>(
               &_DhPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DhPublicKey& a, DhPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(DhPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DhPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DhPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DhPublicKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DhPublicKey& from);
  void MergeFrom(const DhPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DhPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.DhPublicKey";
  }
  protected:
  explicit DhPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYFieldNumber = 1,
  };
  // required bytes y = 1;
  bool has_y() const;
  void clear_y() ;
  const std::string& y() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_y(Arg_&& arg, Args_... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* ptr);

  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(
      const std::string& value);
  std::string* _internal_mutable_y();

  public:
  // @@protoc_insertion_point(class_scope:securemessage.DhPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};// -------------------------------------------------------------------

class GenericPublicKey final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securemessage.GenericPublicKey) */ {
 public:
  inline GenericPublicKey() : GenericPublicKey(nullptr) {}
  ~GenericPublicKey() override;
  explicit PROTOBUF_CONSTEXPR GenericPublicKey(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GenericPublicKey(const GenericPublicKey& from);
  GenericPublicKey(GenericPublicKey&& from) noexcept
    : GenericPublicKey() {
    *this = ::std::move(from);
  }

  inline GenericPublicKey& operator=(const GenericPublicKey& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericPublicKey& operator=(GenericPublicKey&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GenericPublicKey& default_instance() {
    return *internal_default_instance();
  }
  static inline const GenericPublicKey* internal_default_instance() {
    return reinterpret_cast<const GenericPublicKey*>(
               &_GenericPublicKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GenericPublicKey& a, GenericPublicKey& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericPublicKey* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenericPublicKey* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GenericPublicKey* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GenericPublicKey>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GenericPublicKey& from);
  void MergeFrom(const GenericPublicKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GenericPublicKey* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securemessage.GenericPublicKey";
  }
  protected:
  explicit GenericPublicKey(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcP256PublicKeyFieldNumber = 2,
    kRsa2048PublicKeyFieldNumber = 3,
    kDh2048PublicKeyFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;
  bool has_ec_p256_public_key() const;
  void clear_ec_p256_public_key() ;
  const ::securemessage::EcP256PublicKey& ec_p256_public_key() const;
  PROTOBUF_NODISCARD ::securemessage::EcP256PublicKey* release_ec_p256_public_key();
  ::securemessage::EcP256PublicKey* mutable_ec_p256_public_key();
  void set_allocated_ec_p256_public_key(::securemessage::EcP256PublicKey* ec_p256_public_key);
  private:
  const ::securemessage::EcP256PublicKey& _internal_ec_p256_public_key() const;
  ::securemessage::EcP256PublicKey* _internal_mutable_ec_p256_public_key();
  public:
  void unsafe_arena_set_allocated_ec_p256_public_key(
      ::securemessage::EcP256PublicKey* ec_p256_public_key);
  ::securemessage::EcP256PublicKey* unsafe_arena_release_ec_p256_public_key();
  // optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;
  bool has_rsa2048_public_key() const;
  void clear_rsa2048_public_key() ;
  const ::securemessage::SimpleRsaPublicKey& rsa2048_public_key() const;
  PROTOBUF_NODISCARD ::securemessage::SimpleRsaPublicKey* release_rsa2048_public_key();
  ::securemessage::SimpleRsaPublicKey* mutable_rsa2048_public_key();
  void set_allocated_rsa2048_public_key(::securemessage::SimpleRsaPublicKey* rsa2048_public_key);
  private:
  const ::securemessage::SimpleRsaPublicKey& _internal_rsa2048_public_key() const;
  ::securemessage::SimpleRsaPublicKey* _internal_mutable_rsa2048_public_key();
  public:
  void unsafe_arena_set_allocated_rsa2048_public_key(
      ::securemessage::SimpleRsaPublicKey* rsa2048_public_key);
  ::securemessage::SimpleRsaPublicKey* unsafe_arena_release_rsa2048_public_key();
  // optional .securemessage.DhPublicKey dh2048_public_key = 4;
  bool has_dh2048_public_key() const;
  void clear_dh2048_public_key() ;
  const ::securemessage::DhPublicKey& dh2048_public_key() const;
  PROTOBUF_NODISCARD ::securemessage::DhPublicKey* release_dh2048_public_key();
  ::securemessage::DhPublicKey* mutable_dh2048_public_key();
  void set_allocated_dh2048_public_key(::securemessage::DhPublicKey* dh2048_public_key);
  private:
  const ::securemessage::DhPublicKey& _internal_dh2048_public_key() const;
  ::securemessage::DhPublicKey* _internal_mutable_dh2048_public_key();
  public:
  void unsafe_arena_set_allocated_dh2048_public_key(
      ::securemessage::DhPublicKey* dh2048_public_key);
  ::securemessage::DhPublicKey* unsafe_arena_release_dh2048_public_key();
  // required .securemessage.PublicKeyType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::securemessage::PublicKeyType type() const;
  void set_type(::securemessage::PublicKeyType value);

  private:
  ::securemessage::PublicKeyType _internal_type() const;
  void _internal_set_type(::securemessage::PublicKeyType value);

  public:
  // @@protoc_insertion_point(class_scope:securemessage.GenericPublicKey)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::securemessage::EcP256PublicKey* ec_p256_public_key_;
    ::securemessage::SimpleRsaPublicKey* rsa2048_public_key_;
    ::securemessage::DhPublicKey* dh2048_public_key_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securemessage_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SecureMessage

// required bytes header_and_body = 1;
inline bool SecureMessage::has_header_and_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SecureMessage::clear_header_and_body() {
  _impl_.header_and_body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SecureMessage::header_and_body() const {
  // @@protoc_insertion_point(field_get:securemessage.SecureMessage.header_and_body)
  return _internal_header_and_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecureMessage::set_header_and_body(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_and_body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.SecureMessage.header_and_body)
}
inline std::string* SecureMessage::mutable_header_and_body() {
  std::string* _s = _internal_mutable_header_and_body();
  // @@protoc_insertion_point(field_mutable:securemessage.SecureMessage.header_and_body)
  return _s;
}
inline const std::string& SecureMessage::_internal_header_and_body() const {
  return _impl_.header_and_body_.Get();
}
inline void SecureMessage::_internal_set_header_and_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.header_and_body_.Set(value, GetArenaForAllocation());
}
inline std::string* SecureMessage::_internal_mutable_header_and_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.header_and_body_.Mutable( GetArenaForAllocation());
}
inline std::string* SecureMessage::release_header_and_body() {
  // @@protoc_insertion_point(field_release:securemessage.SecureMessage.header_and_body)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.header_and_body_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.header_and_body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SecureMessage::set_allocated_header_and_body(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_and_body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_and_body_.IsDefault()) {
          _impl_.header_and_body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.SecureMessage.header_and_body)
}

// required bytes signature = 2;
inline bool SecureMessage::has_signature() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SecureMessage::clear_signature() {
  _impl_.signature_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SecureMessage::signature() const {
  // @@protoc_insertion_point(field_get:securemessage.SecureMessage.signature)
  return _internal_signature();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SecureMessage::set_signature(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.signature_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.SecureMessage.signature)
}
inline std::string* SecureMessage::mutable_signature() {
  std::string* _s = _internal_mutable_signature();
  // @@protoc_insertion_point(field_mutable:securemessage.SecureMessage.signature)
  return _s;
}
inline const std::string& SecureMessage::_internal_signature() const {
  return _impl_.signature_.Get();
}
inline void SecureMessage::_internal_set_signature(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.signature_.Set(value, GetArenaForAllocation());
}
inline std::string* SecureMessage::_internal_mutable_signature() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.signature_.Mutable( GetArenaForAllocation());
}
inline std::string* SecureMessage::release_signature() {
  // @@protoc_insertion_point(field_release:securemessage.SecureMessage.signature)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.signature_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.signature_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SecureMessage::set_allocated_signature(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.signature_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.signature_.IsDefault()) {
          _impl_.signature_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.SecureMessage.signature)
}

// -------------------------------------------------------------------

// Header

// required .securemessage.SigScheme signature_scheme = 1;
inline bool Header::has_signature_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void Header::clear_signature_scheme() {
  _impl_.signature_scheme_ = 1;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::securemessage::SigScheme Header::signature_scheme() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.signature_scheme)
  return _internal_signature_scheme();
}
inline void Header::set_signature_scheme(::securemessage::SigScheme value) {
   _internal_set_signature_scheme(value);
  // @@protoc_insertion_point(field_set:securemessage.Header.signature_scheme)
}
inline ::securemessage::SigScheme Header::_internal_signature_scheme() const {
  return static_cast<::securemessage::SigScheme>(_impl_.signature_scheme_);
}
inline void Header::_internal_set_signature_scheme(::securemessage::SigScheme value) {
  assert(::securemessage::SigScheme_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.signature_scheme_ = value;
}

// required .securemessage.EncScheme encryption_scheme = 2;
inline bool Header::has_encryption_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void Header::clear_encryption_scheme() {
  _impl_.encryption_scheme_ = 1;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::securemessage::EncScheme Header::encryption_scheme() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.encryption_scheme)
  return _internal_encryption_scheme();
}
inline void Header::set_encryption_scheme(::securemessage::EncScheme value) {
   _internal_set_encryption_scheme(value);
  // @@protoc_insertion_point(field_set:securemessage.Header.encryption_scheme)
}
inline ::securemessage::EncScheme Header::_internal_encryption_scheme() const {
  return static_cast<::securemessage::EncScheme>(_impl_.encryption_scheme_);
}
inline void Header::_internal_set_encryption_scheme(::securemessage::EncScheme value) {
  assert(::securemessage::EncScheme_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.encryption_scheme_ = value;
}

// optional bytes verification_key_id = 3;
inline bool Header::has_verification_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Header::clear_verification_key_id() {
  _impl_.verification_key_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Header::verification_key_id() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.verification_key_id)
  return _internal_verification_key_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_verification_key_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.verification_key_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.Header.verification_key_id)
}
inline std::string* Header::mutable_verification_key_id() {
  std::string* _s = _internal_mutable_verification_key_id();
  // @@protoc_insertion_point(field_mutable:securemessage.Header.verification_key_id)
  return _s;
}
inline const std::string& Header::_internal_verification_key_id() const {
  return _impl_.verification_key_id_.Get();
}
inline void Header::_internal_set_verification_key_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.verification_key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_verification_key_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.verification_key_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_verification_key_id() {
  // @@protoc_insertion_point(field_release:securemessage.Header.verification_key_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.verification_key_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.verification_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_verification_key_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.verification_key_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.verification_key_id_.IsDefault()) {
          _impl_.verification_key_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.Header.verification_key_id)
}

// optional bytes decryption_key_id = 4;
inline bool Header::has_decryption_key_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Header::clear_decryption_key_id() {
  _impl_.decryption_key_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Header::decryption_key_id() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.decryption_key_id)
  return _internal_decryption_key_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_decryption_key_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.decryption_key_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.Header.decryption_key_id)
}
inline std::string* Header::mutable_decryption_key_id() {
  std::string* _s = _internal_mutable_decryption_key_id();
  // @@protoc_insertion_point(field_mutable:securemessage.Header.decryption_key_id)
  return _s;
}
inline const std::string& Header::_internal_decryption_key_id() const {
  return _impl_.decryption_key_id_.Get();
}
inline void Header::_internal_set_decryption_key_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.decryption_key_id_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_decryption_key_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.decryption_key_id_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_decryption_key_id() {
  // @@protoc_insertion_point(field_release:securemessage.Header.decryption_key_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.decryption_key_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.decryption_key_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_decryption_key_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.decryption_key_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.decryption_key_id_.IsDefault()) {
          _impl_.decryption_key_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.Header.decryption_key_id)
}

// optional bytes iv = 5;
inline bool Header::has_iv() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void Header::clear_iv() {
  _impl_.iv_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& Header::iv() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.iv)
  return _internal_iv();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_iv(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.iv_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.Header.iv)
}
inline std::string* Header::mutable_iv() {
  std::string* _s = _internal_mutable_iv();
  // @@protoc_insertion_point(field_mutable:securemessage.Header.iv)
  return _s;
}
inline const std::string& Header::_internal_iv() const {
  return _impl_.iv_.Get();
}
inline void Header::_internal_set_iv(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.iv_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_iv() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.iv_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_iv() {
  // @@protoc_insertion_point(field_release:securemessage.Header.iv)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.iv_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.iv_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_iv(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.iv_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.iv_.IsDefault()) {
          _impl_.iv_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.Header.iv)
}

// optional bytes public_metadata = 6;
inline bool Header::has_public_metadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void Header::clear_public_metadata() {
  _impl_.public_metadata_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& Header::public_metadata() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.public_metadata)
  return _internal_public_metadata();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Header::set_public_metadata(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.public_metadata_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.Header.public_metadata)
}
inline std::string* Header::mutable_public_metadata() {
  std::string* _s = _internal_mutable_public_metadata();
  // @@protoc_insertion_point(field_mutable:securemessage.Header.public_metadata)
  return _s;
}
inline const std::string& Header::_internal_public_metadata() const {
  return _impl_.public_metadata_.Get();
}
inline void Header::_internal_set_public_metadata(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.public_metadata_.Set(value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_public_metadata() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.public_metadata_.Mutable( GetArenaForAllocation());
}
inline std::string* Header::release_public_metadata() {
  // @@protoc_insertion_point(field_release:securemessage.Header.public_metadata)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.public_metadata_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_metadata_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void Header::set_allocated_public_metadata(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.public_metadata_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_metadata_.IsDefault()) {
          _impl_.public_metadata_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.Header.public_metadata)
}

// optional uint32 associated_data_length = 7 [default = 0];
inline bool Header::has_associated_data_length() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void Header::clear_associated_data_length() {
  _impl_.associated_data_length_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t Header::associated_data_length() const {
  // @@protoc_insertion_point(field_get:securemessage.Header.associated_data_length)
  return _internal_associated_data_length();
}
inline void Header::set_associated_data_length(::uint32_t value) {
  _internal_set_associated_data_length(value);
  // @@protoc_insertion_point(field_set:securemessage.Header.associated_data_length)
}
inline ::uint32_t Header::_internal_associated_data_length() const {
  return _impl_.associated_data_length_;
}
inline void Header::_internal_set_associated_data_length(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.associated_data_length_ = value;
}

// -------------------------------------------------------------------

// HeaderAndBody

// required .securemessage.Header header = 1;
inline bool HeaderAndBody::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.header_ != nullptr);
  return value;
}
inline void HeaderAndBody::clear_header() {
  if (_impl_.header_ != nullptr) _impl_.header_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::securemessage::Header& HeaderAndBody::_internal_header() const {
  const ::securemessage::Header* p = _impl_.header_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::Header&>(
      ::securemessage::_Header_default_instance_);
}
inline const ::securemessage::Header& HeaderAndBody::header() const {
  // @@protoc_insertion_point(field_get:securemessage.HeaderAndBody.header)
  return _internal_header();
}
inline void HeaderAndBody::unsafe_arena_set_allocated_header(
    ::securemessage::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.header_);
  }
  _impl_.header_ = header;
  if (header) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securemessage.HeaderAndBody.header)
}
inline ::securemessage::Header* HeaderAndBody::release_header() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::securemessage::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::Header* HeaderAndBody::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:securemessage.HeaderAndBody.header)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::securemessage::Header* temp = _impl_.header_;
  _impl_.header_ = nullptr;
  return temp;
}
inline ::securemessage::Header* HeaderAndBody::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.header_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::Header>(GetArenaForAllocation());
    _impl_.header_ = p;
  }
  return _impl_.header_;
}
inline ::securemessage::Header* HeaderAndBody::mutable_header() {
  ::securemessage::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:securemessage.HeaderAndBody.header)
  return _msg;
}
inline void HeaderAndBody::set_allocated_header(::securemessage::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.header_ = header;
  // @@protoc_insertion_point(field_set_allocated:securemessage.HeaderAndBody.header)
}

// required bytes body = 2;
inline bool HeaderAndBody::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HeaderAndBody::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeaderAndBody::body() const {
  // @@protoc_insertion_point(field_get:securemessage.HeaderAndBody.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderAndBody::set_body(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.HeaderAndBody.body)
}
inline std::string* HeaderAndBody::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:securemessage.HeaderAndBody.body)
  return _s;
}
inline const std::string& HeaderAndBody::_internal_body() const {
  return _impl_.body_.Get();
}
inline void HeaderAndBody::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderAndBody::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderAndBody::release_body() {
  // @@protoc_insertion_point(field_release:securemessage.HeaderAndBody.body)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.body_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HeaderAndBody::set_allocated_body(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.HeaderAndBody.body)
}

// -------------------------------------------------------------------

// HeaderAndBodyInternal

// required bytes header = 1;
inline bool HeaderAndBodyInternal::has_header() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void HeaderAndBodyInternal::clear_header() {
  _impl_.header_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeaderAndBodyInternal::header() const {
  // @@protoc_insertion_point(field_get:securemessage.HeaderAndBodyInternal.header)
  return _internal_header();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderAndBodyInternal::set_header(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.header_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.HeaderAndBodyInternal.header)
}
inline std::string* HeaderAndBodyInternal::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:securemessage.HeaderAndBodyInternal.header)
  return _s;
}
inline const std::string& HeaderAndBodyInternal::_internal_header() const {
  return _impl_.header_.Get();
}
inline void HeaderAndBodyInternal::_internal_set_header(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.header_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderAndBodyInternal::_internal_mutable_header() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.header_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderAndBodyInternal::release_header() {
  // @@protoc_insertion_point(field_release:securemessage.HeaderAndBodyInternal.header)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.header_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.header_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HeaderAndBodyInternal::set_allocated_header(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.header_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.header_.IsDefault()) {
          _impl_.header_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.HeaderAndBodyInternal.header)
}

// required bytes body = 2;
inline bool HeaderAndBodyInternal::has_body() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void HeaderAndBodyInternal::clear_body() {
  _impl_.body_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& HeaderAndBodyInternal::body() const {
  // @@protoc_insertion_point(field_get:securemessage.HeaderAndBodyInternal.body)
  return _internal_body();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void HeaderAndBodyInternal::set_body(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.body_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.HeaderAndBodyInternal.body)
}
inline std::string* HeaderAndBodyInternal::mutable_body() {
  std::string* _s = _internal_mutable_body();
  // @@protoc_insertion_point(field_mutable:securemessage.HeaderAndBodyInternal.body)
  return _s;
}
inline const std::string& HeaderAndBodyInternal::_internal_body() const {
  return _impl_.body_.Get();
}
inline void HeaderAndBodyInternal::_internal_set_body(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.body_.Set(value, GetArenaForAllocation());
}
inline std::string* HeaderAndBodyInternal::_internal_mutable_body() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.body_.Mutable( GetArenaForAllocation());
}
inline std::string* HeaderAndBodyInternal::release_body() {
  // @@protoc_insertion_point(field_release:securemessage.HeaderAndBodyInternal.body)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.body_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.body_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void HeaderAndBodyInternal::set_allocated_body(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.body_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.body_.IsDefault()) {
          _impl_.body_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.HeaderAndBodyInternal.body)
}

// -------------------------------------------------------------------

// EcP256PublicKey

// required bytes x = 1;
inline bool EcP256PublicKey::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EcP256PublicKey::clear_x() {
  _impl_.x_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EcP256PublicKey::x() const {
  // @@protoc_insertion_point(field_get:securemessage.EcP256PublicKey.x)
  return _internal_x();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcP256PublicKey::set_x(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.EcP256PublicKey.x)
}
inline std::string* EcP256PublicKey::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:securemessage.EcP256PublicKey.x)
  return _s;
}
inline const std::string& EcP256PublicKey::_internal_x() const {
  return _impl_.x_.Get();
}
inline void EcP256PublicKey::_internal_set_x(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* EcP256PublicKey::_internal_mutable_x() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.x_.Mutable( GetArenaForAllocation());
}
inline std::string* EcP256PublicKey::release_x() {
  // @@protoc_insertion_point(field_release:securemessage.EcP256PublicKey.x)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.x_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EcP256PublicKey::set_allocated_x(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.x_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.x_.IsDefault()) {
          _impl_.x_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.EcP256PublicKey.x)
}

// required bytes y = 2;
inline bool EcP256PublicKey::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EcP256PublicKey::clear_y() {
  _impl_.y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EcP256PublicKey::y() const {
  // @@protoc_insertion_point(field_get:securemessage.EcP256PublicKey.y)
  return _internal_y();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcP256PublicKey::set_y(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.EcP256PublicKey.y)
}
inline std::string* EcP256PublicKey::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:securemessage.EcP256PublicKey.y)
  return _s;
}
inline const std::string& EcP256PublicKey::_internal_y() const {
  return _impl_.y_.Get();
}
inline void EcP256PublicKey::_internal_set_y(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* EcP256PublicKey::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.y_.Mutable( GetArenaForAllocation());
}
inline std::string* EcP256PublicKey::release_y() {
  // @@protoc_insertion_point(field_release:securemessage.EcP256PublicKey.y)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.y_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EcP256PublicKey::set_allocated_y(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.y_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.y_.IsDefault()) {
          _impl_.y_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.EcP256PublicKey.y)
}

// -------------------------------------------------------------------

// SimpleRsaPublicKey

// required bytes n = 1;
inline bool SimpleRsaPublicKey::has_n() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SimpleRsaPublicKey::clear_n() {
  _impl_.n_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SimpleRsaPublicKey::n() const {
  // @@protoc_insertion_point(field_get:securemessage.SimpleRsaPublicKey.n)
  return _internal_n();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SimpleRsaPublicKey::set_n(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.n_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.SimpleRsaPublicKey.n)
}
inline std::string* SimpleRsaPublicKey::mutable_n() {
  std::string* _s = _internal_mutable_n();
  // @@protoc_insertion_point(field_mutable:securemessage.SimpleRsaPublicKey.n)
  return _s;
}
inline const std::string& SimpleRsaPublicKey::_internal_n() const {
  return _impl_.n_.Get();
}
inline void SimpleRsaPublicKey::_internal_set_n(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.n_.Set(value, GetArenaForAllocation());
}
inline std::string* SimpleRsaPublicKey::_internal_mutable_n() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.n_.Mutable( GetArenaForAllocation());
}
inline std::string* SimpleRsaPublicKey::release_n() {
  // @@protoc_insertion_point(field_release:securemessage.SimpleRsaPublicKey.n)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.n_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.n_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SimpleRsaPublicKey::set_allocated_n(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.n_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.n_.IsDefault()) {
          _impl_.n_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.SimpleRsaPublicKey.n)
}

// optional int32 e = 2 [default = 65537];
inline bool SimpleRsaPublicKey::has_e() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SimpleRsaPublicKey::clear_e() {
  _impl_.e_ = 65537;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t SimpleRsaPublicKey::e() const {
  // @@protoc_insertion_point(field_get:securemessage.SimpleRsaPublicKey.e)
  return _internal_e();
}
inline void SimpleRsaPublicKey::set_e(::int32_t value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:securemessage.SimpleRsaPublicKey.e)
}
inline ::int32_t SimpleRsaPublicKey::_internal_e() const {
  return _impl_.e_;
}
inline void SimpleRsaPublicKey::_internal_set_e(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.e_ = value;
}

// -------------------------------------------------------------------

// DhPublicKey

// required bytes y = 1;
inline bool DhPublicKey::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DhPublicKey::clear_y() {
  _impl_.y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DhPublicKey::y() const {
  // @@protoc_insertion_point(field_get:securemessage.DhPublicKey.y)
  return _internal_y();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DhPublicKey::set_y(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.y_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securemessage.DhPublicKey.y)
}
inline std::string* DhPublicKey::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:securemessage.DhPublicKey.y)
  return _s;
}
inline const std::string& DhPublicKey::_internal_y() const {
  return _impl_.y_.Get();
}
inline void DhPublicKey::_internal_set_y(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* DhPublicKey::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.y_.Mutable( GetArenaForAllocation());
}
inline std::string* DhPublicKey::release_y() {
  // @@protoc_insertion_point(field_release:securemessage.DhPublicKey.y)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.y_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DhPublicKey::set_allocated_y(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.y_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.y_.IsDefault()) {
          _impl_.y_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securemessage.DhPublicKey.y)
}

// -------------------------------------------------------------------

// GenericPublicKey

// required .securemessage.PublicKeyType type = 1;
inline bool GenericPublicKey::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GenericPublicKey::clear_type() {
  _impl_.type_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::securemessage::PublicKeyType GenericPublicKey::type() const {
  // @@protoc_insertion_point(field_get:securemessage.GenericPublicKey.type)
  return _internal_type();
}
inline void GenericPublicKey::set_type(::securemessage::PublicKeyType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:securemessage.GenericPublicKey.type)
}
inline ::securemessage::PublicKeyType GenericPublicKey::_internal_type() const {
  return static_cast<::securemessage::PublicKeyType>(_impl_.type_);
}
inline void GenericPublicKey::_internal_set_type(::securemessage::PublicKeyType value) {
  assert(::securemessage::PublicKeyType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// optional .securemessage.EcP256PublicKey ec_p256_public_key = 2;
inline bool GenericPublicKey::has_ec_p256_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ec_p256_public_key_ != nullptr);
  return value;
}
inline void GenericPublicKey::clear_ec_p256_public_key() {
  if (_impl_.ec_p256_public_key_ != nullptr) _impl_.ec_p256_public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::securemessage::EcP256PublicKey& GenericPublicKey::_internal_ec_p256_public_key() const {
  const ::securemessage::EcP256PublicKey* p = _impl_.ec_p256_public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::EcP256PublicKey&>(
      ::securemessage::_EcP256PublicKey_default_instance_);
}
inline const ::securemessage::EcP256PublicKey& GenericPublicKey::ec_p256_public_key() const {
  // @@protoc_insertion_point(field_get:securemessage.GenericPublicKey.ec_p256_public_key)
  return _internal_ec_p256_public_key();
}
inline void GenericPublicKey::unsafe_arena_set_allocated_ec_p256_public_key(
    ::securemessage::EcP256PublicKey* ec_p256_public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ec_p256_public_key_);
  }
  _impl_.ec_p256_public_key_ = ec_p256_public_key;
  if (ec_p256_public_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securemessage.GenericPublicKey.ec_p256_public_key)
}
inline ::securemessage::EcP256PublicKey* GenericPublicKey::release_ec_p256_public_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::EcP256PublicKey* temp = _impl_.ec_p256_public_key_;
  _impl_.ec_p256_public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::EcP256PublicKey* GenericPublicKey::unsafe_arena_release_ec_p256_public_key() {
  // @@protoc_insertion_point(field_release:securemessage.GenericPublicKey.ec_p256_public_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::EcP256PublicKey* temp = _impl_.ec_p256_public_key_;
  _impl_.ec_p256_public_key_ = nullptr;
  return temp;
}
inline ::securemessage::EcP256PublicKey* GenericPublicKey::_internal_mutable_ec_p256_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.ec_p256_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::EcP256PublicKey>(GetArenaForAllocation());
    _impl_.ec_p256_public_key_ = p;
  }
  return _impl_.ec_p256_public_key_;
}
inline ::securemessage::EcP256PublicKey* GenericPublicKey::mutable_ec_p256_public_key() {
  ::securemessage::EcP256PublicKey* _msg = _internal_mutable_ec_p256_public_key();
  // @@protoc_insertion_point(field_mutable:securemessage.GenericPublicKey.ec_p256_public_key)
  return _msg;
}
inline void GenericPublicKey::set_allocated_ec_p256_public_key(::securemessage::EcP256PublicKey* ec_p256_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ec_p256_public_key_;
  }
  if (ec_p256_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ec_p256_public_key);
    if (message_arena != submessage_arena) {
      ec_p256_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ec_p256_public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.ec_p256_public_key_ = ec_p256_public_key;
  // @@protoc_insertion_point(field_set_allocated:securemessage.GenericPublicKey.ec_p256_public_key)
}

// optional .securemessage.SimpleRsaPublicKey rsa2048_public_key = 3;
inline bool GenericPublicKey::has_rsa2048_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rsa2048_public_key_ != nullptr);
  return value;
}
inline void GenericPublicKey::clear_rsa2048_public_key() {
  if (_impl_.rsa2048_public_key_ != nullptr) _impl_.rsa2048_public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::securemessage::SimpleRsaPublicKey& GenericPublicKey::_internal_rsa2048_public_key() const {
  const ::securemessage::SimpleRsaPublicKey* p = _impl_.rsa2048_public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::SimpleRsaPublicKey&>(
      ::securemessage::_SimpleRsaPublicKey_default_instance_);
}
inline const ::securemessage::SimpleRsaPublicKey& GenericPublicKey::rsa2048_public_key() const {
  // @@protoc_insertion_point(field_get:securemessage.GenericPublicKey.rsa2048_public_key)
  return _internal_rsa2048_public_key();
}
inline void GenericPublicKey::unsafe_arena_set_allocated_rsa2048_public_key(
    ::securemessage::SimpleRsaPublicKey* rsa2048_public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rsa2048_public_key_);
  }
  _impl_.rsa2048_public_key_ = rsa2048_public_key;
  if (rsa2048_public_key) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securemessage.GenericPublicKey.rsa2048_public_key)
}
inline ::securemessage::SimpleRsaPublicKey* GenericPublicKey::release_rsa2048_public_key() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::securemessage::SimpleRsaPublicKey* temp = _impl_.rsa2048_public_key_;
  _impl_.rsa2048_public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::SimpleRsaPublicKey* GenericPublicKey::unsafe_arena_release_rsa2048_public_key() {
  // @@protoc_insertion_point(field_release:securemessage.GenericPublicKey.rsa2048_public_key)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::securemessage::SimpleRsaPublicKey* temp = _impl_.rsa2048_public_key_;
  _impl_.rsa2048_public_key_ = nullptr;
  return temp;
}
inline ::securemessage::SimpleRsaPublicKey* GenericPublicKey::_internal_mutable_rsa2048_public_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rsa2048_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::SimpleRsaPublicKey>(GetArenaForAllocation());
    _impl_.rsa2048_public_key_ = p;
  }
  return _impl_.rsa2048_public_key_;
}
inline ::securemessage::SimpleRsaPublicKey* GenericPublicKey::mutable_rsa2048_public_key() {
  ::securemessage::SimpleRsaPublicKey* _msg = _internal_mutable_rsa2048_public_key();
  // @@protoc_insertion_point(field_mutable:securemessage.GenericPublicKey.rsa2048_public_key)
  return _msg;
}
inline void GenericPublicKey::set_allocated_rsa2048_public_key(::securemessage::SimpleRsaPublicKey* rsa2048_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.rsa2048_public_key_;
  }
  if (rsa2048_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(rsa2048_public_key);
    if (message_arena != submessage_arena) {
      rsa2048_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rsa2048_public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rsa2048_public_key_ = rsa2048_public_key;
  // @@protoc_insertion_point(field_set_allocated:securemessage.GenericPublicKey.rsa2048_public_key)
}

// optional .securemessage.DhPublicKey dh2048_public_key = 4;
inline bool GenericPublicKey::has_dh2048_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dh2048_public_key_ != nullptr);
  return value;
}
inline void GenericPublicKey::clear_dh2048_public_key() {
  if (_impl_.dh2048_public_key_ != nullptr) _impl_.dh2048_public_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::securemessage::DhPublicKey& GenericPublicKey::_internal_dh2048_public_key() const {
  const ::securemessage::DhPublicKey* p = _impl_.dh2048_public_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::DhPublicKey&>(
      ::securemessage::_DhPublicKey_default_instance_);
}
inline const ::securemessage::DhPublicKey& GenericPublicKey::dh2048_public_key() const {
  // @@protoc_insertion_point(field_get:securemessage.GenericPublicKey.dh2048_public_key)
  return _internal_dh2048_public_key();
}
inline void GenericPublicKey::unsafe_arena_set_allocated_dh2048_public_key(
    ::securemessage::DhPublicKey* dh2048_public_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dh2048_public_key_);
  }
  _impl_.dh2048_public_key_ = dh2048_public_key;
  if (dh2048_public_key) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securemessage.GenericPublicKey.dh2048_public_key)
}
inline ::securemessage::DhPublicKey* GenericPublicKey::release_dh2048_public_key() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::securemessage::DhPublicKey* temp = _impl_.dh2048_public_key_;
  _impl_.dh2048_public_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::DhPublicKey* GenericPublicKey::unsafe_arena_release_dh2048_public_key() {
  // @@protoc_insertion_point(field_release:securemessage.GenericPublicKey.dh2048_public_key)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::securemessage::DhPublicKey* temp = _impl_.dh2048_public_key_;
  _impl_.dh2048_public_key_ = nullptr;
  return temp;
}
inline ::securemessage::DhPublicKey* GenericPublicKey::_internal_mutable_dh2048_public_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.dh2048_public_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::DhPublicKey>(GetArenaForAllocation());
    _impl_.dh2048_public_key_ = p;
  }
  return _impl_.dh2048_public_key_;
}
inline ::securemessage::DhPublicKey* GenericPublicKey::mutable_dh2048_public_key() {
  ::securemessage::DhPublicKey* _msg = _internal_mutable_dh2048_public_key();
  // @@protoc_insertion_point(field_mutable:securemessage.GenericPublicKey.dh2048_public_key)
  return _msg;
}
inline void GenericPublicKey::set_allocated_dh2048_public_key(::securemessage::DhPublicKey* dh2048_public_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.dh2048_public_key_;
  }
  if (dh2048_public_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dh2048_public_key);
    if (message_arena != submessage_arena) {
      dh2048_public_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dh2048_public_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.dh2048_public_key_ = dh2048_public_key;
  // @@protoc_insertion_point(field_set_allocated:securemessage.GenericPublicKey.dh2048_public_key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace securemessage


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::securemessage::SigScheme> : std::true_type {};
template <>
struct is_proto_enum<::securemessage::EncScheme> : std::true_type {};
template <>
struct is_proto_enum<::securemessage::PublicKeyType> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_securemessage_2eproto_2epb_2eh
