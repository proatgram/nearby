// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: securegcm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_securegcm_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_securegcm_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_securegcm_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_securegcm_2eproto {
  static const ::uint32_t offsets[];
};
namespace securegcm {
class GcmDeviceInfo;
struct GcmDeviceInfoDefaultTypeInternal;
extern GcmDeviceInfoDefaultTypeInternal _GcmDeviceInfo_default_instance_;
class GcmMetadata;
struct GcmMetadataDefaultTypeInternal;
extern GcmMetadataDefaultTypeInternal _GcmMetadata_default_instance_;
class LoginNotificationInfo;
struct LoginNotificationInfoDefaultTypeInternal;
extern LoginNotificationInfoDefaultTypeInternal _LoginNotificationInfo_default_instance_;
class Tickle;
struct TickleDefaultTypeInternal;
extern TickleDefaultTypeInternal _Tickle_default_instance_;
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template <>
::securegcm::GcmDeviceInfo* Arena::CreateMaybeMessage<::securegcm::GcmDeviceInfo>(Arena*);
template <>
::securegcm::GcmMetadata* Arena::CreateMaybeMessage<::securegcm::GcmMetadata>(Arena*);
template <>
::securegcm::LoginNotificationInfo* Arena::CreateMaybeMessage<::securegcm::LoginNotificationInfo>(Arena*);
template <>
::securegcm::Tickle* Arena::CreateMaybeMessage<::securegcm::Tickle>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace securegcm {
enum AppleDeviceDiagonalMils : int {
  APPLE_PHONE = 4000,
  APPLE_PAD = 7900,
};

bool AppleDeviceDiagonalMils_IsValid(int value);
constexpr AppleDeviceDiagonalMils AppleDeviceDiagonalMils_MIN = static_cast<AppleDeviceDiagonalMils>(4000);
constexpr AppleDeviceDiagonalMils AppleDeviceDiagonalMils_MAX = static_cast<AppleDeviceDiagonalMils>(7900);
constexpr int AppleDeviceDiagonalMils_ARRAYSIZE = 7900 + 1;
const std::string& AppleDeviceDiagonalMils_Name(AppleDeviceDiagonalMils value);
template <typename T>
const std::string& AppleDeviceDiagonalMils_Name(T value) {
  static_assert(std::is_same<T, AppleDeviceDiagonalMils>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to AppleDeviceDiagonalMils_Name().");
  return AppleDeviceDiagonalMils_Name(static_cast<AppleDeviceDiagonalMils>(value));
}
const std::string& AppleDeviceDiagonalMils_Name(AppleDeviceDiagonalMils value);
bool AppleDeviceDiagonalMils_Parse(absl::string_view name, AppleDeviceDiagonalMils* value);
enum DeviceType : int {
  UNKNOWN = 0,
  ANDROID = 1,
  CHROME = 2,
  IOS = 3,
  BROWSER = 4,
  OSX = 5,
};

bool DeviceType_IsValid(int value);
constexpr DeviceType DeviceType_MIN = static_cast<DeviceType>(0);
constexpr DeviceType DeviceType_MAX = static_cast<DeviceType>(5);
constexpr int DeviceType_ARRAYSIZE = 5 + 1;
const std::string& DeviceType_Name(DeviceType value);
template <typename T>
const std::string& DeviceType_Name(T value) {
  static_assert(std::is_same<T, DeviceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to DeviceType_Name().");
  return DeviceType_Name(static_cast<DeviceType>(value));
}
const std::string& DeviceType_Name(DeviceType value);
bool DeviceType_Parse(absl::string_view name, DeviceType* value);
enum SoftwareFeature : int {
  UNKNOWN_FEATURE = 0,
  BETTER_TOGETHER_HOST = 1,
  BETTER_TOGETHER_CLIENT = 2,
  EASY_UNLOCK_HOST = 3,
  EASY_UNLOCK_CLIENT = 4,
  MAGIC_TETHER_HOST = 5,
  MAGIC_TETHER_CLIENT = 6,
  SMS_CONNECT_HOST = 7,
  SMS_CONNECT_CLIENT = 8,
};

bool SoftwareFeature_IsValid(int value);
constexpr SoftwareFeature SoftwareFeature_MIN = static_cast<SoftwareFeature>(0);
constexpr SoftwareFeature SoftwareFeature_MAX = static_cast<SoftwareFeature>(8);
constexpr int SoftwareFeature_ARRAYSIZE = 8 + 1;
const std::string& SoftwareFeature_Name(SoftwareFeature value);
template <typename T>
const std::string& SoftwareFeature_Name(T value) {
  static_assert(std::is_same<T, SoftwareFeature>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SoftwareFeature_Name().");
  return SoftwareFeature_Name(static_cast<SoftwareFeature>(value));
}
const std::string& SoftwareFeature_Name(SoftwareFeature value);
bool SoftwareFeature_Parse(absl::string_view name, SoftwareFeature* value);
enum InvocationReason : int {
  REASON_UNKNOWN = 0,
  REASON_INITIALIZATION = 1,
  REASON_PERIODIC = 2,
  REASON_SLOW_PERIODIC = 3,
  REASON_FAST_PERIODIC = 4,
  REASON_EXPIRATION = 5,
  REASON_FAILURE_RECOVERY = 6,
  REASON_NEW_ACCOUNT = 7,
  REASON_CHANGED_ACCOUNT = 8,
  REASON_FEATURE_TOGGLED = 9,
  REASON_SERVER_INITIATED = 10,
  REASON_ADDRESS_CHANGE = 11,
  REASON_SOFTWARE_UPDATE = 12,
  REASON_MANUAL = 13,
  REASON_CUSTOM_KEY_INVALIDATION = 14,
  REASON_PROXIMITY_PERIODIC = 15,
};

bool InvocationReason_IsValid(int value);
constexpr InvocationReason InvocationReason_MIN = static_cast<InvocationReason>(0);
constexpr InvocationReason InvocationReason_MAX = static_cast<InvocationReason>(15);
constexpr int InvocationReason_ARRAYSIZE = 15 + 1;
const std::string& InvocationReason_Name(InvocationReason value);
template <typename T>
const std::string& InvocationReason_Name(T value) {
  static_assert(std::is_same<T, InvocationReason>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to InvocationReason_Name().");
  return InvocationReason_Name(static_cast<InvocationReason>(value));
}
const std::string& InvocationReason_Name(InvocationReason value);
bool InvocationReason_Parse(absl::string_view name, InvocationReason* value);
enum Type : int {
  ENROLLMENT = 0,
  TICKLE = 1,
  TX_REQUEST = 2,
  TX_REPLY = 3,
  TX_SYNC_REQUEST = 4,
  TX_SYNC_RESPONSE = 5,
  TX_PING = 6,
  DEVICE_INFO_UPDATE = 7,
  TX_CANCEL_REQUEST = 8,
  PROXIMITYAUTH_PAIRING = 10,
  GCMV1_IDENTITY_ASSERTION = 11,
  DEVICE_TO_DEVICE_RESPONDER_HELLO_PAYLOAD = 12,
  DEVICE_TO_DEVICE_MESSAGE = 13,
  DEVICE_PROXIMITY_CALLBACK = 14,
  UNLOCK_KEY_SIGNED_CHALLENGE = 15,
  LOGIN_NOTIFICATION = 101,
};

bool Type_IsValid(int value);
constexpr Type Type_MIN = static_cast<Type>(0);
constexpr Type Type_MAX = static_cast<Type>(101);
constexpr int Type_ARRAYSIZE = 101 + 1;
const std::string& Type_Name(Type value);
template <typename T>
const std::string& Type_Name(T value) {
  static_assert(std::is_same<T, Type>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Type_Name().");
  return Type_Name(static_cast<Type>(value));
}
const std::string& Type_Name(Type value);
bool Type_Parse(absl::string_view name, Type* value);

// ===================================================================


// -------------------------------------------------------------------

class GcmDeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.GcmDeviceInfo) */ {
 public:
  inline GcmDeviceInfo() : GcmDeviceInfo(nullptr) {}
  ~GcmDeviceInfo() override;
  explicit PROTOBUF_CONSTEXPR GcmDeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcmDeviceInfo(const GcmDeviceInfo& from);
  GcmDeviceInfo(GcmDeviceInfo&& from) noexcept
    : GcmDeviceInfo() {
    *this = ::std::move(from);
  }

  inline GcmDeviceInfo& operator=(const GcmDeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcmDeviceInfo& operator=(GcmDeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GcmDeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcmDeviceInfo* internal_default_instance() {
    return reinterpret_cast<const GcmDeviceInfo*>(
               &_GcmDeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GcmDeviceInfo& a, GcmDeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GcmDeviceInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcmDeviceInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcmDeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcmDeviceInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GcmDeviceInfo& from);
  void MergeFrom(const GcmDeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcmDeviceInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.GcmDeviceInfo";
  }
  protected:
  explicit GcmDeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedSoftwareFeaturesFieldNumber = 411,
    kEnabledSoftwareFeaturesFieldNumber = 412,
    kUserPublicKeyFieldNumber = 4,
    kDeviceModelFieldNumber = 7,
    kLocaleFieldNumber = 8,
    kKeyHandleFieldNumber = 9,
    kDeviceOsVersionFieldNumber = 13,
    kDeviceOsReleaseFieldNumber = 15,
    kDeviceOsCodenameFieldNumber = 16,
    kDeviceSoftwareVersionFieldNumber = 17,
    kDeviceSoftwarePackageFieldNumber = 19,
    kLongDeviceIdFieldNumber = 29,
    kDeviceManufacturerFieldNumber = 31,
    kGcmRegistrationIdFieldNumber = 102,
    kDeviceMasterKeyHashFieldNumber = 103,
    kApnRegistrationIdFieldNumber = 202,
    kBluetoothMacAddressFieldNumber = 302,
    kEnrollmentSessionIdFieldNumber = 1000,
    kOauthTokenFieldNumber = 1001,
    kAndroidDeviceIdFieldNumber = 1,
    kCounterFieldNumber = 12,
    kDeviceOsVersionCodeFieldNumber = 14,
    kDeviceSoftwareVersionCodeFieldNumber = 18,
    kDeviceDisplayDiagonalMilsFieldNumber = 22,
    kDeviceAuthzenVersionFieldNumber = 24,
    kUsingSecureScreenlockFieldNumber = 400,
    kAutoUnlockScreenlockSupportedFieldNumber = 401,
    kAutoUnlockScreenlockEnabledFieldNumber = 402,
    kBluetoothRadioSupportedFieldNumber = 403,
    kBluetoothRadioEnabledFieldNumber = 404,
    kMobileDataSupportedFieldNumber = 405,
    kTetheringSupportedFieldNumber = 406,
    kBleRadioSupportedFieldNumber = 407,
    kPixelExperienceFieldNumber = 408,
    kArcPlusPlusFieldNumber = 409,
    kIsScreenlockStateFlakyFieldNumber = 410,
    kDeviceTypeFieldNumber = 32,
    kNotificationEnabledFieldNumber = 203,
  };
  // repeated .securegcm.SoftwareFeature supported_software_features = 411;
  int supported_software_features_size() const;
  private:
  int _internal_supported_software_features_size() const;

  public:
  void clear_supported_software_features() ;
  public:
  ::securegcm::SoftwareFeature supported_software_features(int index) const;
  void set_supported_software_features(int index, ::securegcm::SoftwareFeature value);
  void add_supported_software_features(::securegcm::SoftwareFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_software_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_software_features();

  private:
  ::securegcm::SoftwareFeature _internal_supported_software_features(int index) const;
  void _internal_add_supported_software_features(::securegcm::SoftwareFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_supported_software_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_software_features();

  public:
  // repeated .securegcm.SoftwareFeature enabled_software_features = 412;
  int enabled_software_features_size() const;
  private:
  int _internal_enabled_software_features_size() const;

  public:
  void clear_enabled_software_features() ;
  public:
  ::securegcm::SoftwareFeature enabled_software_features(int index) const;
  void set_enabled_software_features(int index, ::securegcm::SoftwareFeature value);
  void add_enabled_software_features(::securegcm::SoftwareFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& enabled_software_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_enabled_software_features();

  private:
  ::securegcm::SoftwareFeature _internal_enabled_software_features(int index) const;
  void _internal_add_enabled_software_features(::securegcm::SoftwareFeature value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& _internal_enabled_software_features() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_enabled_software_features();

  public:
  // required bytes user_public_key = 4;
  bool has_user_public_key() const;
  void clear_user_public_key() ;
  const std::string& user_public_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_user_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_user_public_key();
  PROTOBUF_NODISCARD std::string* release_user_public_key();
  void set_allocated_user_public_key(std::string* ptr);

  private:
  const std::string& _internal_user_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_public_key(
      const std::string& value);
  std::string* _internal_mutable_user_public_key();

  public:
  // optional string device_model = 7;
  bool has_device_model() const;
  void clear_device_model() ;
  const std::string& device_model() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_model(Arg_&& arg, Args_... args);
  std::string* mutable_device_model();
  PROTOBUF_NODISCARD std::string* release_device_model();
  void set_allocated_device_model(std::string* ptr);

  private:
  const std::string& _internal_device_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_model(
      const std::string& value);
  std::string* _internal_mutable_device_model();

  public:
  // optional string locale = 8;
  bool has_locale() const;
  void clear_locale() ;
  const std::string& locale() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_locale(Arg_&& arg, Args_... args);
  std::string* mutable_locale();
  PROTOBUF_NODISCARD std::string* release_locale();
  void set_allocated_locale(std::string* ptr);

  private:
  const std::string& _internal_locale() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_locale(
      const std::string& value);
  std::string* _internal_mutable_locale();

  public:
  // optional bytes key_handle = 9;
  bool has_key_handle() const;
  void clear_key_handle() ;
  const std::string& key_handle() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_key_handle(Arg_&& arg, Args_... args);
  std::string* mutable_key_handle();
  PROTOBUF_NODISCARD std::string* release_key_handle();
  void set_allocated_key_handle(std::string* ptr);

  private:
  const std::string& _internal_key_handle() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key_handle(
      const std::string& value);
  std::string* _internal_mutable_key_handle();

  public:
  // optional string device_os_version = 13;
  bool has_device_os_version() const;
  void clear_device_os_version() ;
  const std::string& device_os_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_os_version(Arg_&& arg, Args_... args);
  std::string* mutable_device_os_version();
  PROTOBUF_NODISCARD std::string* release_device_os_version();
  void set_allocated_device_os_version(std::string* ptr);

  private:
  const std::string& _internal_device_os_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_os_version(
      const std::string& value);
  std::string* _internal_mutable_device_os_version();

  public:
  // optional string device_os_release = 15;
  bool has_device_os_release() const;
  void clear_device_os_release() ;
  const std::string& device_os_release() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_os_release(Arg_&& arg, Args_... args);
  std::string* mutable_device_os_release();
  PROTOBUF_NODISCARD std::string* release_device_os_release();
  void set_allocated_device_os_release(std::string* ptr);

  private:
  const std::string& _internal_device_os_release() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_os_release(
      const std::string& value);
  std::string* _internal_mutable_device_os_release();

  public:
  // optional string device_os_codename = 16;
  bool has_device_os_codename() const;
  void clear_device_os_codename() ;
  const std::string& device_os_codename() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_os_codename(Arg_&& arg, Args_... args);
  std::string* mutable_device_os_codename();
  PROTOBUF_NODISCARD std::string* release_device_os_codename();
  void set_allocated_device_os_codename(std::string* ptr);

  private:
  const std::string& _internal_device_os_codename() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_os_codename(
      const std::string& value);
  std::string* _internal_mutable_device_os_codename();

  public:
  // optional string device_software_version = 17;
  bool has_device_software_version() const;
  void clear_device_software_version() ;
  const std::string& device_software_version() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_software_version(Arg_&& arg, Args_... args);
  std::string* mutable_device_software_version();
  PROTOBUF_NODISCARD std::string* release_device_software_version();
  void set_allocated_device_software_version(std::string* ptr);

  private:
  const std::string& _internal_device_software_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_software_version(
      const std::string& value);
  std::string* _internal_mutable_device_software_version();

  public:
  // optional string device_software_package = 19;
  bool has_device_software_package() const;
  void clear_device_software_package() ;
  const std::string& device_software_package() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_software_package(Arg_&& arg, Args_... args);
  std::string* mutable_device_software_package();
  PROTOBUF_NODISCARD std::string* release_device_software_package();
  void set_allocated_device_software_package(std::string* ptr);

  private:
  const std::string& _internal_device_software_package() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_software_package(
      const std::string& value);
  std::string* _internal_mutable_device_software_package();

  public:
  // optional bytes long_device_id = 29;
  bool has_long_device_id() const;
  void clear_long_device_id() ;
  const std::string& long_device_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_long_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_long_device_id();
  PROTOBUF_NODISCARD std::string* release_long_device_id();
  void set_allocated_long_device_id(std::string* ptr);

  private:
  const std::string& _internal_long_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_long_device_id(
      const std::string& value);
  std::string* _internal_mutable_long_device_id();

  public:
  // optional string device_manufacturer = 31;
  bool has_device_manufacturer() const;
  void clear_device_manufacturer() ;
  const std::string& device_manufacturer() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_manufacturer(Arg_&& arg, Args_... args);
  std::string* mutable_device_manufacturer();
  PROTOBUF_NODISCARD std::string* release_device_manufacturer();
  void set_allocated_device_manufacturer(std::string* ptr);

  private:
  const std::string& _internal_device_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_manufacturer(
      const std::string& value);
  std::string* _internal_mutable_device_manufacturer();

  public:
  // optional bytes gcm_registration_id = 102;
  bool has_gcm_registration_id() const;
  void clear_gcm_registration_id() ;
  const std::string& gcm_registration_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_gcm_registration_id(Arg_&& arg, Args_... args);
  std::string* mutable_gcm_registration_id();
  PROTOBUF_NODISCARD std::string* release_gcm_registration_id();
  void set_allocated_gcm_registration_id(std::string* ptr);

  private:
  const std::string& _internal_gcm_registration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gcm_registration_id(
      const std::string& value);
  std::string* _internal_mutable_gcm_registration_id();

  public:
  // optional bytes device_master_key_hash = 103;
  bool has_device_master_key_hash() const;
  void clear_device_master_key_hash() ;
  const std::string& device_master_key_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_master_key_hash(Arg_&& arg, Args_... args);
  std::string* mutable_device_master_key_hash();
  PROTOBUF_NODISCARD std::string* release_device_master_key_hash();
  void set_allocated_device_master_key_hash(std::string* ptr);

  private:
  const std::string& _internal_device_master_key_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_master_key_hash(
      const std::string& value);
  std::string* _internal_mutable_device_master_key_hash();

  public:
  // optional bytes apn_registration_id = 202;
  bool has_apn_registration_id() const;
  void clear_apn_registration_id() ;
  const std::string& apn_registration_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_apn_registration_id(Arg_&& arg, Args_... args);
  std::string* mutable_apn_registration_id();
  PROTOBUF_NODISCARD std::string* release_apn_registration_id();
  void set_allocated_apn_registration_id(std::string* ptr);

  private:
  const std::string& _internal_apn_registration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_apn_registration_id(
      const std::string& value);
  std::string* _internal_mutable_apn_registration_id();

  public:
  // optional string bluetooth_mac_address = 302;
  bool has_bluetooth_mac_address() const;
  void clear_bluetooth_mac_address() ;
  const std::string& bluetooth_mac_address() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_bluetooth_mac_address(Arg_&& arg, Args_... args);
  std::string* mutable_bluetooth_mac_address();
  PROTOBUF_NODISCARD std::string* release_bluetooth_mac_address();
  void set_allocated_bluetooth_mac_address(std::string* ptr);

  private:
  const std::string& _internal_bluetooth_mac_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bluetooth_mac_address(
      const std::string& value);
  std::string* _internal_mutable_bluetooth_mac_address();

  public:
  // optional bytes enrollment_session_id = 1000;
  bool has_enrollment_session_id() const;
  void clear_enrollment_session_id() ;
  const std::string& enrollment_session_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_enrollment_session_id(Arg_&& arg, Args_... args);
  std::string* mutable_enrollment_session_id();
  PROTOBUF_NODISCARD std::string* release_enrollment_session_id();
  void set_allocated_enrollment_session_id(std::string* ptr);

  private:
  const std::string& _internal_enrollment_session_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_enrollment_session_id(
      const std::string& value);
  std::string* _internal_mutable_enrollment_session_id();

  public:
  // optional string oauth_token = 1001;
  bool has_oauth_token() const;
  void clear_oauth_token() ;
  const std::string& oauth_token() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_oauth_token(Arg_&& arg, Args_... args);
  std::string* mutable_oauth_token();
  PROTOBUF_NODISCARD std::string* release_oauth_token();
  void set_allocated_oauth_token(std::string* ptr);

  private:
  const std::string& _internal_oauth_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oauth_token(
      const std::string& value);
  std::string* _internal_mutable_oauth_token();

  public:
  // optional fixed64 android_device_id = 1;
  bool has_android_device_id() const;
  void clear_android_device_id() ;
  ::uint64_t android_device_id() const;
  void set_android_device_id(::uint64_t value);

  private:
  ::uint64_t _internal_android_device_id() const;
  void _internal_set_android_device_id(::uint64_t value);

  public:
  // optional int64 counter = 12 [default = 0];
  bool has_counter() const;
  void clear_counter() ;
  ::int64_t counter() const;
  void set_counter(::int64_t value);

  private:
  ::int64_t _internal_counter() const;
  void _internal_set_counter(::int64_t value);

  public:
  // optional int64 device_os_version_code = 14;
  bool has_device_os_version_code() const;
  void clear_device_os_version_code() ;
  ::int64_t device_os_version_code() const;
  void set_device_os_version_code(::int64_t value);

  private:
  ::int64_t _internal_device_os_version_code() const;
  void _internal_set_device_os_version_code(::int64_t value);

  public:
  // optional int64 device_software_version_code = 18;
  bool has_device_software_version_code() const;
  void clear_device_software_version_code() ;
  ::int64_t device_software_version_code() const;
  void set_device_software_version_code(::int64_t value);

  private:
  ::int64_t _internal_device_software_version_code() const;
  void _internal_set_device_software_version_code(::int64_t value);

  public:
  // optional int32 device_display_diagonal_mils = 22;
  bool has_device_display_diagonal_mils() const;
  void clear_device_display_diagonal_mils() ;
  ::int32_t device_display_diagonal_mils() const;
  void set_device_display_diagonal_mils(::int32_t value);

  private:
  ::int32_t _internal_device_display_diagonal_mils() const;
  void _internal_set_device_display_diagonal_mils(::int32_t value);

  public:
  // optional int32 device_authzen_version = 24;
  bool has_device_authzen_version() const;
  void clear_device_authzen_version() ;
  ::int32_t device_authzen_version() const;
  void set_device_authzen_version(::int32_t value);

  private:
  ::int32_t _internal_device_authzen_version() const;
  void _internal_set_device_authzen_version(::int32_t value);

  public:
  // optional bool using_secure_screenlock = 400 [default = false];
  bool has_using_secure_screenlock() const;
  void clear_using_secure_screenlock() ;
  bool using_secure_screenlock() const;
  void set_using_secure_screenlock(bool value);

  private:
  bool _internal_using_secure_screenlock() const;
  void _internal_set_using_secure_screenlock(bool value);

  public:
  // optional bool auto_unlock_screenlock_supported = 401 [default = false];
  bool has_auto_unlock_screenlock_supported() const;
  void clear_auto_unlock_screenlock_supported() ;
  bool auto_unlock_screenlock_supported() const;
  void set_auto_unlock_screenlock_supported(bool value);

  private:
  bool _internal_auto_unlock_screenlock_supported() const;
  void _internal_set_auto_unlock_screenlock_supported(bool value);

  public:
  // optional bool auto_unlock_screenlock_enabled = 402 [default = false];
  bool has_auto_unlock_screenlock_enabled() const;
  void clear_auto_unlock_screenlock_enabled() ;
  bool auto_unlock_screenlock_enabled() const;
  void set_auto_unlock_screenlock_enabled(bool value);

  private:
  bool _internal_auto_unlock_screenlock_enabled() const;
  void _internal_set_auto_unlock_screenlock_enabled(bool value);

  public:
  // optional bool bluetooth_radio_supported = 403 [default = false];
  bool has_bluetooth_radio_supported() const;
  void clear_bluetooth_radio_supported() ;
  bool bluetooth_radio_supported() const;
  void set_bluetooth_radio_supported(bool value);

  private:
  bool _internal_bluetooth_radio_supported() const;
  void _internal_set_bluetooth_radio_supported(bool value);

  public:
  // optional bool bluetooth_radio_enabled = 404 [default = false];
  bool has_bluetooth_radio_enabled() const;
  void clear_bluetooth_radio_enabled() ;
  bool bluetooth_radio_enabled() const;
  void set_bluetooth_radio_enabled(bool value);

  private:
  bool _internal_bluetooth_radio_enabled() const;
  void _internal_set_bluetooth_radio_enabled(bool value);

  public:
  // optional bool mobile_data_supported = 405 [default = false];
  bool has_mobile_data_supported() const;
  void clear_mobile_data_supported() ;
  bool mobile_data_supported() const;
  void set_mobile_data_supported(bool value);

  private:
  bool _internal_mobile_data_supported() const;
  void _internal_set_mobile_data_supported(bool value);

  public:
  // optional bool tethering_supported = 406 [default = false];
  bool has_tethering_supported() const;
  void clear_tethering_supported() ;
  bool tethering_supported() const;
  void set_tethering_supported(bool value);

  private:
  bool _internal_tethering_supported() const;
  void _internal_set_tethering_supported(bool value);

  public:
  // optional bool ble_radio_supported = 407 [default = false];
  bool has_ble_radio_supported() const;
  void clear_ble_radio_supported() ;
  bool ble_radio_supported() const;
  void set_ble_radio_supported(bool value);

  private:
  bool _internal_ble_radio_supported() const;
  void _internal_set_ble_radio_supported(bool value);

  public:
  // optional bool pixel_experience = 408 [default = false];
  bool has_pixel_experience() const;
  void clear_pixel_experience() ;
  bool pixel_experience() const;
  void set_pixel_experience(bool value);

  private:
  bool _internal_pixel_experience() const;
  void _internal_set_pixel_experience(bool value);

  public:
  // optional bool arc_plus_plus = 409 [default = false];
  bool has_arc_plus_plus() const;
  void clear_arc_plus_plus() ;
  bool arc_plus_plus() const;
  void set_arc_plus_plus(bool value);

  private:
  bool _internal_arc_plus_plus() const;
  void _internal_set_arc_plus_plus(bool value);

  public:
  // optional bool is_screenlock_state_flaky = 410 [default = false];
  bool has_is_screenlock_state_flaky() const;
  void clear_is_screenlock_state_flaky() ;
  bool is_screenlock_state_flaky() const;
  void set_is_screenlock_state_flaky(bool value);

  private:
  bool _internal_is_screenlock_state_flaky() const;
  void _internal_set_is_screenlock_state_flaky(bool value);

  public:
  // optional .securegcm.DeviceType device_type = 32 [default = ANDROID];
  bool has_device_type() const;
  void clear_device_type() ;
  ::securegcm::DeviceType device_type() const;
  void set_device_type(::securegcm::DeviceType value);

  private:
  ::securegcm::DeviceType _internal_device_type() const;
  void _internal_set_device_type(::securegcm::DeviceType value);

  public:
  // optional bool notification_enabled = 203 [default = true];
  bool has_notification_enabled() const;
  void clear_notification_enabled() ;
  bool notification_enabled() const;
  void set_notification_enabled(bool value);

  private:
  bool _internal_notification_enabled() const;
  void _internal_set_notification_enabled(bool value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.GcmDeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<2> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_software_features_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> enabled_software_features_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_public_key_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_model_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr locale_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_handle_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_os_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_os_release_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_os_codename_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_software_version_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_software_package_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr long_device_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_manufacturer_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gcm_registration_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_master_key_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr apn_registration_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bluetooth_mac_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enrollment_session_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oauth_token_;
    ::uint64_t android_device_id_;
    ::int64_t counter_;
    ::int64_t device_os_version_code_;
    ::int64_t device_software_version_code_;
    ::int32_t device_display_diagonal_mils_;
    ::int32_t device_authzen_version_;
    bool using_secure_screenlock_;
    bool auto_unlock_screenlock_supported_;
    bool auto_unlock_screenlock_enabled_;
    bool bluetooth_radio_supported_;
    bool bluetooth_radio_enabled_;
    bool mobile_data_supported_;
    bool tethering_supported_;
    bool ble_radio_supported_;
    bool pixel_experience_;
    bool arc_plus_plus_;
    bool is_screenlock_state_flaky_;
    int device_type_;
    bool notification_enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securegcm_2eproto;
};// -------------------------------------------------------------------

class GcmMetadata final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.GcmMetadata) */ {
 public:
  inline GcmMetadata() : GcmMetadata(nullptr) {}
  ~GcmMetadata() override;
  explicit PROTOBUF_CONSTEXPR GcmMetadata(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GcmMetadata(const GcmMetadata& from);
  GcmMetadata(GcmMetadata&& from) noexcept
    : GcmMetadata() {
    *this = ::std::move(from);
  }

  inline GcmMetadata& operator=(const GcmMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline GcmMetadata& operator=(GcmMetadata&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const GcmMetadata& default_instance() {
    return *internal_default_instance();
  }
  static inline const GcmMetadata* internal_default_instance() {
    return reinterpret_cast<const GcmMetadata*>(
               &_GcmMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GcmMetadata& a, GcmMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(GcmMetadata* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GcmMetadata* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GcmMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GcmMetadata>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const GcmMetadata& from);
  void MergeFrom(const GcmMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(GcmMetadata* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.GcmMetadata";
  }
  protected:
  explicit GcmMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // required .securegcm.Type type = 1;
  bool has_type() const;
  void clear_type() ;
  ::securegcm::Type type() const;
  void set_type(::securegcm::Type value);

  private:
  ::securegcm::Type _internal_type() const;
  void _internal_set_type(::securegcm::Type value);

  public:
  // optional int32 version = 2 [default = 0];
  bool has_version() const;
  void clear_version() ;
  ::int32_t version() const;
  void set_version(::int32_t value);

  private:
  ::int32_t _internal_version() const;
  void _internal_set_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.GcmMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    int type_;
    ::int32_t version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securegcm_2eproto;
};// -------------------------------------------------------------------

class Tickle final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.Tickle) */ {
 public:
  inline Tickle() : Tickle(nullptr) {}
  ~Tickle() override;
  explicit PROTOBUF_CONSTEXPR Tickle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Tickle(const Tickle& from);
  Tickle(Tickle&& from) noexcept
    : Tickle() {
    *this = ::std::move(from);
  }

  inline Tickle& operator=(const Tickle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Tickle& operator=(Tickle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const Tickle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Tickle* internal_default_instance() {
    return reinterpret_cast<const Tickle*>(
               &_Tickle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Tickle& a, Tickle& b) {
    a.Swap(&b);
  }
  inline void Swap(Tickle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Tickle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Tickle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Tickle>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const Tickle& from);
  void MergeFrom(const Tickle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Tickle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.Tickle";
  }
  protected:
  explicit Tickle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpiryTimeFieldNumber = 1,
  };
  // optional fixed64 expiry_time = 1;
  bool has_expiry_time() const;
  void clear_expiry_time() ;
  ::uint64_t expiry_time() const;
  void set_expiry_time(::uint64_t value);

  private:
  ::uint64_t _internal_expiry_time() const;
  void _internal_set_expiry_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.Tickle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::uint64_t expiry_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securegcm_2eproto;
};// -------------------------------------------------------------------

class LoginNotificationInfo final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.LoginNotificationInfo) */ {
 public:
  inline LoginNotificationInfo() : LoginNotificationInfo(nullptr) {}
  ~LoginNotificationInfo() override;
  explicit PROTOBUF_CONSTEXPR LoginNotificationInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoginNotificationInfo(const LoginNotificationInfo& from);
  LoginNotificationInfo(LoginNotificationInfo&& from) noexcept
    : LoginNotificationInfo() {
    *this = ::std::move(from);
  }

  inline LoginNotificationInfo& operator=(const LoginNotificationInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoginNotificationInfo& operator=(LoginNotificationInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const LoginNotificationInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoginNotificationInfo* internal_default_instance() {
    return reinterpret_cast<const LoginNotificationInfo*>(
               &_LoginNotificationInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(LoginNotificationInfo& a, LoginNotificationInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(LoginNotificationInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoginNotificationInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoginNotificationInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoginNotificationInfo>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const LoginNotificationInfo& from);
  void MergeFrom(const LoginNotificationInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LoginNotificationInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.LoginNotificationInfo";
  }
  protected:
  explicit LoginNotificationInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmailFieldNumber = 3,
    kHostFieldNumber = 4,
    kSourceFieldNumber = 5,
    kEventTypeFieldNumber = 6,
    kCreationTimeFieldNumber = 2,
  };
  // optional string email = 3;
  bool has_email() const;
  void clear_email() ;
  const std::string& email() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_email(Arg_&& arg, Args_... args);
  std::string* mutable_email();
  PROTOBUF_NODISCARD std::string* release_email();
  void set_allocated_email(std::string* ptr);

  private:
  const std::string& _internal_email() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_email(
      const std::string& value);
  std::string* _internal_mutable_email();

  public:
  // optional string host = 4;
  bool has_host() const;
  void clear_host() ;
  const std::string& host() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_host(Arg_&& arg, Args_... args);
  std::string* mutable_host();
  PROTOBUF_NODISCARD std::string* release_host();
  void set_allocated_host(std::string* ptr);

  private:
  const std::string& _internal_host() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_host(
      const std::string& value);
  std::string* _internal_mutable_host();

  public:
  // optional string source = 5;
  bool has_source() const;
  void clear_source() ;
  const std::string& source() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_source(Arg_&& arg, Args_... args);
  std::string* mutable_source();
  PROTOBUF_NODISCARD std::string* release_source();
  void set_allocated_source(std::string* ptr);

  private:
  const std::string& _internal_source() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_source(
      const std::string& value);
  std::string* _internal_mutable_source();

  public:
  // optional string event_type = 6;
  bool has_event_type() const;
  void clear_event_type() ;
  const std::string& event_type() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_event_type(Arg_&& arg, Args_... args);
  std::string* mutable_event_type();
  PROTOBUF_NODISCARD std::string* release_event_type();
  void set_allocated_event_type(std::string* ptr);

  private:
  const std::string& _internal_event_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event_type(
      const std::string& value);
  std::string* _internal_mutable_event_type();

  public:
  // optional fixed64 creation_time = 2;
  bool has_creation_time() const;
  void clear_creation_time() ;
  ::uint64_t creation_time() const;
  void set_creation_time(::uint64_t value);

  private:
  ::uint64_t _internal_creation_time() const;
  void _internal_set_creation_time(::uint64_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.LoginNotificationInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr email_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr host_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_type_;
    ::uint64_t creation_time_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_securegcm_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GcmDeviceInfo

// optional fixed64 android_device_id = 1;
inline bool GcmDeviceInfo::has_android_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_android_device_id() {
  _impl_.android_device_id_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline ::uint64_t GcmDeviceInfo::android_device_id() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.android_device_id)
  return _internal_android_device_id();
}
inline void GcmDeviceInfo::set_android_device_id(::uint64_t value) {
  _internal_set_android_device_id(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.android_device_id)
}
inline ::uint64_t GcmDeviceInfo::_internal_android_device_id() const {
  return _impl_.android_device_id_;
}
inline void GcmDeviceInfo::_internal_set_android_device_id(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00020000u;
  _impl_.android_device_id_ = value;
}

// optional bytes gcm_registration_id = 102;
inline bool GcmDeviceInfo::has_gcm_registration_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_gcm_registration_id() {
  _impl_.gcm_registration_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const std::string& GcmDeviceInfo::gcm_registration_id() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.gcm_registration_id)
  return _internal_gcm_registration_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_gcm_registration_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.gcm_registration_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.gcm_registration_id)
}
inline std::string* GcmDeviceInfo::mutable_gcm_registration_id() {
  std::string* _s = _internal_mutable_gcm_registration_id();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.gcm_registration_id)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_gcm_registration_id() const {
  return _impl_.gcm_registration_id_.Get();
}
inline void GcmDeviceInfo::_internal_set_gcm_registration_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000800u;


  _impl_.gcm_registration_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_gcm_registration_id() {
  _impl_._has_bits_[0] |= 0x00000800u;
  return _impl_.gcm_registration_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_gcm_registration_id() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.gcm_registration_id)
  if ((_impl_._has_bits_[0] & 0x00000800u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000800u;
  auto* released = _impl_.gcm_registration_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.gcm_registration_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_gcm_registration_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.gcm_registration_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.gcm_registration_id_.IsDefault()) {
          _impl_.gcm_registration_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.gcm_registration_id)
}

// optional bytes apn_registration_id = 202;
inline bool GcmDeviceInfo::has_apn_registration_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_apn_registration_id() {
  _impl_.apn_registration_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const std::string& GcmDeviceInfo::apn_registration_id() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.apn_registration_id)
  return _internal_apn_registration_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_apn_registration_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00002000u;
  _impl_.apn_registration_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.apn_registration_id)
}
inline std::string* GcmDeviceInfo::mutable_apn_registration_id() {
  std::string* _s = _internal_mutable_apn_registration_id();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.apn_registration_id)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_apn_registration_id() const {
  return _impl_.apn_registration_id_.Get();
}
inline void GcmDeviceInfo::_internal_set_apn_registration_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00002000u;


  _impl_.apn_registration_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_apn_registration_id() {
  _impl_._has_bits_[0] |= 0x00002000u;
  return _impl_.apn_registration_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_apn_registration_id() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.apn_registration_id)
  if ((_impl_._has_bits_[0] & 0x00002000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00002000u;
  auto* released = _impl_.apn_registration_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.apn_registration_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_apn_registration_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.apn_registration_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.apn_registration_id_.IsDefault()) {
          _impl_.apn_registration_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.apn_registration_id)
}

// optional bool notification_enabled = 203 [default = true];
inline bool GcmDeviceInfo::has_notification_enabled() const {
  bool value = (_impl_._has_bits_[1] & 0x00000008u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_notification_enabled() {
  _impl_.notification_enabled_ = true;
  _impl_._has_bits_[1] &= ~0x00000008u;
}
inline bool GcmDeviceInfo::notification_enabled() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.notification_enabled)
  return _internal_notification_enabled();
}
inline void GcmDeviceInfo::set_notification_enabled(bool value) {
  _internal_set_notification_enabled(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.notification_enabled)
}
inline bool GcmDeviceInfo::_internal_notification_enabled() const {
  return _impl_.notification_enabled_;
}
inline void GcmDeviceInfo::_internal_set_notification_enabled(bool value) {
  _impl_._has_bits_[1] |= 0x00000008u;
  _impl_.notification_enabled_ = value;
}

// optional string bluetooth_mac_address = 302;
inline bool GcmDeviceInfo::has_bluetooth_mac_address() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_bluetooth_mac_address() {
  _impl_.bluetooth_mac_address_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const std::string& GcmDeviceInfo::bluetooth_mac_address() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.bluetooth_mac_address)
  return _internal_bluetooth_mac_address();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_bluetooth_mac_address(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00004000u;
  _impl_.bluetooth_mac_address_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.bluetooth_mac_address)
}
inline std::string* GcmDeviceInfo::mutable_bluetooth_mac_address() {
  std::string* _s = _internal_mutable_bluetooth_mac_address();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.bluetooth_mac_address)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_bluetooth_mac_address() const {
  return _impl_.bluetooth_mac_address_.Get();
}
inline void GcmDeviceInfo::_internal_set_bluetooth_mac_address(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00004000u;


  _impl_.bluetooth_mac_address_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_bluetooth_mac_address() {
  _impl_._has_bits_[0] |= 0x00004000u;
  return _impl_.bluetooth_mac_address_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_bluetooth_mac_address() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.bluetooth_mac_address)
  if ((_impl_._has_bits_[0] & 0x00004000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00004000u;
  auto* released = _impl_.bluetooth_mac_address_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_bluetooth_mac_address(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.bluetooth_mac_address_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.bluetooth_mac_address_.IsDefault()) {
          _impl_.bluetooth_mac_address_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.bluetooth_mac_address)
}

// optional bytes device_master_key_hash = 103;
inline bool GcmDeviceInfo::has_device_master_key_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_master_key_hash() {
  _impl_.device_master_key_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const std::string& GcmDeviceInfo::device_master_key_hash() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_master_key_hash)
  return _internal_device_master_key_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_master_key_hash(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.device_master_key_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_master_key_hash)
}
inline std::string* GcmDeviceInfo::mutable_device_master_key_hash() {
  std::string* _s = _internal_mutable_device_master_key_hash();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_master_key_hash)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_master_key_hash() const {
  return _impl_.device_master_key_hash_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_master_key_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00001000u;


  _impl_.device_master_key_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_master_key_hash() {
  _impl_._has_bits_[0] |= 0x00001000u;
  return _impl_.device_master_key_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_master_key_hash() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_master_key_hash)
  if ((_impl_._has_bits_[0] & 0x00001000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00001000u;
  auto* released = _impl_.device_master_key_hash_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_master_key_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_master_key_hash(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.device_master_key_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_master_key_hash_.IsDefault()) {
          _impl_.device_master_key_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_master_key_hash)
}

// required bytes user_public_key = 4;
inline bool GcmDeviceInfo::has_user_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_user_public_key() {
  _impl_.user_public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GcmDeviceInfo::user_public_key() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.user_public_key)
  return _internal_user_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_user_public_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.user_public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.user_public_key)
}
inline std::string* GcmDeviceInfo::mutable_user_public_key() {
  std::string* _s = _internal_mutable_user_public_key();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.user_public_key)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_user_public_key() const {
  return _impl_.user_public_key_.Get();
}
inline void GcmDeviceInfo::_internal_set_user_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.user_public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_user_public_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.user_public_key_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_user_public_key() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.user_public_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.user_public_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.user_public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_user_public_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.user_public_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.user_public_key_.IsDefault()) {
          _impl_.user_public_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.user_public_key)
}

// optional string device_model = 7;
inline bool GcmDeviceInfo::has_device_model() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_model() {
  _impl_.device_model_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GcmDeviceInfo::device_model() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_model)
  return _internal_device_model();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_model(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.device_model_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_model)
}
inline std::string* GcmDeviceInfo::mutable_device_model() {
  std::string* _s = _internal_mutable_device_model();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_model)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_model() const {
  return _impl_.device_model_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_model(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.device_model_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_model() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.device_model_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_model() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_model)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.device_model_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_model_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_model(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.device_model_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_model_.IsDefault()) {
          _impl_.device_model_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_model)
}

// optional string locale = 8;
inline bool GcmDeviceInfo::has_locale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_locale() {
  _impl_.locale_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GcmDeviceInfo::locale() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.locale)
  return _internal_locale();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_locale(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.locale_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.locale)
}
inline std::string* GcmDeviceInfo::mutable_locale() {
  std::string* _s = _internal_mutable_locale();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.locale)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_locale() const {
  return _impl_.locale_.Get();
}
inline void GcmDeviceInfo::_internal_set_locale(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.locale_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_locale() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.locale_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_locale() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.locale)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.locale_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.locale_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_locale(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.locale_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.locale_.IsDefault()) {
          _impl_.locale_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.locale)
}

// optional bytes key_handle = 9;
inline bool GcmDeviceInfo::has_key_handle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_key_handle() {
  _impl_.key_handle_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& GcmDeviceInfo::key_handle() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.key_handle)
  return _internal_key_handle();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_key_handle(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.key_handle_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.key_handle)
}
inline std::string* GcmDeviceInfo::mutable_key_handle() {
  std::string* _s = _internal_mutable_key_handle();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.key_handle)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_key_handle() const {
  return _impl_.key_handle_.Get();
}
inline void GcmDeviceInfo::_internal_set_key_handle(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.key_handle_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_key_handle() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.key_handle_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_key_handle() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.key_handle)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.key_handle_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.key_handle_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_key_handle(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.key_handle_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.key_handle_.IsDefault()) {
          _impl_.key_handle_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.key_handle)
}

// optional int64 counter = 12 [default = 0];
inline bool GcmDeviceInfo::has_counter() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_counter() {
  _impl_.counter_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00040000u;
}
inline ::int64_t GcmDeviceInfo::counter() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.counter)
  return _internal_counter();
}
inline void GcmDeviceInfo::set_counter(::int64_t value) {
  _internal_set_counter(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.counter)
}
inline ::int64_t GcmDeviceInfo::_internal_counter() const {
  return _impl_.counter_;
}
inline void GcmDeviceInfo::_internal_set_counter(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00040000u;
  _impl_.counter_ = value;
}

// optional string device_os_version = 13;
inline bool GcmDeviceInfo::has_device_os_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_os_version() {
  _impl_.device_os_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const std::string& GcmDeviceInfo::device_os_version() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_os_version)
  return _internal_device_os_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_os_version(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.device_os_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_os_version)
}
inline std::string* GcmDeviceInfo::mutable_device_os_version() {
  std::string* _s = _internal_mutable_device_os_version();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_os_version)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_os_version() const {
  return _impl_.device_os_version_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_os_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000010u;


  _impl_.device_os_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_os_version() {
  _impl_._has_bits_[0] |= 0x00000010u;
  return _impl_.device_os_version_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_os_version() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_os_version)
  if ((_impl_._has_bits_[0] & 0x00000010u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000010u;
  auto* released = _impl_.device_os_version_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_os_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_os_version(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.device_os_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_os_version_.IsDefault()) {
          _impl_.device_os_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_os_version)
}

// optional int64 device_os_version_code = 14;
inline bool GcmDeviceInfo::has_device_os_version_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_os_version_code() {
  _impl_.device_os_version_code_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00080000u;
}
inline ::int64_t GcmDeviceInfo::device_os_version_code() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_os_version_code)
  return _internal_device_os_version_code();
}
inline void GcmDeviceInfo::set_device_os_version_code(::int64_t value) {
  _internal_set_device_os_version_code(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_os_version_code)
}
inline ::int64_t GcmDeviceInfo::_internal_device_os_version_code() const {
  return _impl_.device_os_version_code_;
}
inline void GcmDeviceInfo::_internal_set_device_os_version_code(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00080000u;
  _impl_.device_os_version_code_ = value;
}

// optional string device_os_release = 15;
inline bool GcmDeviceInfo::has_device_os_release() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_os_release() {
  _impl_.device_os_release_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const std::string& GcmDeviceInfo::device_os_release() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_os_release)
  return _internal_device_os_release();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_os_release(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.device_os_release_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_os_release)
}
inline std::string* GcmDeviceInfo::mutable_device_os_release() {
  std::string* _s = _internal_mutable_device_os_release();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_os_release)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_os_release() const {
  return _impl_.device_os_release_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_os_release(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000020u;


  _impl_.device_os_release_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_os_release() {
  _impl_._has_bits_[0] |= 0x00000020u;
  return _impl_.device_os_release_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_os_release() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_os_release)
  if ((_impl_._has_bits_[0] & 0x00000020u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000020u;
  auto* released = _impl_.device_os_release_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_os_release_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_os_release(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.device_os_release_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_os_release_.IsDefault()) {
          _impl_.device_os_release_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_os_release)
}

// optional string device_os_codename = 16;
inline bool GcmDeviceInfo::has_device_os_codename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_os_codename() {
  _impl_.device_os_codename_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const std::string& GcmDeviceInfo::device_os_codename() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_os_codename)
  return _internal_device_os_codename();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_os_codename(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.device_os_codename_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_os_codename)
}
inline std::string* GcmDeviceInfo::mutable_device_os_codename() {
  std::string* _s = _internal_mutable_device_os_codename();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_os_codename)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_os_codename() const {
  return _impl_.device_os_codename_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_os_codename(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000040u;


  _impl_.device_os_codename_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_os_codename() {
  _impl_._has_bits_[0] |= 0x00000040u;
  return _impl_.device_os_codename_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_os_codename() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_os_codename)
  if ((_impl_._has_bits_[0] & 0x00000040u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000040u;
  auto* released = _impl_.device_os_codename_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_os_codename_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_os_codename(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.device_os_codename_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_os_codename_.IsDefault()) {
          _impl_.device_os_codename_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_os_codename)
}

// optional string device_software_version = 17;
inline bool GcmDeviceInfo::has_device_software_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_software_version() {
  _impl_.device_software_version_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const std::string& GcmDeviceInfo::device_software_version() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_software_version)
  return _internal_device_software_version();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_software_version(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.device_software_version_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_software_version)
}
inline std::string* GcmDeviceInfo::mutable_device_software_version() {
  std::string* _s = _internal_mutable_device_software_version();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_software_version)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_software_version() const {
  return _impl_.device_software_version_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_software_version(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000080u;


  _impl_.device_software_version_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_software_version() {
  _impl_._has_bits_[0] |= 0x00000080u;
  return _impl_.device_software_version_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_software_version() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_software_version)
  if ((_impl_._has_bits_[0] & 0x00000080u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000080u;
  auto* released = _impl_.device_software_version_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_software_version_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_software_version(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.device_software_version_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_software_version_.IsDefault()) {
          _impl_.device_software_version_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_software_version)
}

// optional int64 device_software_version_code = 18;
inline bool GcmDeviceInfo::has_device_software_version_code() const {
  bool value = (_impl_._has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_software_version_code() {
  _impl_.device_software_version_code_ = ::int64_t{0};
  _impl_._has_bits_[0] &= ~0x00100000u;
}
inline ::int64_t GcmDeviceInfo::device_software_version_code() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_software_version_code)
  return _internal_device_software_version_code();
}
inline void GcmDeviceInfo::set_device_software_version_code(::int64_t value) {
  _internal_set_device_software_version_code(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_software_version_code)
}
inline ::int64_t GcmDeviceInfo::_internal_device_software_version_code() const {
  return _impl_.device_software_version_code_;
}
inline void GcmDeviceInfo::_internal_set_device_software_version_code(::int64_t value) {
  _impl_._has_bits_[0] |= 0x00100000u;
  _impl_.device_software_version_code_ = value;
}

// optional string device_software_package = 19;
inline bool GcmDeviceInfo::has_device_software_package() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_software_package() {
  _impl_.device_software_package_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const std::string& GcmDeviceInfo::device_software_package() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_software_package)
  return _internal_device_software_package();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_software_package(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.device_software_package_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_software_package)
}
inline std::string* GcmDeviceInfo::mutable_device_software_package() {
  std::string* _s = _internal_mutable_device_software_package();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_software_package)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_software_package() const {
  return _impl_.device_software_package_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_software_package(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000100u;


  _impl_.device_software_package_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_software_package() {
  _impl_._has_bits_[0] |= 0x00000100u;
  return _impl_.device_software_package_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_software_package() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_software_package)
  if ((_impl_._has_bits_[0] & 0x00000100u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000100u;
  auto* released = _impl_.device_software_package_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_software_package_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_software_package(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.device_software_package_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_software_package_.IsDefault()) {
          _impl_.device_software_package_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_software_package)
}

// optional int32 device_display_diagonal_mils = 22;
inline bool GcmDeviceInfo::has_device_display_diagonal_mils() const {
  bool value = (_impl_._has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_display_diagonal_mils() {
  _impl_.device_display_diagonal_mils_ = 0;
  _impl_._has_bits_[0] &= ~0x00200000u;
}
inline ::int32_t GcmDeviceInfo::device_display_diagonal_mils() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_display_diagonal_mils)
  return _internal_device_display_diagonal_mils();
}
inline void GcmDeviceInfo::set_device_display_diagonal_mils(::int32_t value) {
  _internal_set_device_display_diagonal_mils(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_display_diagonal_mils)
}
inline ::int32_t GcmDeviceInfo::_internal_device_display_diagonal_mils() const {
  return _impl_.device_display_diagonal_mils_;
}
inline void GcmDeviceInfo::_internal_set_device_display_diagonal_mils(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00200000u;
  _impl_.device_display_diagonal_mils_ = value;
}

// optional int32 device_authzen_version = 24;
inline bool GcmDeviceInfo::has_device_authzen_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_authzen_version() {
  _impl_.device_authzen_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00400000u;
}
inline ::int32_t GcmDeviceInfo::device_authzen_version() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_authzen_version)
  return _internal_device_authzen_version();
}
inline void GcmDeviceInfo::set_device_authzen_version(::int32_t value) {
  _internal_set_device_authzen_version(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_authzen_version)
}
inline ::int32_t GcmDeviceInfo::_internal_device_authzen_version() const {
  return _impl_.device_authzen_version_;
}
inline void GcmDeviceInfo::_internal_set_device_authzen_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00400000u;
  _impl_.device_authzen_version_ = value;
}

// optional bytes long_device_id = 29;
inline bool GcmDeviceInfo::has_long_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_long_device_id() {
  _impl_.long_device_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const std::string& GcmDeviceInfo::long_device_id() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.long_device_id)
  return _internal_long_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_long_device_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.long_device_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.long_device_id)
}
inline std::string* GcmDeviceInfo::mutable_long_device_id() {
  std::string* _s = _internal_mutable_long_device_id();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.long_device_id)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_long_device_id() const {
  return _impl_.long_device_id_.Get();
}
inline void GcmDeviceInfo::_internal_set_long_device_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000200u;


  _impl_.long_device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_long_device_id() {
  _impl_._has_bits_[0] |= 0x00000200u;
  return _impl_.long_device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_long_device_id() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.long_device_id)
  if ((_impl_._has_bits_[0] & 0x00000200u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000200u;
  auto* released = _impl_.long_device_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.long_device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_long_device_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.long_device_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.long_device_id_.IsDefault()) {
          _impl_.long_device_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.long_device_id)
}

// optional string device_manufacturer = 31;
inline bool GcmDeviceInfo::has_device_manufacturer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_manufacturer() {
  _impl_.device_manufacturer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const std::string& GcmDeviceInfo::device_manufacturer() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_manufacturer)
  return _internal_device_manufacturer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_device_manufacturer(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.device_manufacturer_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_manufacturer)
}
inline std::string* GcmDeviceInfo::mutable_device_manufacturer() {
  std::string* _s = _internal_mutable_device_manufacturer();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.device_manufacturer)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_device_manufacturer() const {
  return _impl_.device_manufacturer_.Get();
}
inline void GcmDeviceInfo::_internal_set_device_manufacturer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000400u;


  _impl_.device_manufacturer_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_device_manufacturer() {
  _impl_._has_bits_[0] |= 0x00000400u;
  return _impl_.device_manufacturer_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_device_manufacturer() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.device_manufacturer)
  if ((_impl_._has_bits_[0] & 0x00000400u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000400u;
  auto* released = _impl_.device_manufacturer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_manufacturer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_device_manufacturer(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.device_manufacturer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_manufacturer_.IsDefault()) {
          _impl_.device_manufacturer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.device_manufacturer)
}

// optional .securegcm.DeviceType device_type = 32 [default = ANDROID];
inline bool GcmDeviceInfo::has_device_type() const {
  bool value = (_impl_._has_bits_[1] & 0x00000004u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_device_type() {
  _impl_.device_type_ = 1;
  _impl_._has_bits_[1] &= ~0x00000004u;
}
inline ::securegcm::DeviceType GcmDeviceInfo::device_type() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.device_type)
  return _internal_device_type();
}
inline void GcmDeviceInfo::set_device_type(::securegcm::DeviceType value) {
   _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.device_type)
}
inline ::securegcm::DeviceType GcmDeviceInfo::_internal_device_type() const {
  return static_cast<::securegcm::DeviceType>(_impl_.device_type_);
}
inline void GcmDeviceInfo::_internal_set_device_type(::securegcm::DeviceType value) {
  assert(::securegcm::DeviceType_IsValid(value));
  _impl_._has_bits_[1] |= 0x00000004u;
  _impl_.device_type_ = value;
}

// optional bool using_secure_screenlock = 400 [default = false];
inline bool GcmDeviceInfo::has_using_secure_screenlock() const {
  bool value = (_impl_._has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_using_secure_screenlock() {
  _impl_.using_secure_screenlock_ = false;
  _impl_._has_bits_[0] &= ~0x00800000u;
}
inline bool GcmDeviceInfo::using_secure_screenlock() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.using_secure_screenlock)
  return _internal_using_secure_screenlock();
}
inline void GcmDeviceInfo::set_using_secure_screenlock(bool value) {
  _internal_set_using_secure_screenlock(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.using_secure_screenlock)
}
inline bool GcmDeviceInfo::_internal_using_secure_screenlock() const {
  return _impl_.using_secure_screenlock_;
}
inline void GcmDeviceInfo::_internal_set_using_secure_screenlock(bool value) {
  _impl_._has_bits_[0] |= 0x00800000u;
  _impl_.using_secure_screenlock_ = value;
}

// optional bool auto_unlock_screenlock_supported = 401 [default = false];
inline bool GcmDeviceInfo::has_auto_unlock_screenlock_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_auto_unlock_screenlock_supported() {
  _impl_.auto_unlock_screenlock_supported_ = false;
  _impl_._has_bits_[0] &= ~0x01000000u;
}
inline bool GcmDeviceInfo::auto_unlock_screenlock_supported() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.auto_unlock_screenlock_supported)
  return _internal_auto_unlock_screenlock_supported();
}
inline void GcmDeviceInfo::set_auto_unlock_screenlock_supported(bool value) {
  _internal_set_auto_unlock_screenlock_supported(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.auto_unlock_screenlock_supported)
}
inline bool GcmDeviceInfo::_internal_auto_unlock_screenlock_supported() const {
  return _impl_.auto_unlock_screenlock_supported_;
}
inline void GcmDeviceInfo::_internal_set_auto_unlock_screenlock_supported(bool value) {
  _impl_._has_bits_[0] |= 0x01000000u;
  _impl_.auto_unlock_screenlock_supported_ = value;
}

// optional bool auto_unlock_screenlock_enabled = 402 [default = false];
inline bool GcmDeviceInfo::has_auto_unlock_screenlock_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_auto_unlock_screenlock_enabled() {
  _impl_.auto_unlock_screenlock_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x02000000u;
}
inline bool GcmDeviceInfo::auto_unlock_screenlock_enabled() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.auto_unlock_screenlock_enabled)
  return _internal_auto_unlock_screenlock_enabled();
}
inline void GcmDeviceInfo::set_auto_unlock_screenlock_enabled(bool value) {
  _internal_set_auto_unlock_screenlock_enabled(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.auto_unlock_screenlock_enabled)
}
inline bool GcmDeviceInfo::_internal_auto_unlock_screenlock_enabled() const {
  return _impl_.auto_unlock_screenlock_enabled_;
}
inline void GcmDeviceInfo::_internal_set_auto_unlock_screenlock_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x02000000u;
  _impl_.auto_unlock_screenlock_enabled_ = value;
}

// optional bool bluetooth_radio_supported = 403 [default = false];
inline bool GcmDeviceInfo::has_bluetooth_radio_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_bluetooth_radio_supported() {
  _impl_.bluetooth_radio_supported_ = false;
  _impl_._has_bits_[0] &= ~0x04000000u;
}
inline bool GcmDeviceInfo::bluetooth_radio_supported() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.bluetooth_radio_supported)
  return _internal_bluetooth_radio_supported();
}
inline void GcmDeviceInfo::set_bluetooth_radio_supported(bool value) {
  _internal_set_bluetooth_radio_supported(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.bluetooth_radio_supported)
}
inline bool GcmDeviceInfo::_internal_bluetooth_radio_supported() const {
  return _impl_.bluetooth_radio_supported_;
}
inline void GcmDeviceInfo::_internal_set_bluetooth_radio_supported(bool value) {
  _impl_._has_bits_[0] |= 0x04000000u;
  _impl_.bluetooth_radio_supported_ = value;
}

// optional bool bluetooth_radio_enabled = 404 [default = false];
inline bool GcmDeviceInfo::has_bluetooth_radio_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_bluetooth_radio_enabled() {
  _impl_.bluetooth_radio_enabled_ = false;
  _impl_._has_bits_[0] &= ~0x08000000u;
}
inline bool GcmDeviceInfo::bluetooth_radio_enabled() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.bluetooth_radio_enabled)
  return _internal_bluetooth_radio_enabled();
}
inline void GcmDeviceInfo::set_bluetooth_radio_enabled(bool value) {
  _internal_set_bluetooth_radio_enabled(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.bluetooth_radio_enabled)
}
inline bool GcmDeviceInfo::_internal_bluetooth_radio_enabled() const {
  return _impl_.bluetooth_radio_enabled_;
}
inline void GcmDeviceInfo::_internal_set_bluetooth_radio_enabled(bool value) {
  _impl_._has_bits_[0] |= 0x08000000u;
  _impl_.bluetooth_radio_enabled_ = value;
}

// optional bool mobile_data_supported = 405 [default = false];
inline bool GcmDeviceInfo::has_mobile_data_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_mobile_data_supported() {
  _impl_.mobile_data_supported_ = false;
  _impl_._has_bits_[0] &= ~0x10000000u;
}
inline bool GcmDeviceInfo::mobile_data_supported() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.mobile_data_supported)
  return _internal_mobile_data_supported();
}
inline void GcmDeviceInfo::set_mobile_data_supported(bool value) {
  _internal_set_mobile_data_supported(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.mobile_data_supported)
}
inline bool GcmDeviceInfo::_internal_mobile_data_supported() const {
  return _impl_.mobile_data_supported_;
}
inline void GcmDeviceInfo::_internal_set_mobile_data_supported(bool value) {
  _impl_._has_bits_[0] |= 0x10000000u;
  _impl_.mobile_data_supported_ = value;
}

// optional bool tethering_supported = 406 [default = false];
inline bool GcmDeviceInfo::has_tethering_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_tethering_supported() {
  _impl_.tethering_supported_ = false;
  _impl_._has_bits_[0] &= ~0x20000000u;
}
inline bool GcmDeviceInfo::tethering_supported() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.tethering_supported)
  return _internal_tethering_supported();
}
inline void GcmDeviceInfo::set_tethering_supported(bool value) {
  _internal_set_tethering_supported(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.tethering_supported)
}
inline bool GcmDeviceInfo::_internal_tethering_supported() const {
  return _impl_.tethering_supported_;
}
inline void GcmDeviceInfo::_internal_set_tethering_supported(bool value) {
  _impl_._has_bits_[0] |= 0x20000000u;
  _impl_.tethering_supported_ = value;
}

// optional bool ble_radio_supported = 407 [default = false];
inline bool GcmDeviceInfo::has_ble_radio_supported() const {
  bool value = (_impl_._has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_ble_radio_supported() {
  _impl_.ble_radio_supported_ = false;
  _impl_._has_bits_[0] &= ~0x40000000u;
}
inline bool GcmDeviceInfo::ble_radio_supported() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.ble_radio_supported)
  return _internal_ble_radio_supported();
}
inline void GcmDeviceInfo::set_ble_radio_supported(bool value) {
  _internal_set_ble_radio_supported(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.ble_radio_supported)
}
inline bool GcmDeviceInfo::_internal_ble_radio_supported() const {
  return _impl_.ble_radio_supported_;
}
inline void GcmDeviceInfo::_internal_set_ble_radio_supported(bool value) {
  _impl_._has_bits_[0] |= 0x40000000u;
  _impl_.ble_radio_supported_ = value;
}

// optional bool pixel_experience = 408 [default = false];
inline bool GcmDeviceInfo::has_pixel_experience() const {
  bool value = (_impl_._has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_pixel_experience() {
  _impl_.pixel_experience_ = false;
  _impl_._has_bits_[0] &= ~0x80000000u;
}
inline bool GcmDeviceInfo::pixel_experience() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.pixel_experience)
  return _internal_pixel_experience();
}
inline void GcmDeviceInfo::set_pixel_experience(bool value) {
  _internal_set_pixel_experience(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.pixel_experience)
}
inline bool GcmDeviceInfo::_internal_pixel_experience() const {
  return _impl_.pixel_experience_;
}
inline void GcmDeviceInfo::_internal_set_pixel_experience(bool value) {
  _impl_._has_bits_[0] |= 0x80000000u;
  _impl_.pixel_experience_ = value;
}

// optional bool arc_plus_plus = 409 [default = false];
inline bool GcmDeviceInfo::has_arc_plus_plus() const {
  bool value = (_impl_._has_bits_[1] & 0x00000001u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_arc_plus_plus() {
  _impl_.arc_plus_plus_ = false;
  _impl_._has_bits_[1] &= ~0x00000001u;
}
inline bool GcmDeviceInfo::arc_plus_plus() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.arc_plus_plus)
  return _internal_arc_plus_plus();
}
inline void GcmDeviceInfo::set_arc_plus_plus(bool value) {
  _internal_set_arc_plus_plus(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.arc_plus_plus)
}
inline bool GcmDeviceInfo::_internal_arc_plus_plus() const {
  return _impl_.arc_plus_plus_;
}
inline void GcmDeviceInfo::_internal_set_arc_plus_plus(bool value) {
  _impl_._has_bits_[1] |= 0x00000001u;
  _impl_.arc_plus_plus_ = value;
}

// optional bool is_screenlock_state_flaky = 410 [default = false];
inline bool GcmDeviceInfo::has_is_screenlock_state_flaky() const {
  bool value = (_impl_._has_bits_[1] & 0x00000002u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_is_screenlock_state_flaky() {
  _impl_.is_screenlock_state_flaky_ = false;
  _impl_._has_bits_[1] &= ~0x00000002u;
}
inline bool GcmDeviceInfo::is_screenlock_state_flaky() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.is_screenlock_state_flaky)
  return _internal_is_screenlock_state_flaky();
}
inline void GcmDeviceInfo::set_is_screenlock_state_flaky(bool value) {
  _internal_set_is_screenlock_state_flaky(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.is_screenlock_state_flaky)
}
inline bool GcmDeviceInfo::_internal_is_screenlock_state_flaky() const {
  return _impl_.is_screenlock_state_flaky_;
}
inline void GcmDeviceInfo::_internal_set_is_screenlock_state_flaky(bool value) {
  _impl_._has_bits_[1] |= 0x00000002u;
  _impl_.is_screenlock_state_flaky_ = value;
}

// repeated .securegcm.SoftwareFeature supported_software_features = 411;
inline int GcmDeviceInfo::_internal_supported_software_features_size() const {
  return _impl_.supported_software_features_.size();
}
inline int GcmDeviceInfo::supported_software_features_size() const {
  return _internal_supported_software_features_size();
}
inline void GcmDeviceInfo::clear_supported_software_features() {
  _internal_mutable_supported_software_features()->Clear();
}
inline ::securegcm::SoftwareFeature GcmDeviceInfo::supported_software_features(int index) const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.supported_software_features)
  return _internal_supported_software_features(index);
}
inline void GcmDeviceInfo::set_supported_software_features(int index, ::securegcm::SoftwareFeature value) {
  assert(::securegcm::SoftwareFeature_IsValid(value));
  _internal_mutable_supported_software_features()->Set(index, value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.supported_software_features)
}
inline void GcmDeviceInfo::add_supported_software_features(::securegcm::SoftwareFeature value) {
  _internal_add_supported_software_features(value);
  // @@protoc_insertion_point(field_add:securegcm.GcmDeviceInfo.supported_software_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GcmDeviceInfo::supported_software_features() const {
  // @@protoc_insertion_point(field_list:securegcm.GcmDeviceInfo.supported_software_features)
  return _internal_supported_software_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GcmDeviceInfo::mutable_supported_software_features() {
  // @@protoc_insertion_point(field_mutable_list:securegcm.GcmDeviceInfo.supported_software_features)
  return _internal_mutable_supported_software_features();
}
inline ::securegcm::SoftwareFeature GcmDeviceInfo::_internal_supported_software_features(int index) const {
  return static_cast<::securegcm::SoftwareFeature>(_internal_supported_software_features().Get(index));
}
inline void GcmDeviceInfo::_internal_add_supported_software_features(::securegcm::SoftwareFeature value) {
  assert(::securegcm::SoftwareFeature_IsValid(value));
  _internal_mutable_supported_software_features()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GcmDeviceInfo::_internal_supported_software_features() const {
  return _impl_.supported_software_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GcmDeviceInfo::_internal_mutable_supported_software_features() {
  return &_impl_.supported_software_features_;
}

// repeated .securegcm.SoftwareFeature enabled_software_features = 412;
inline int GcmDeviceInfo::_internal_enabled_software_features_size() const {
  return _impl_.enabled_software_features_.size();
}
inline int GcmDeviceInfo::enabled_software_features_size() const {
  return _internal_enabled_software_features_size();
}
inline void GcmDeviceInfo::clear_enabled_software_features() {
  _internal_mutable_enabled_software_features()->Clear();
}
inline ::securegcm::SoftwareFeature GcmDeviceInfo::enabled_software_features(int index) const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.enabled_software_features)
  return _internal_enabled_software_features(index);
}
inline void GcmDeviceInfo::set_enabled_software_features(int index, ::securegcm::SoftwareFeature value) {
  assert(::securegcm::SoftwareFeature_IsValid(value));
  _internal_mutable_enabled_software_features()->Set(index, value);
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.enabled_software_features)
}
inline void GcmDeviceInfo::add_enabled_software_features(::securegcm::SoftwareFeature value) {
  _internal_add_enabled_software_features(value);
  // @@protoc_insertion_point(field_add:securegcm.GcmDeviceInfo.enabled_software_features)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GcmDeviceInfo::enabled_software_features() const {
  // @@protoc_insertion_point(field_list:securegcm.GcmDeviceInfo.enabled_software_features)
  return _internal_enabled_software_features();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GcmDeviceInfo::mutable_enabled_software_features() {
  // @@protoc_insertion_point(field_mutable_list:securegcm.GcmDeviceInfo.enabled_software_features)
  return _internal_mutable_enabled_software_features();
}
inline ::securegcm::SoftwareFeature GcmDeviceInfo::_internal_enabled_software_features(int index) const {
  return static_cast<::securegcm::SoftwareFeature>(_internal_enabled_software_features().Get(index));
}
inline void GcmDeviceInfo::_internal_add_enabled_software_features(::securegcm::SoftwareFeature value) {
  assert(::securegcm::SoftwareFeature_IsValid(value));
  _internal_mutable_enabled_software_features()->Add(value);
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& GcmDeviceInfo::_internal_enabled_software_features() const {
  return _impl_.enabled_software_features_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* GcmDeviceInfo::_internal_mutable_enabled_software_features() {
  return &_impl_.enabled_software_features_;
}

// optional bytes enrollment_session_id = 1000;
inline bool GcmDeviceInfo::has_enrollment_session_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_enrollment_session_id() {
  _impl_.enrollment_session_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const std::string& GcmDeviceInfo::enrollment_session_id() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.enrollment_session_id)
  return _internal_enrollment_session_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_enrollment_session_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00008000u;
  _impl_.enrollment_session_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.enrollment_session_id)
}
inline std::string* GcmDeviceInfo::mutable_enrollment_session_id() {
  std::string* _s = _internal_mutable_enrollment_session_id();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.enrollment_session_id)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_enrollment_session_id() const {
  return _impl_.enrollment_session_id_.Get();
}
inline void GcmDeviceInfo::_internal_set_enrollment_session_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00008000u;


  _impl_.enrollment_session_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_enrollment_session_id() {
  _impl_._has_bits_[0] |= 0x00008000u;
  return _impl_.enrollment_session_id_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_enrollment_session_id() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.enrollment_session_id)
  if ((_impl_._has_bits_[0] & 0x00008000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00008000u;
  auto* released = _impl_.enrollment_session_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.enrollment_session_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_enrollment_session_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.enrollment_session_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.enrollment_session_id_.IsDefault()) {
          _impl_.enrollment_session_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.enrollment_session_id)
}

// optional string oauth_token = 1001;
inline bool GcmDeviceInfo::has_oauth_token() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline void GcmDeviceInfo::clear_oauth_token() {
  _impl_.oauth_token_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const std::string& GcmDeviceInfo::oauth_token() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmDeviceInfo.oauth_token)
  return _internal_oauth_token();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GcmDeviceInfo::set_oauth_token(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00010000u;
  _impl_.oauth_token_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.GcmDeviceInfo.oauth_token)
}
inline std::string* GcmDeviceInfo::mutable_oauth_token() {
  std::string* _s = _internal_mutable_oauth_token();
  // @@protoc_insertion_point(field_mutable:securegcm.GcmDeviceInfo.oauth_token)
  return _s;
}
inline const std::string& GcmDeviceInfo::_internal_oauth_token() const {
  return _impl_.oauth_token_.Get();
}
inline void GcmDeviceInfo::_internal_set_oauth_token(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00010000u;


  _impl_.oauth_token_.Set(value, GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::_internal_mutable_oauth_token() {
  _impl_._has_bits_[0] |= 0x00010000u;
  return _impl_.oauth_token_.Mutable( GetArenaForAllocation());
}
inline std::string* GcmDeviceInfo::release_oauth_token() {
  // @@protoc_insertion_point(field_release:securegcm.GcmDeviceInfo.oauth_token)
  if ((_impl_._has_bits_[0] & 0x00010000u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00010000u;
  auto* released = _impl_.oauth_token_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.oauth_token_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GcmDeviceInfo::set_allocated_oauth_token(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.oauth_token_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.oauth_token_.IsDefault()) {
          _impl_.oauth_token_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.GcmDeviceInfo.oauth_token)
}

// -------------------------------------------------------------------

// GcmMetadata

// required .securegcm.Type type = 1;
inline bool GcmMetadata::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GcmMetadata::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::securegcm::Type GcmMetadata::type() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmMetadata.type)
  return _internal_type();
}
inline void GcmMetadata::set_type(::securegcm::Type value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmMetadata.type)
}
inline ::securegcm::Type GcmMetadata::_internal_type() const {
  return static_cast<::securegcm::Type>(_impl_.type_);
}
inline void GcmMetadata::_internal_set_type(::securegcm::Type value) {
  assert(::securegcm::Type_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.type_ = value;
}

// optional int32 version = 2 [default = 0];
inline bool GcmMetadata::has_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GcmMetadata::clear_version() {
  _impl_.version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t GcmMetadata::version() const {
  // @@protoc_insertion_point(field_get:securegcm.GcmMetadata.version)
  return _internal_version();
}
inline void GcmMetadata::set_version(::int32_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:securegcm.GcmMetadata.version)
}
inline ::int32_t GcmMetadata::_internal_version() const {
  return _impl_.version_;
}
inline void GcmMetadata::_internal_set_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.version_ = value;
}

// -------------------------------------------------------------------

// Tickle

// optional fixed64 expiry_time = 1;
inline bool Tickle::has_expiry_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Tickle::clear_expiry_time() {
  _impl_.expiry_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint64_t Tickle::expiry_time() const {
  // @@protoc_insertion_point(field_get:securegcm.Tickle.expiry_time)
  return _internal_expiry_time();
}
inline void Tickle::set_expiry_time(::uint64_t value) {
  _internal_set_expiry_time(value);
  // @@protoc_insertion_point(field_set:securegcm.Tickle.expiry_time)
}
inline ::uint64_t Tickle::_internal_expiry_time() const {
  return _impl_.expiry_time_;
}
inline void Tickle::_internal_set_expiry_time(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.expiry_time_ = value;
}

// -------------------------------------------------------------------

// LoginNotificationInfo

// optional fixed64 creation_time = 2;
inline bool LoginNotificationInfo::has_creation_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void LoginNotificationInfo::clear_creation_time() {
  _impl_.creation_time_ = ::uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint64_t LoginNotificationInfo::creation_time() const {
  // @@protoc_insertion_point(field_get:securegcm.LoginNotificationInfo.creation_time)
  return _internal_creation_time();
}
inline void LoginNotificationInfo::set_creation_time(::uint64_t value) {
  _internal_set_creation_time(value);
  // @@protoc_insertion_point(field_set:securegcm.LoginNotificationInfo.creation_time)
}
inline ::uint64_t LoginNotificationInfo::_internal_creation_time() const {
  return _impl_.creation_time_;
}
inline void LoginNotificationInfo::_internal_set_creation_time(::uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.creation_time_ = value;
}

// optional string email = 3;
inline bool LoginNotificationInfo::has_email() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void LoginNotificationInfo::clear_email() {
  _impl_.email_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& LoginNotificationInfo::email() const {
  // @@protoc_insertion_point(field_get:securegcm.LoginNotificationInfo.email)
  return _internal_email();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginNotificationInfo::set_email(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.email_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.LoginNotificationInfo.email)
}
inline std::string* LoginNotificationInfo::mutable_email() {
  std::string* _s = _internal_mutable_email();
  // @@protoc_insertion_point(field_mutable:securegcm.LoginNotificationInfo.email)
  return _s;
}
inline const std::string& LoginNotificationInfo::_internal_email() const {
  return _impl_.email_.Get();
}
inline void LoginNotificationInfo::_internal_set_email(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.email_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::_internal_mutable_email() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.email_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::release_email() {
  // @@protoc_insertion_point(field_release:securegcm.LoginNotificationInfo.email)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.email_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.email_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LoginNotificationInfo::set_allocated_email(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.email_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.email_.IsDefault()) {
          _impl_.email_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.LoginNotificationInfo.email)
}

// optional string host = 4;
inline bool LoginNotificationInfo::has_host() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void LoginNotificationInfo::clear_host() {
  _impl_.host_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& LoginNotificationInfo::host() const {
  // @@protoc_insertion_point(field_get:securegcm.LoginNotificationInfo.host)
  return _internal_host();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginNotificationInfo::set_host(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.host_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.LoginNotificationInfo.host)
}
inline std::string* LoginNotificationInfo::mutable_host() {
  std::string* _s = _internal_mutable_host();
  // @@protoc_insertion_point(field_mutable:securegcm.LoginNotificationInfo.host)
  return _s;
}
inline const std::string& LoginNotificationInfo::_internal_host() const {
  return _impl_.host_.Get();
}
inline void LoginNotificationInfo::_internal_set_host(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.host_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::_internal_mutable_host() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.host_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::release_host() {
  // @@protoc_insertion_point(field_release:securegcm.LoginNotificationInfo.host)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.host_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.host_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LoginNotificationInfo::set_allocated_host(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.host_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.host_.IsDefault()) {
          _impl_.host_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.LoginNotificationInfo.host)
}

// optional string source = 5;
inline bool LoginNotificationInfo::has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void LoginNotificationInfo::clear_source() {
  _impl_.source_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& LoginNotificationInfo::source() const {
  // @@protoc_insertion_point(field_get:securegcm.LoginNotificationInfo.source)
  return _internal_source();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginNotificationInfo::set_source(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.source_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.LoginNotificationInfo.source)
}
inline std::string* LoginNotificationInfo::mutable_source() {
  std::string* _s = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:securegcm.LoginNotificationInfo.source)
  return _s;
}
inline const std::string& LoginNotificationInfo::_internal_source() const {
  return _impl_.source_.Get();
}
inline void LoginNotificationInfo::_internal_set_source(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.source_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.source_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::release_source() {
  // @@protoc_insertion_point(field_release:securegcm.LoginNotificationInfo.source)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.source_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.source_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LoginNotificationInfo::set_allocated_source(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.source_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.source_.IsDefault()) {
          _impl_.source_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.LoginNotificationInfo.source)
}

// optional string event_type = 6;
inline bool LoginNotificationInfo::has_event_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void LoginNotificationInfo::clear_event_type() {
  _impl_.event_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const std::string& LoginNotificationInfo::event_type() const {
  // @@protoc_insertion_point(field_get:securegcm.LoginNotificationInfo.event_type)
  return _internal_event_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LoginNotificationInfo::set_event_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.event_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.LoginNotificationInfo.event_type)
}
inline std::string* LoginNotificationInfo::mutable_event_type() {
  std::string* _s = _internal_mutable_event_type();
  // @@protoc_insertion_point(field_mutable:securegcm.LoginNotificationInfo.event_type)
  return _s;
}
inline const std::string& LoginNotificationInfo::_internal_event_type() const {
  return _impl_.event_type_.Get();
}
inline void LoginNotificationInfo::_internal_set_event_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000008u;


  _impl_.event_type_.Set(value, GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::_internal_mutable_event_type() {
  _impl_._has_bits_[0] |= 0x00000008u;
  return _impl_.event_type_.Mutable( GetArenaForAllocation());
}
inline std::string* LoginNotificationInfo::release_event_type() {
  // @@protoc_insertion_point(field_release:securegcm.LoginNotificationInfo.event_type)
  if ((_impl_._has_bits_[0] & 0x00000008u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000008u;
  auto* released = _impl_.event_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.event_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void LoginNotificationInfo::set_allocated_event_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.event_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.event_type_.IsDefault()) {
          _impl_.event_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.LoginNotificationInfo.event_type)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace securegcm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::securegcm::AppleDeviceDiagonalMils> : std::true_type {};
template <>
struct is_proto_enum<::securegcm::DeviceType> : std::true_type {};
template <>
struct is_proto_enum<::securegcm::SoftwareFeature> : std::true_type {};
template <>
struct is_proto_enum<::securegcm::InvocationReason> : std::true_type {};
template <>
struct is_proto_enum<::securegcm::Type> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_securegcm_2eproto_2epb_2eh
