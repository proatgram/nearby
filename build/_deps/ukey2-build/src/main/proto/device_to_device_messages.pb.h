// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_to_device_messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_device_5fto_5fdevice_5fmessages_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_device_5fto_5fdevice_5fmessages_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
#include "securemessage.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_device_5fto_5fdevice_5fmessages_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_device_5fto_5fdevice_5fmessages_2eproto {
  static const ::uint32_t offsets[];
};
namespace securegcm {
class DeviceToDeviceMessage;
struct DeviceToDeviceMessageDefaultTypeInternal;
extern DeviceToDeviceMessageDefaultTypeInternal _DeviceToDeviceMessage_default_instance_;
class EcPoint;
struct EcPointDefaultTypeInternal;
extern EcPointDefaultTypeInternal _EcPoint_default_instance_;
class InitiatorHello;
struct InitiatorHelloDefaultTypeInternal;
extern InitiatorHelloDefaultTypeInternal _InitiatorHello_default_instance_;
class ResponderHello;
struct ResponderHelloDefaultTypeInternal;
extern ResponderHelloDefaultTypeInternal _ResponderHello_default_instance_;
class SpakeHandshakeMessage;
struct SpakeHandshakeMessageDefaultTypeInternal;
extern SpakeHandshakeMessageDefaultTypeInternal _SpakeHandshakeMessage_default_instance_;
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template <>
::securegcm::DeviceToDeviceMessage* Arena::CreateMaybeMessage<::securegcm::DeviceToDeviceMessage>(Arena*);
template <>
::securegcm::EcPoint* Arena::CreateMaybeMessage<::securegcm::EcPoint>(Arena*);
template <>
::securegcm::InitiatorHello* Arena::CreateMaybeMessage<::securegcm::InitiatorHello>(Arena*);
template <>
::securegcm::ResponderHello* Arena::CreateMaybeMessage<::securegcm::ResponderHello>(Arena*);
template <>
::securegcm::SpakeHandshakeMessage* Arena::CreateMaybeMessage<::securegcm::SpakeHandshakeMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace securegcm {
enum Curve : int {
  ED_25519 = 1,
};

bool Curve_IsValid(int value);
constexpr Curve Curve_MIN = static_cast<Curve>(1);
constexpr Curve Curve_MAX = static_cast<Curve>(1);
constexpr int Curve_ARRAYSIZE = 1 + 1;
const std::string& Curve_Name(Curve value);
template <typename T>
const std::string& Curve_Name(T value) {
  static_assert(std::is_same<T, Curve>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to Curve_Name().");
  return Curve_Name(static_cast<Curve>(value));
}
const std::string& Curve_Name(Curve value);
bool Curve_Parse(absl::string_view name, Curve* value);

// ===================================================================


// -------------------------------------------------------------------

class DeviceToDeviceMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.DeviceToDeviceMessage) */ {
 public:
  inline DeviceToDeviceMessage() : DeviceToDeviceMessage(nullptr) {}
  ~DeviceToDeviceMessage() override;
  explicit PROTOBUF_CONSTEXPR DeviceToDeviceMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceToDeviceMessage(const DeviceToDeviceMessage& from);
  DeviceToDeviceMessage(DeviceToDeviceMessage&& from) noexcept
    : DeviceToDeviceMessage() {
    *this = ::std::move(from);
  }

  inline DeviceToDeviceMessage& operator=(const DeviceToDeviceMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceToDeviceMessage& operator=(DeviceToDeviceMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DeviceToDeviceMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceToDeviceMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceToDeviceMessage*>(
               &_DeviceToDeviceMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DeviceToDeviceMessage& a, DeviceToDeviceMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceToDeviceMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceToDeviceMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeviceToDeviceMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeviceToDeviceMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DeviceToDeviceMessage& from);
  void MergeFrom(const DeviceToDeviceMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceToDeviceMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.DeviceToDeviceMessage";
  }
  protected:
  explicit DeviceToDeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
    kSequenceNumberFieldNumber = 2,
  };
  // optional bytes message = 1;
  bool has_message() const;
  void clear_message() ;
  const std::string& message() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_message(Arg_&& arg, Args_... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* ptr);

  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(
      const std::string& value);
  std::string* _internal_mutable_message();

  public:
  // optional int32 sequence_number = 2;
  bool has_sequence_number() const;
  void clear_sequence_number() ;
  ::int32_t sequence_number() const;
  void set_sequence_number(::int32_t value);

  private:
  ::int32_t _internal_sequence_number() const;
  void _internal_set_sequence_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.DeviceToDeviceMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    ::int32_t sequence_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fto_5fdevice_5fmessages_2eproto;
};// -------------------------------------------------------------------

class InitiatorHello final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.InitiatorHello) */ {
 public:
  inline InitiatorHello() : InitiatorHello(nullptr) {}
  ~InitiatorHello() override;
  explicit PROTOBUF_CONSTEXPR InitiatorHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InitiatorHello(const InitiatorHello& from);
  InitiatorHello(InitiatorHello&& from) noexcept
    : InitiatorHello() {
    *this = ::std::move(from);
  }

  inline InitiatorHello& operator=(const InitiatorHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiatorHello& operator=(InitiatorHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const InitiatorHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const InitiatorHello* internal_default_instance() {
    return reinterpret_cast<const InitiatorHello*>(
               &_InitiatorHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InitiatorHello& a, InitiatorHello& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiatorHello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiatorHello* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InitiatorHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InitiatorHello>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const InitiatorHello& from);
  void MergeFrom(const InitiatorHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InitiatorHello* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.InitiatorHello";
  }
  protected:
  explicit InitiatorHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicDhKeyFieldNumber = 1,
    kProtocolVersionFieldNumber = 2,
  };
  // optional .securemessage.GenericPublicKey public_dh_key = 1;
  bool has_public_dh_key() const;
  void clear_public_dh_key() ;
  const ::securemessage::GenericPublicKey& public_dh_key() const;
  PROTOBUF_NODISCARD ::securemessage::GenericPublicKey* release_public_dh_key();
  ::securemessage::GenericPublicKey* mutable_public_dh_key();
  void set_allocated_public_dh_key(::securemessage::GenericPublicKey* public_dh_key);
  private:
  const ::securemessage::GenericPublicKey& _internal_public_dh_key() const;
  ::securemessage::GenericPublicKey* _internal_mutable_public_dh_key();
  public:
  void unsafe_arena_set_allocated_public_dh_key(
      ::securemessage::GenericPublicKey* public_dh_key);
  ::securemessage::GenericPublicKey* unsafe_arena_release_public_dh_key();
  // optional int32 protocol_version = 2 [default = 0];
  bool has_protocol_version() const;
  void clear_protocol_version() ;
  ::int32_t protocol_version() const;
  void set_protocol_version(::int32_t value);

  private:
  ::int32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.InitiatorHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::securemessage::GenericPublicKey* public_dh_key_;
    ::int32_t protocol_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fto_5fdevice_5fmessages_2eproto;
};// -------------------------------------------------------------------

class ResponderHello final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.ResponderHello) */ {
 public:
  inline ResponderHello() : ResponderHello(nullptr) {}
  ~ResponderHello() override;
  explicit PROTOBUF_CONSTEXPR ResponderHello(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponderHello(const ResponderHello& from);
  ResponderHello(ResponderHello&& from) noexcept
    : ResponderHello() {
    *this = ::std::move(from);
  }

  inline ResponderHello& operator=(const ResponderHello& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponderHello& operator=(ResponderHello&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const ResponderHello& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponderHello* internal_default_instance() {
    return reinterpret_cast<const ResponderHello*>(
               &_ResponderHello_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ResponderHello& a, ResponderHello& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponderHello* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponderHello* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponderHello* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponderHello>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const ResponderHello& from);
  void MergeFrom(const ResponderHello& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ResponderHello* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.ResponderHello";
  }
  protected:
  explicit ResponderHello(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPublicDhKeyFieldNumber = 1,
    kProtocolVersionFieldNumber = 2,
  };
  // optional .securemessage.GenericPublicKey public_dh_key = 1;
  bool has_public_dh_key() const;
  void clear_public_dh_key() ;
  const ::securemessage::GenericPublicKey& public_dh_key() const;
  PROTOBUF_NODISCARD ::securemessage::GenericPublicKey* release_public_dh_key();
  ::securemessage::GenericPublicKey* mutable_public_dh_key();
  void set_allocated_public_dh_key(::securemessage::GenericPublicKey* public_dh_key);
  private:
  const ::securemessage::GenericPublicKey& _internal_public_dh_key() const;
  ::securemessage::GenericPublicKey* _internal_mutable_public_dh_key();
  public:
  void unsafe_arena_set_allocated_public_dh_key(
      ::securemessage::GenericPublicKey* public_dh_key);
  ::securemessage::GenericPublicKey* unsafe_arena_release_public_dh_key();
  // optional int32 protocol_version = 2 [default = 0];
  bool has_protocol_version() const;
  void clear_protocol_version() ;
  ::int32_t protocol_version() const;
  void set_protocol_version(::int32_t value);

  private:
  ::int32_t _internal_protocol_version() const;
  void _internal_set_protocol_version(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.ResponderHello)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::securemessage::GenericPublicKey* public_dh_key_;
    ::int32_t protocol_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fto_5fdevice_5fmessages_2eproto;
};// -------------------------------------------------------------------

class EcPoint final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.EcPoint) */ {
 public:
  inline EcPoint() : EcPoint(nullptr) {}
  ~EcPoint() override;
  explicit PROTOBUF_CONSTEXPR EcPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EcPoint(const EcPoint& from);
  EcPoint(EcPoint&& from) noexcept
    : EcPoint() {
    *this = ::std::move(from);
  }

  inline EcPoint& operator=(const EcPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline EcPoint& operator=(EcPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const EcPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const EcPoint* internal_default_instance() {
    return reinterpret_cast<const EcPoint*>(
               &_EcPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EcPoint& a, EcPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(EcPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EcPoint* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EcPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EcPoint>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const EcPoint& from);
  void MergeFrom(const EcPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EcPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.EcPoint";
  }
  protected:
  explicit EcPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kCurveFieldNumber = 1,
  };
  // required bytes x = 2;
  bool has_x() const;
  void clear_x() ;
  const std::string& x() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_x(Arg_&& arg, Args_... args);
  std::string* mutable_x();
  PROTOBUF_NODISCARD std::string* release_x();
  void set_allocated_x(std::string* ptr);

  private:
  const std::string& _internal_x() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_x(
      const std::string& value);
  std::string* _internal_mutable_x();

  public:
  // required bytes y = 3;
  bool has_y() const;
  void clear_y() ;
  const std::string& y() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_y(Arg_&& arg, Args_... args);
  std::string* mutable_y();
  PROTOBUF_NODISCARD std::string* release_y();
  void set_allocated_y(std::string* ptr);

  private:
  const std::string& _internal_y() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_y(
      const std::string& value);
  std::string* _internal_mutable_y();

  public:
  // required .securegcm.Curve curve = 1;
  bool has_curve() const;
  void clear_curve() ;
  ::securegcm::Curve curve() const;
  void set_curve(::securegcm::Curve value);

  private:
  ::securegcm::Curve _internal_curve() const;
  void _internal_set_curve(::securegcm::Curve value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.EcPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  ::size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr x_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr y_;
    int curve_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fto_5fdevice_5fmessages_2eproto;
};// -------------------------------------------------------------------

class SpakeHandshakeMessage final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:securegcm.SpakeHandshakeMessage) */ {
 public:
  inline SpakeHandshakeMessage() : SpakeHandshakeMessage(nullptr) {}
  ~SpakeHandshakeMessage() override;
  explicit PROTOBUF_CONSTEXPR SpakeHandshakeMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SpakeHandshakeMessage(const SpakeHandshakeMessage& from);
  SpakeHandshakeMessage(SpakeHandshakeMessage&& from) noexcept
    : SpakeHandshakeMessage() {
    *this = ::std::move(from);
  }

  inline SpakeHandshakeMessage& operator=(const SpakeHandshakeMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SpakeHandshakeMessage& operator=(SpakeHandshakeMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SpakeHandshakeMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const SpakeHandshakeMessage* internal_default_instance() {
    return reinterpret_cast<const SpakeHandshakeMessage*>(
               &_SpakeHandshakeMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SpakeHandshakeMessage& a, SpakeHandshakeMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SpakeHandshakeMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SpakeHandshakeMessage* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SpakeHandshakeMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SpakeHandshakeMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SpakeHandshakeMessage& from);
  void MergeFrom(const SpakeHandshakeMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SpakeHandshakeMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "securegcm.SpakeHandshakeMessage";
  }
  protected:
  explicit SpakeHandshakeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHashValueFieldNumber = 3,
    kPayloadFieldNumber = 4,
    kEcPointFieldNumber = 2,
    kFlowNumberFieldNumber = 1,
  };
  // optional bytes hash_value = 3;
  bool has_hash_value() const;
  void clear_hash_value() ;
  const std::string& hash_value() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_hash_value(Arg_&& arg, Args_... args);
  std::string* mutable_hash_value();
  PROTOBUF_NODISCARD std::string* release_hash_value();
  void set_allocated_hash_value(std::string* ptr);

  private:
  const std::string& _internal_hash_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_hash_value(
      const std::string& value);
  std::string* _internal_mutable_hash_value();

  public:
  // optional bytes payload = 4;
  bool has_payload() const;
  void clear_payload() ;
  const std::string& payload() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_payload(Arg_&& arg, Args_... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* ptr);

  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(
      const std::string& value);
  std::string* _internal_mutable_payload();

  public:
  // optional .securegcm.EcPoint ec_point = 2;
  bool has_ec_point() const;
  void clear_ec_point() ;
  const ::securegcm::EcPoint& ec_point() const;
  PROTOBUF_NODISCARD ::securegcm::EcPoint* release_ec_point();
  ::securegcm::EcPoint* mutable_ec_point();
  void set_allocated_ec_point(::securegcm::EcPoint* ec_point);
  private:
  const ::securegcm::EcPoint& _internal_ec_point() const;
  ::securegcm::EcPoint* _internal_mutable_ec_point();
  public:
  void unsafe_arena_set_allocated_ec_point(
      ::securegcm::EcPoint* ec_point);
  ::securegcm::EcPoint* unsafe_arena_release_ec_point();
  // optional int32 flow_number = 1;
  bool has_flow_number() const;
  void clear_flow_number() ;
  ::int32_t flow_number() const;
  void set_flow_number(::int32_t value);

  private:
  ::int32_t _internal_flow_number() const;
  void _internal_set_flow_number(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:securegcm.SpakeHandshakeMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_value_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
    ::securegcm::EcPoint* ec_point_;
    ::int32_t flow_number_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_device_5fto_5fdevice_5fmessages_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// DeviceToDeviceMessage

// optional bytes message = 1;
inline bool DeviceToDeviceMessage::has_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DeviceToDeviceMessage::clear_message() {
  _impl_.message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceToDeviceMessage::message() const {
  // @@protoc_insertion_point(field_get:securegcm.DeviceToDeviceMessage.message)
  return _internal_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DeviceToDeviceMessage::set_message(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.message_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.DeviceToDeviceMessage.message)
}
inline std::string* DeviceToDeviceMessage::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:securegcm.DeviceToDeviceMessage.message)
  return _s;
}
inline const std::string& DeviceToDeviceMessage::_internal_message() const {
  return _impl_.message_.Get();
}
inline void DeviceToDeviceMessage::_internal_set_message(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* DeviceToDeviceMessage::_internal_mutable_message() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.message_.Mutable( GetArenaForAllocation());
}
inline std::string* DeviceToDeviceMessage::release_message() {
  // @@protoc_insertion_point(field_release:securegcm.DeviceToDeviceMessage.message)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DeviceToDeviceMessage::set_allocated_message(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.message_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.message_.IsDefault()) {
          _impl_.message_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.DeviceToDeviceMessage.message)
}

// optional int32 sequence_number = 2;
inline bool DeviceToDeviceMessage::has_sequence_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DeviceToDeviceMessage::clear_sequence_number() {
  _impl_.sequence_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t DeviceToDeviceMessage::sequence_number() const {
  // @@protoc_insertion_point(field_get:securegcm.DeviceToDeviceMessage.sequence_number)
  return _internal_sequence_number();
}
inline void DeviceToDeviceMessage::set_sequence_number(::int32_t value) {
  _internal_set_sequence_number(value);
  // @@protoc_insertion_point(field_set:securegcm.DeviceToDeviceMessage.sequence_number)
}
inline ::int32_t DeviceToDeviceMessage::_internal_sequence_number() const {
  return _impl_.sequence_number_;
}
inline void DeviceToDeviceMessage::_internal_set_sequence_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.sequence_number_ = value;
}

// -------------------------------------------------------------------

// InitiatorHello

// optional .securemessage.GenericPublicKey public_dh_key = 1;
inline bool InitiatorHello::has_public_dh_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_dh_key_ != nullptr);
  return value;
}
inline const ::securemessage::GenericPublicKey& InitiatorHello::_internal_public_dh_key() const {
  const ::securemessage::GenericPublicKey* p = _impl_.public_dh_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::GenericPublicKey&>(
      ::securemessage::_GenericPublicKey_default_instance_);
}
inline const ::securemessage::GenericPublicKey& InitiatorHello::public_dh_key() const {
  // @@protoc_insertion_point(field_get:securegcm.InitiatorHello.public_dh_key)
  return _internal_public_dh_key();
}
inline void InitiatorHello::unsafe_arena_set_allocated_public_dh_key(
    ::securemessage::GenericPublicKey* public_dh_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_dh_key_);
  }
  _impl_.public_dh_key_ = public_dh_key;
  if (public_dh_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securegcm.InitiatorHello.public_dh_key)
}
inline ::securemessage::GenericPublicKey* InitiatorHello::release_public_dh_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::GenericPublicKey* temp = _impl_.public_dh_key_;
  _impl_.public_dh_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::GenericPublicKey* InitiatorHello::unsafe_arena_release_public_dh_key() {
  // @@protoc_insertion_point(field_release:securegcm.InitiatorHello.public_dh_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::GenericPublicKey* temp = _impl_.public_dh_key_;
  _impl_.public_dh_key_ = nullptr;
  return temp;
}
inline ::securemessage::GenericPublicKey* InitiatorHello::_internal_mutable_public_dh_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_dh_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::GenericPublicKey>(GetArenaForAllocation());
    _impl_.public_dh_key_ = p;
  }
  return _impl_.public_dh_key_;
}
inline ::securemessage::GenericPublicKey* InitiatorHello::mutable_public_dh_key() {
  ::securemessage::GenericPublicKey* _msg = _internal_mutable_public_dh_key();
  // @@protoc_insertion_point(field_mutable:securegcm.InitiatorHello.public_dh_key)
  return _msg;
}
inline void InitiatorHello::set_allocated_public_dh_key(::securemessage::GenericPublicKey* public_dh_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_dh_key_);
  }
  if (public_dh_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_dh_key));
    if (message_arena != submessage_arena) {
      public_dh_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_dh_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_dh_key_ = public_dh_key;
  // @@protoc_insertion_point(field_set_allocated:securegcm.InitiatorHello.public_dh_key)
}

// optional int32 protocol_version = 2 [default = 0];
inline bool InitiatorHello::has_protocol_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void InitiatorHello::clear_protocol_version() {
  _impl_.protocol_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t InitiatorHello::protocol_version() const {
  // @@protoc_insertion_point(field_get:securegcm.InitiatorHello.protocol_version)
  return _internal_protocol_version();
}
inline void InitiatorHello::set_protocol_version(::int32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:securegcm.InitiatorHello.protocol_version)
}
inline ::int32_t InitiatorHello::_internal_protocol_version() const {
  return _impl_.protocol_version_;
}
inline void InitiatorHello::_internal_set_protocol_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.protocol_version_ = value;
}

// -------------------------------------------------------------------

// ResponderHello

// optional .securemessage.GenericPublicKey public_dh_key = 1;
inline bool ResponderHello::has_public_dh_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.public_dh_key_ != nullptr);
  return value;
}
inline const ::securemessage::GenericPublicKey& ResponderHello::_internal_public_dh_key() const {
  const ::securemessage::GenericPublicKey* p = _impl_.public_dh_key_;
  return p != nullptr ? *p : reinterpret_cast<const ::securemessage::GenericPublicKey&>(
      ::securemessage::_GenericPublicKey_default_instance_);
}
inline const ::securemessage::GenericPublicKey& ResponderHello::public_dh_key() const {
  // @@protoc_insertion_point(field_get:securegcm.ResponderHello.public_dh_key)
  return _internal_public_dh_key();
}
inline void ResponderHello::unsafe_arena_set_allocated_public_dh_key(
    ::securemessage::GenericPublicKey* public_dh_key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_dh_key_);
  }
  _impl_.public_dh_key_ = public_dh_key;
  if (public_dh_key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securegcm.ResponderHello.public_dh_key)
}
inline ::securemessage::GenericPublicKey* ResponderHello::release_public_dh_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::GenericPublicKey* temp = _impl_.public_dh_key_;
  _impl_.public_dh_key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securemessage::GenericPublicKey* ResponderHello::unsafe_arena_release_public_dh_key() {
  // @@protoc_insertion_point(field_release:securegcm.ResponderHello.public_dh_key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::securemessage::GenericPublicKey* temp = _impl_.public_dh_key_;
  _impl_.public_dh_key_ = nullptr;
  return temp;
}
inline ::securemessage::GenericPublicKey* ResponderHello::_internal_mutable_public_dh_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.public_dh_key_ == nullptr) {
    auto* p = CreateMaybeMessage<::securemessage::GenericPublicKey>(GetArenaForAllocation());
    _impl_.public_dh_key_ = p;
  }
  return _impl_.public_dh_key_;
}
inline ::securemessage::GenericPublicKey* ResponderHello::mutable_public_dh_key() {
  ::securemessage::GenericPublicKey* _msg = _internal_mutable_public_dh_key();
  // @@protoc_insertion_point(field_mutable:securegcm.ResponderHello.public_dh_key)
  return _msg;
}
inline void ResponderHello::set_allocated_public_dh_key(::securemessage::GenericPublicKey* public_dh_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.public_dh_key_);
  }
  if (public_dh_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(public_dh_key));
    if (message_arena != submessage_arena) {
      public_dh_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, public_dh_key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.public_dh_key_ = public_dh_key;
  // @@protoc_insertion_point(field_set_allocated:securegcm.ResponderHello.public_dh_key)
}

// optional int32 protocol_version = 2 [default = 0];
inline bool ResponderHello::has_protocol_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ResponderHello::clear_protocol_version() {
  _impl_.protocol_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t ResponderHello::protocol_version() const {
  // @@protoc_insertion_point(field_get:securegcm.ResponderHello.protocol_version)
  return _internal_protocol_version();
}
inline void ResponderHello::set_protocol_version(::int32_t value) {
  _internal_set_protocol_version(value);
  // @@protoc_insertion_point(field_set:securegcm.ResponderHello.protocol_version)
}
inline ::int32_t ResponderHello::_internal_protocol_version() const {
  return _impl_.protocol_version_;
}
inline void ResponderHello::_internal_set_protocol_version(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.protocol_version_ = value;
}

// -------------------------------------------------------------------

// EcPoint

// required .securegcm.Curve curve = 1;
inline bool EcPoint::has_curve() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void EcPoint::clear_curve() {
  _impl_.curve_ = 1;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::securegcm::Curve EcPoint::curve() const {
  // @@protoc_insertion_point(field_get:securegcm.EcPoint.curve)
  return _internal_curve();
}
inline void EcPoint::set_curve(::securegcm::Curve value) {
   _internal_set_curve(value);
  // @@protoc_insertion_point(field_set:securegcm.EcPoint.curve)
}
inline ::securegcm::Curve EcPoint::_internal_curve() const {
  return static_cast<::securegcm::Curve>(_impl_.curve_);
}
inline void EcPoint::_internal_set_curve(::securegcm::Curve value) {
  assert(::securegcm::Curve_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.curve_ = value;
}

// required bytes x = 2;
inline bool EcPoint::has_x() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void EcPoint::clear_x() {
  _impl_.x_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& EcPoint::x() const {
  // @@protoc_insertion_point(field_get:securegcm.EcPoint.x)
  return _internal_x();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcPoint::set_x(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.x_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.EcPoint.x)
}
inline std::string* EcPoint::mutable_x() {
  std::string* _s = _internal_mutable_x();
  // @@protoc_insertion_point(field_mutable:securegcm.EcPoint.x)
  return _s;
}
inline const std::string& EcPoint::_internal_x() const {
  return _impl_.x_.Get();
}
inline void EcPoint::_internal_set_x(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.x_.Set(value, GetArenaForAllocation());
}
inline std::string* EcPoint::_internal_mutable_x() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.x_.Mutable( GetArenaForAllocation());
}
inline std::string* EcPoint::release_x() {
  // @@protoc_insertion_point(field_release:securegcm.EcPoint.x)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.x_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EcPoint::set_allocated_x(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.x_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.x_.IsDefault()) {
          _impl_.x_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.EcPoint.x)
}

// required bytes y = 3;
inline bool EcPoint::has_y() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void EcPoint::clear_y() {
  _impl_.y_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& EcPoint::y() const {
  // @@protoc_insertion_point(field_get:securegcm.EcPoint.y)
  return _internal_y();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void EcPoint::set_y(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.y_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.EcPoint.y)
}
inline std::string* EcPoint::mutable_y() {
  std::string* _s = _internal_mutable_y();
  // @@protoc_insertion_point(field_mutable:securegcm.EcPoint.y)
  return _s;
}
inline const std::string& EcPoint::_internal_y() const {
  return _impl_.y_.Get();
}
inline void EcPoint::_internal_set_y(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.y_.Set(value, GetArenaForAllocation());
}
inline std::string* EcPoint::_internal_mutable_y() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.y_.Mutable( GetArenaForAllocation());
}
inline std::string* EcPoint::release_y() {
  // @@protoc_insertion_point(field_release:securegcm.EcPoint.y)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.y_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void EcPoint::set_allocated_y(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.y_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.y_.IsDefault()) {
          _impl_.y_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.EcPoint.y)
}

// -------------------------------------------------------------------

// SpakeHandshakeMessage

// optional int32 flow_number = 1;
inline bool SpakeHandshakeMessage::has_flow_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SpakeHandshakeMessage::clear_flow_number() {
  _impl_.flow_number_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t SpakeHandshakeMessage::flow_number() const {
  // @@protoc_insertion_point(field_get:securegcm.SpakeHandshakeMessage.flow_number)
  return _internal_flow_number();
}
inline void SpakeHandshakeMessage::set_flow_number(::int32_t value) {
  _internal_set_flow_number(value);
  // @@protoc_insertion_point(field_set:securegcm.SpakeHandshakeMessage.flow_number)
}
inline ::int32_t SpakeHandshakeMessage::_internal_flow_number() const {
  return _impl_.flow_number_;
}
inline void SpakeHandshakeMessage::_internal_set_flow_number(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.flow_number_ = value;
}

// optional .securegcm.EcPoint ec_point = 2;
inline bool SpakeHandshakeMessage::has_ec_point() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ec_point_ != nullptr);
  return value;
}
inline void SpakeHandshakeMessage::clear_ec_point() {
  if (_impl_.ec_point_ != nullptr) _impl_.ec_point_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::securegcm::EcPoint& SpakeHandshakeMessage::_internal_ec_point() const {
  const ::securegcm::EcPoint* p = _impl_.ec_point_;
  return p != nullptr ? *p : reinterpret_cast<const ::securegcm::EcPoint&>(
      ::securegcm::_EcPoint_default_instance_);
}
inline const ::securegcm::EcPoint& SpakeHandshakeMessage::ec_point() const {
  // @@protoc_insertion_point(field_get:securegcm.SpakeHandshakeMessage.ec_point)
  return _internal_ec_point();
}
inline void SpakeHandshakeMessage::unsafe_arena_set_allocated_ec_point(
    ::securegcm::EcPoint* ec_point) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.ec_point_);
  }
  _impl_.ec_point_ = ec_point;
  if (ec_point) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:securegcm.SpakeHandshakeMessage.ec_point)
}
inline ::securegcm::EcPoint* SpakeHandshakeMessage::release_ec_point() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::securegcm::EcPoint* temp = _impl_.ec_point_;
  _impl_.ec_point_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::securegcm::EcPoint* SpakeHandshakeMessage::unsafe_arena_release_ec_point() {
  // @@protoc_insertion_point(field_release:securegcm.SpakeHandshakeMessage.ec_point)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::securegcm::EcPoint* temp = _impl_.ec_point_;
  _impl_.ec_point_ = nullptr;
  return temp;
}
inline ::securegcm::EcPoint* SpakeHandshakeMessage::_internal_mutable_ec_point() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.ec_point_ == nullptr) {
    auto* p = CreateMaybeMessage<::securegcm::EcPoint>(GetArenaForAllocation());
    _impl_.ec_point_ = p;
  }
  return _impl_.ec_point_;
}
inline ::securegcm::EcPoint* SpakeHandshakeMessage::mutable_ec_point() {
  ::securegcm::EcPoint* _msg = _internal_mutable_ec_point();
  // @@protoc_insertion_point(field_mutable:securegcm.SpakeHandshakeMessage.ec_point)
  return _msg;
}
inline void SpakeHandshakeMessage::set_allocated_ec_point(::securegcm::EcPoint* ec_point) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.ec_point_;
  }
  if (ec_point) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(ec_point);
    if (message_arena != submessage_arena) {
      ec_point = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ec_point, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.ec_point_ = ec_point;
  // @@protoc_insertion_point(field_set_allocated:securegcm.SpakeHandshakeMessage.ec_point)
}

// optional bytes hash_value = 3;
inline bool SpakeHandshakeMessage::has_hash_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SpakeHandshakeMessage::clear_hash_value() {
  _impl_.hash_value_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SpakeHandshakeMessage::hash_value() const {
  // @@protoc_insertion_point(field_get:securegcm.SpakeHandshakeMessage.hash_value)
  return _internal_hash_value();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpakeHandshakeMessage::set_hash_value(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.hash_value_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.SpakeHandshakeMessage.hash_value)
}
inline std::string* SpakeHandshakeMessage::mutable_hash_value() {
  std::string* _s = _internal_mutable_hash_value();
  // @@protoc_insertion_point(field_mutable:securegcm.SpakeHandshakeMessage.hash_value)
  return _s;
}
inline const std::string& SpakeHandshakeMessage::_internal_hash_value() const {
  return _impl_.hash_value_.Get();
}
inline void SpakeHandshakeMessage::_internal_set_hash_value(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.hash_value_.Set(value, GetArenaForAllocation());
}
inline std::string* SpakeHandshakeMessage::_internal_mutable_hash_value() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.hash_value_.Mutable( GetArenaForAllocation());
}
inline std::string* SpakeHandshakeMessage::release_hash_value() {
  // @@protoc_insertion_point(field_release:securegcm.SpakeHandshakeMessage.hash_value)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.hash_value_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hash_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SpakeHandshakeMessage::set_allocated_hash_value(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.hash_value_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.hash_value_.IsDefault()) {
          _impl_.hash_value_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.SpakeHandshakeMessage.hash_value)
}

// optional bytes payload = 4;
inline bool SpakeHandshakeMessage::has_payload() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SpakeHandshakeMessage::clear_payload() {
  _impl_.payload_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& SpakeHandshakeMessage::payload() const {
  // @@protoc_insertion_point(field_get:securegcm.SpakeHandshakeMessage.payload)
  return _internal_payload();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SpakeHandshakeMessage::set_payload(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.payload_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:securegcm.SpakeHandshakeMessage.payload)
}
inline std::string* SpakeHandshakeMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:securegcm.SpakeHandshakeMessage.payload)
  return _s;
}
inline const std::string& SpakeHandshakeMessage::_internal_payload() const {
  return _impl_.payload_.Get();
}
inline void SpakeHandshakeMessage::_internal_set_payload(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.payload_.Set(value, GetArenaForAllocation());
}
inline std::string* SpakeHandshakeMessage::_internal_mutable_payload() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.payload_.Mutable( GetArenaForAllocation());
}
inline std::string* SpakeHandshakeMessage::release_payload() {
  // @@protoc_insertion_point(field_release:securegcm.SpakeHandshakeMessage.payload)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.payload_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SpakeHandshakeMessage::set_allocated_payload(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.payload_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.payload_.IsDefault()) {
          _impl_.payload_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:securegcm.SpakeHandshakeMessage.payload)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace securegcm


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::securegcm::Curve> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_device_5fto_5fdevice_5fmessages_2eproto_2epb_2eh
