// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ukey.proto

#include "ukey.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace securegcm {
PROTOBUF_CONSTEXPR Ukey2Message::Ukey2Message(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_data_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.message_type_)*/ 0
} {}
struct Ukey2MessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2MessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2MessageDefaultTypeInternal() {}
  union {
    Ukey2Message _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2MessageDefaultTypeInternal _Ukey2Message_default_instance_;
PROTOBUF_CONSTEXPR Ukey2Alert::Ukey2Alert(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.error_message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.type_)*/ 1
} {}
struct Ukey2AlertDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2AlertDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2AlertDefaultTypeInternal() {}
  union {
    Ukey2Alert _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2AlertDefaultTypeInternal _Ukey2Alert_default_instance_;
PROTOBUF_CONSTEXPR Ukey2ClientInit_CipherCommitment::Ukey2ClientInit_CipherCommitment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.commitment_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.handshake_cipher_)*/ 0
} {}
struct Ukey2ClientInit_CipherCommitmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2ClientInit_CipherCommitmentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2ClientInit_CipherCommitmentDefaultTypeInternal() {}
  union {
    Ukey2ClientInit_CipherCommitment _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2ClientInit_CipherCommitmentDefaultTypeInternal _Ukey2ClientInit_CipherCommitment_default_instance_;
PROTOBUF_CONSTEXPR Ukey2ClientInit::Ukey2ClientInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.cipher_commitments_)*/{}
  , /*decltype(_impl_.random_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.next_protocol_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ 0
} {}
struct Ukey2ClientInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2ClientInitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2ClientInitDefaultTypeInternal() {}
  union {
    Ukey2ClientInit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2ClientInitDefaultTypeInternal _Ukey2ClientInit_default_instance_;
PROTOBUF_CONSTEXPR Ukey2ServerInit::Ukey2ServerInit(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.random_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.public_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.version_)*/ 0

  , /*decltype(_impl_.handshake_cipher_)*/ 0
} {}
struct Ukey2ServerInitDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2ServerInitDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2ServerInitDefaultTypeInternal() {}
  union {
    Ukey2ServerInit _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2ServerInitDefaultTypeInternal _Ukey2ServerInit_default_instance_;
PROTOBUF_CONSTEXPR Ukey2ClientFinished::Ukey2ClientFinished(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_key_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct Ukey2ClientFinishedDefaultTypeInternal {
  PROTOBUF_CONSTEXPR Ukey2ClientFinishedDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~Ukey2ClientFinishedDefaultTypeInternal() {}
  union {
    Ukey2ClientFinished _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Ukey2ClientFinishedDefaultTypeInternal _Ukey2ClientFinished_default_instance_;
}  // namespace securegcm
namespace securegcm {
bool Ukey2Message_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Ukey2Message_Type_strings[5] = {};

static const char Ukey2Message_Type_names[] = {
    "ALERT"
    "CLIENT_FINISH"
    "CLIENT_INIT"
    "SERVER_INIT"
    "UNKNOWN_DO_NOT_USE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Ukey2Message_Type_entries[] =
    {
        {{&Ukey2Message_Type_names[0], 5}, 1},
        {{&Ukey2Message_Type_names[5], 13}, 4},
        {{&Ukey2Message_Type_names[18], 11}, 2},
        {{&Ukey2Message_Type_names[29], 11}, 3},
        {{&Ukey2Message_Type_names[40], 18}, 0},
};

static const int Ukey2Message_Type_entries_by_number[] = {
    4,  // 0 -> UNKNOWN_DO_NOT_USE
    0,  // 1 -> ALERT
    2,  // 2 -> CLIENT_INIT
    3,  // 3 -> SERVER_INIT
    1,  // 4 -> CLIENT_FINISH
};

const std::string& Ukey2Message_Type_Name(Ukey2Message_Type value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Ukey2Message_Type_entries, Ukey2Message_Type_entries_by_number,
          5, Ukey2Message_Type_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Ukey2Message_Type_entries, Ukey2Message_Type_entries_by_number, 5,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Ukey2Message_Type_strings[idx].get();
}

bool Ukey2Message_Type_Parse(absl::string_view name, Ukey2Message_Type* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Ukey2Message_Type_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<Ukey2Message_Type>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Ukey2Message_Type Ukey2Message::UNKNOWN_DO_NOT_USE;
constexpr Ukey2Message_Type Ukey2Message::ALERT;
constexpr Ukey2Message_Type Ukey2Message::CLIENT_INIT;
constexpr Ukey2Message_Type Ukey2Message::SERVER_INIT;
constexpr Ukey2Message_Type Ukey2Message::CLIENT_FINISH;
constexpr Ukey2Message_Type Ukey2Message::Type_MIN;
constexpr Ukey2Message_Type Ukey2Message::Type_MAX;
constexpr int Ukey2Message::Type_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Ukey2Alert_AlertType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 200:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Ukey2Alert_AlertType_strings[10] = {};

static const char Ukey2Alert_AlertType_names[] = {
    "BAD_HANDSHAKE_CIPHER"
    "BAD_MESSAGE"
    "BAD_MESSAGE_DATA"
    "BAD_MESSAGE_TYPE"
    "BAD_NEXT_PROTOCOL"
    "BAD_PUBLIC_KEY"
    "BAD_RANDOM"
    "BAD_VERSION"
    "INCORRECT_MESSAGE"
    "INTERNAL_ERROR"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Ukey2Alert_AlertType_entries[] =
    {
        {{&Ukey2Alert_AlertType_names[0], 20}, 102},
        {{&Ukey2Alert_AlertType_names[20], 11}, 1},
        {{&Ukey2Alert_AlertType_names[31], 16}, 4},
        {{&Ukey2Alert_AlertType_names[47], 16}, 2},
        {{&Ukey2Alert_AlertType_names[63], 17}, 103},
        {{&Ukey2Alert_AlertType_names[80], 14}, 104},
        {{&Ukey2Alert_AlertType_names[94], 10}, 101},
        {{&Ukey2Alert_AlertType_names[104], 11}, 100},
        {{&Ukey2Alert_AlertType_names[115], 17}, 3},
        {{&Ukey2Alert_AlertType_names[132], 14}, 200},
};

static const int Ukey2Alert_AlertType_entries_by_number[] = {
    1,  // 1 -> BAD_MESSAGE
    3,  // 2 -> BAD_MESSAGE_TYPE
    8,  // 3 -> INCORRECT_MESSAGE
    2,  // 4 -> BAD_MESSAGE_DATA
    7,  // 100 -> BAD_VERSION
    6,  // 101 -> BAD_RANDOM
    0,  // 102 -> BAD_HANDSHAKE_CIPHER
    4,  // 103 -> BAD_NEXT_PROTOCOL
    5,  // 104 -> BAD_PUBLIC_KEY
    9,  // 200 -> INTERNAL_ERROR
};

const std::string& Ukey2Alert_AlertType_Name(Ukey2Alert_AlertType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Ukey2Alert_AlertType_entries, Ukey2Alert_AlertType_entries_by_number,
          10, Ukey2Alert_AlertType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Ukey2Alert_AlertType_entries, Ukey2Alert_AlertType_entries_by_number, 10,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Ukey2Alert_AlertType_strings[idx].get();
}

bool Ukey2Alert_AlertType_Parse(absl::string_view name, Ukey2Alert_AlertType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Ukey2Alert_AlertType_entries, 10, name, &int_value);
  if (success) {
    *value = static_cast<Ukey2Alert_AlertType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_MESSAGE;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_MESSAGE_TYPE;
constexpr Ukey2Alert_AlertType Ukey2Alert::INCORRECT_MESSAGE;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_MESSAGE_DATA;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_VERSION;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_RANDOM;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_HANDSHAKE_CIPHER;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_NEXT_PROTOCOL;
constexpr Ukey2Alert_AlertType Ukey2Alert::BAD_PUBLIC_KEY;
constexpr Ukey2Alert_AlertType Ukey2Alert::INTERNAL_ERROR;
constexpr Ukey2Alert_AlertType Ukey2Alert::AlertType_MIN;
constexpr Ukey2Alert_AlertType Ukey2Alert::AlertType_MAX;
constexpr int Ukey2Alert::AlertType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool Ukey2HandshakeCipher_IsValid(int value) {
  switch (value) {
    case 0:
    case 100:
    case 200:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Ukey2HandshakeCipher_strings[3] = {};

static const char Ukey2HandshakeCipher_names[] = {
    "CURVE25519_SHA512"
    "P256_SHA512"
    "RESERVED"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Ukey2HandshakeCipher_entries[] =
    {
        {{&Ukey2HandshakeCipher_names[0], 17}, 200},
        {{&Ukey2HandshakeCipher_names[17], 11}, 100},
        {{&Ukey2HandshakeCipher_names[28], 8}, 0},
};

static const int Ukey2HandshakeCipher_entries_by_number[] = {
    2,  // 0 -> RESERVED
    1,  // 100 -> P256_SHA512
    0,  // 200 -> CURVE25519_SHA512
};

const std::string& Ukey2HandshakeCipher_Name(Ukey2HandshakeCipher value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Ukey2HandshakeCipher_entries, Ukey2HandshakeCipher_entries_by_number,
          3, Ukey2HandshakeCipher_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Ukey2HandshakeCipher_entries, Ukey2HandshakeCipher_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Ukey2HandshakeCipher_strings[idx].get();
}

bool Ukey2HandshakeCipher_Parse(absl::string_view name, Ukey2HandshakeCipher* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Ukey2HandshakeCipher_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<Ukey2HandshakeCipher>(int_value);
  }
  return success;
}
// ===================================================================

class Ukey2Message::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2Message>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2Message, _impl_._has_bits_);
  static void set_has_message_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_message_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ukey2Message::Ukey2Message(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2Message)
}
Ukey2Message::Ukey2Message(const Ukey2Message& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2Message* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_data_) {}

    , decltype(_impl_.message_type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.message_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_data_.Set(from._internal_message_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.message_type_ = from._impl_.message_type_;
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2Message)
}

inline void Ukey2Message::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_data_) {}

    , decltype(_impl_.message_type_) { 0 }

  };
  _impl_.message_data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2Message::~Ukey2Message() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2Message)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2Message::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_data_.Destroy();
}

void Ukey2Message::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2Message::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2Message)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_data_.ClearNonDefaultToEmpty();
  }
  _impl_.message_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2Message::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .securegcm.Ukey2Message.Type message_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Ukey2Message_Type_IsValid(static_cast<int>(val)))) {
            _internal_set_message_type(static_cast<::securegcm::Ukey2Message_Type>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes message_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_message_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2Message::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2Message)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .securegcm.Ukey2Message.Type message_type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_message_type(), target);
  }

  // optional bytes message_data = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2Message)
  return target;
}

::size_t Ukey2Message::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2Message)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes message_data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_message_data());
    }

    // optional .securegcm.Ukey2Message.Type message_type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_message_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2Message::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2Message*>(
      &from));
}

void Ukey2Message::MergeFrom(const Ukey2Message& from) {
  Ukey2Message* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2Message)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message_data(from._internal_message_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.message_type_ = from._impl_.message_type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2Message::CopyFrom(const Ukey2Message& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2Message)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2Message::IsInitialized() const {
  return true;
}

void Ukey2Message::InternalSwap(Ukey2Message* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_data_, lhs_arena,
                                       &other->_impl_.message_data_, rhs_arena);
  swap(_impl_.message_type_, other->_impl_.message_type_);
}

std::string Ukey2Message::GetTypeName() const {
  return "securegcm.Ukey2Message";
}

// ===================================================================

class Ukey2Alert::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2Alert>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2Alert, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ukey2Alert::Ukey2Alert(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2Alert)
}
Ukey2Alert::Ukey2Alert(const Ukey2Alert& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2Alert* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_) {}

    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.error_message_.Set(from._internal_error_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2Alert)
}

inline void Ukey2Alert::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.error_message_) {}

    , decltype(_impl_.type_) { 1 }

  };
  _impl_.error_message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.error_message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2Alert::~Ukey2Alert() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2Alert)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2Alert::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.error_message_.Destroy();
}

void Ukey2Alert::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2Alert::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2Alert)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
    _impl_.type_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2Alert::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .securegcm.Ukey2Alert.AlertType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Ukey2Alert_AlertType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::securegcm::Ukey2Alert_AlertType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string error_message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_error_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2Alert::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2Alert)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .securegcm.Ukey2Alert.AlertType type = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional string error_message = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_error_message();
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2Alert)
  return target;
}

::size_t Ukey2Alert::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2Alert)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_message = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_error_message());
    }

    // optional .securegcm.Ukey2Alert.AlertType type = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2Alert::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2Alert*>(
      &from));
}

void Ukey2Alert::MergeFrom(const Ukey2Alert& from) {
  Ukey2Alert* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2Alert)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2Alert::CopyFrom(const Ukey2Alert& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2Alert)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2Alert::IsInitialized() const {
  return true;
}

void Ukey2Alert::InternalSwap(Ukey2Alert* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, lhs_arena,
                                       &other->_impl_.error_message_, rhs_arena);
  swap(_impl_.type_, other->_impl_.type_);
}

std::string Ukey2Alert::GetTypeName() const {
  return "securegcm.Ukey2Alert";
}

// ===================================================================

class Ukey2ClientInit_CipherCommitment::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2ClientInit_CipherCommitment>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2ClientInit_CipherCommitment, _impl_._has_bits_);
  static void set_has_handshake_cipher(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_commitment(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ukey2ClientInit_CipherCommitment::Ukey2ClientInit_CipherCommitment(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2ClientInit.CipherCommitment)
}
Ukey2ClientInit_CipherCommitment::Ukey2ClientInit_CipherCommitment(const Ukey2ClientInit_CipherCommitment& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2ClientInit_CipherCommitment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitment_) {}

    , decltype(_impl_.handshake_cipher_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.commitment_.Set(from._internal_commitment(), _this->GetArenaForAllocation());
  }
  _this->_impl_.handshake_cipher_ = from._impl_.handshake_cipher_;
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2ClientInit.CipherCommitment)
}

inline void Ukey2ClientInit_CipherCommitment::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.commitment_) {}

    , decltype(_impl_.handshake_cipher_) { 0 }

  };
  _impl_.commitment_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.commitment_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2ClientInit_CipherCommitment::~Ukey2ClientInit_CipherCommitment() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2ClientInit.CipherCommitment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2ClientInit_CipherCommitment::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.commitment_.Destroy();
}

void Ukey2ClientInit_CipherCommitment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2ClientInit_CipherCommitment::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2ClientInit.CipherCommitment)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.commitment_.ClearNonDefaultToEmpty();
  }
  _impl_.handshake_cipher_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2ClientInit_CipherCommitment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Ukey2HandshakeCipher_IsValid(static_cast<int>(val)))) {
            _internal_set_handshake_cipher(static_cast<::securegcm::Ukey2HandshakeCipher>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes commitment = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_commitment();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2ClientInit_CipherCommitment::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2ClientInit.CipherCommitment)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_handshake_cipher(), target);
  }

  // optional bytes commitment = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_commitment();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2ClientInit.CipherCommitment)
  return target;
}

::size_t Ukey2ClientInit_CipherCommitment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2ClientInit.CipherCommitment)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes commitment = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_commitment());
    }

    // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_handshake_cipher());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2ClientInit_CipherCommitment::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2ClientInit_CipherCommitment*>(
      &from));
}

void Ukey2ClientInit_CipherCommitment::MergeFrom(const Ukey2ClientInit_CipherCommitment& from) {
  Ukey2ClientInit_CipherCommitment* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2ClientInit.CipherCommitment)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_commitment(from._internal_commitment());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.handshake_cipher_ = from._impl_.handshake_cipher_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2ClientInit_CipherCommitment::CopyFrom(const Ukey2ClientInit_CipherCommitment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2ClientInit.CipherCommitment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2ClientInit_CipherCommitment::IsInitialized() const {
  return true;
}

void Ukey2ClientInit_CipherCommitment::InternalSwap(Ukey2ClientInit_CipherCommitment* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.commitment_, lhs_arena,
                                       &other->_impl_.commitment_, rhs_arena);
  swap(_impl_.handshake_cipher_, other->_impl_.handshake_cipher_);
}

std::string Ukey2ClientInit_CipherCommitment::GetTypeName() const {
  return "securegcm.Ukey2ClientInit.CipherCommitment";
}

// ===================================================================

class Ukey2ClientInit::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2ClientInit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2ClientInit, _impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_random(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_next_protocol(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Ukey2ClientInit::Ukey2ClientInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2ClientInit)
}
Ukey2ClientInit::Ukey2ClientInit(const Ukey2ClientInit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2ClientInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cipher_commitments_){from._impl_.cipher_commitments_}
    , decltype(_impl_.random_) {}

    , decltype(_impl_.next_protocol_) {}

    , decltype(_impl_.version_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.random_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.random_.Set(from._internal_random(), _this->GetArenaForAllocation());
  }
  _impl_.next_protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_protocol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.next_protocol_.Set(from._internal_next_protocol(), _this->GetArenaForAllocation());
  }
  _this->_impl_.version_ = from._impl_.version_;
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2ClientInit)
}

inline void Ukey2ClientInit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.cipher_commitments_){arena}
    , decltype(_impl_.random_) {}

    , decltype(_impl_.next_protocol_) {}

    , decltype(_impl_.version_) { 0 }

  };
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.random_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.next_protocol_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.next_protocol_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2ClientInit::~Ukey2ClientInit() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2ClientInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2ClientInit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _internal_mutable_cipher_commitments()->~RepeatedPtrField();
  _impl_.random_.Destroy();
  _impl_.next_protocol_.Destroy();
}

void Ukey2ClientInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2ClientInit::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2ClientInit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_cipher_commitments()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.random_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.next_protocol_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2ClientInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // repeated .securegcm.Ukey2ClientInit.CipherCommitment cipher_commitments = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cipher_commitments(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string next_protocol = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_next_protocol();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2ClientInit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2ClientInit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // optional bytes random = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_random();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // repeated .securegcm.Ukey2ClientInit.CipherCommitment cipher_commitments = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_cipher_commitments_size()); i < n; i++) {
    const auto& repfield = this->_internal_cipher_commitments(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string next_protocol = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_next_protocol();
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2ClientInit)
  return target;
}

::size_t Ukey2ClientInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2ClientInit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .securegcm.Ukey2ClientInit.CipherCommitment cipher_commitments = 3;
  total_size += 1UL * this->_internal_cipher_commitments_size();
  for (const auto& msg : this->_internal_cipher_commitments()) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes random = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_random());
    }

    // optional string next_protocol = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_next_protocol());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2ClientInit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2ClientInit*>(
      &from));
}

void Ukey2ClientInit::MergeFrom(const Ukey2ClientInit& from) {
  Ukey2ClientInit* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2ClientInit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_cipher_commitments()->MergeFrom(from._internal_cipher_commitments());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_random(from._internal_random());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_next_protocol(from._internal_next_protocol());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2ClientInit::CopyFrom(const Ukey2ClientInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2ClientInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2ClientInit::IsInitialized() const {
  return true;
}

void Ukey2ClientInit::InternalSwap(Ukey2ClientInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_cipher_commitments()->InternalSwap(other->_internal_mutable_cipher_commitments());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.random_, lhs_arena,
                                       &other->_impl_.random_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.next_protocol_, lhs_arena,
                                       &other->_impl_.next_protocol_, rhs_arena);

  swap(_impl_.version_, other->_impl_.version_);
}

std::string Ukey2ClientInit::GetTypeName() const {
  return "securegcm.Ukey2ClientInit";
}

// ===================================================================

class Ukey2ServerInit::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2ServerInit>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2ServerInit, _impl_._has_bits_);
  static void set_has_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_random(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_handshake_cipher(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

Ukey2ServerInit::Ukey2ServerInit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2ServerInit)
}
Ukey2ServerInit::Ukey2ServerInit(const Ukey2ServerInit& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2ServerInit* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_) {}

    , decltype(_impl_.public_key_) {}

    , decltype(_impl_.version_) {}

    , decltype(_impl_.handshake_cipher_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.random_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.random_.Set(from._internal_random(), _this->GetArenaForAllocation());
  }
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.version_, &from._impl_.version_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.handshake_cipher_) -
    reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.handshake_cipher_));
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2ServerInit)
}

inline void Ukey2ServerInit::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.random_) {}

    , decltype(_impl_.public_key_) {}

    , decltype(_impl_.version_) { 0 }

    , decltype(_impl_.handshake_cipher_) { 0 }

  };
  _impl_.random_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.random_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2ServerInit::~Ukey2ServerInit() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2ServerInit)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2ServerInit::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.random_.Destroy();
  _impl_.public_key_.Destroy();
}

void Ukey2ServerInit::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2ServerInit::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2ServerInit)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.random_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.public_key_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&_impl_.version_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.handshake_cipher_) -
        reinterpret_cast<char*>(&_impl_.version_)) + sizeof(_impl_.handshake_cipher_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2ServerInit::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_version(&has_bits);
          _impl_.version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes random = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_random();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 24)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Ukey2HandshakeCipher_IsValid(static_cast<int>(val)))) {
            _internal_set_handshake_cipher(static_cast<::securegcm::Ukey2HandshakeCipher>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes public_key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2ServerInit::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2ServerInit)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_version(), target);
  }

  // optional bytes random = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_random();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        3, this->_internal_handshake_cipher(), target);
  }

  // optional bytes public_key = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_public_key();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2ServerInit)
  return target;
}

::size_t Ukey2ServerInit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2ServerInit)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes random = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_random());
    }

    // optional bytes public_key = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_public_key());
    }

    // optional int32 version = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_version());
    }

    // optional .securegcm.Ukey2HandshakeCipher handshake_cipher = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_handshake_cipher());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2ServerInit::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2ServerInit*>(
      &from));
}

void Ukey2ServerInit::MergeFrom(const Ukey2ServerInit& from) {
  Ukey2ServerInit* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2ServerInit)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_random(from._internal_random());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_public_key(from._internal_public_key());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.version_ = from._impl_.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.handshake_cipher_ = from._impl_.handshake_cipher_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2ServerInit::CopyFrom(const Ukey2ServerInit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2ServerInit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2ServerInit::IsInitialized() const {
  return true;
}

void Ukey2ServerInit::InternalSwap(Ukey2ServerInit* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.random_, lhs_arena,
                                       &other->_impl_.random_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_, lhs_arena,
                                       &other->_impl_.public_key_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ukey2ServerInit, _impl_.handshake_cipher_)
      + sizeof(Ukey2ServerInit::_impl_.handshake_cipher_)
      - PROTOBUF_FIELD_OFFSET(Ukey2ServerInit, _impl_.version_)>(
          reinterpret_cast<char*>(&_impl_.version_),
          reinterpret_cast<char*>(&other->_impl_.version_));
}

std::string Ukey2ServerInit::GetTypeName() const {
  return "securegcm.Ukey2ServerInit";
}

// ===================================================================

class Ukey2ClientFinished::_Internal {
 public:
  using HasBits = decltype(std::declval<Ukey2ClientFinished>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(Ukey2ClientFinished, _impl_._has_bits_);
  static void set_has_public_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

Ukey2ClientFinished::Ukey2ClientFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.Ukey2ClientFinished)
}
Ukey2ClientFinished::Ukey2ClientFinished(const Ukey2ClientFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  Ukey2ClientFinished* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_key_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.public_key_.Set(from._internal_public_key(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:securegcm.Ukey2ClientFinished)
}

inline void Ukey2ClientFinished::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_key_) {}

  };
  _impl_.public_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Ukey2ClientFinished::~Ukey2ClientFinished() {
  // @@protoc_insertion_point(destructor:securegcm.Ukey2ClientFinished)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Ukey2ClientFinished::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.public_key_.Destroy();
}

void Ukey2ClientFinished::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void Ukey2ClientFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.Ukey2ClientFinished)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.public_key_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* Ukey2ClientFinished::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes public_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_public_key();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* Ukey2ClientFinished::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.Ukey2ClientFinished)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes public_key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_public_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.Ukey2ClientFinished)
  return target;
}

::size_t Ukey2ClientFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.Ukey2ClientFinished)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes public_key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_public_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ukey2ClientFinished::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const Ukey2ClientFinished*>(
      &from));
}

void Ukey2ClientFinished::MergeFrom(const Ukey2ClientFinished& from) {
  Ukey2ClientFinished* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.Ukey2ClientFinished)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_public_key(from._internal_public_key());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void Ukey2ClientFinished::CopyFrom(const Ukey2ClientFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.Ukey2ClientFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ukey2ClientFinished::IsInitialized() const {
  return true;
}

void Ukey2ClientFinished::InternalSwap(Ukey2ClientFinished* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.public_key_, lhs_arena,
                                       &other->_impl_.public_key_, rhs_arena);
}

std::string Ukey2ClientFinished::GetTypeName() const {
  return "securegcm.Ukey2ClientFinished";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2Message*
Arena::CreateMaybeMessage< ::securegcm::Ukey2Message >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2Message >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2Alert*
Arena::CreateMaybeMessage< ::securegcm::Ukey2Alert >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2Alert >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2ClientInit_CipherCommitment*
Arena::CreateMaybeMessage< ::securegcm::Ukey2ClientInit_CipherCommitment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2ClientInit_CipherCommitment >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2ClientInit*
Arena::CreateMaybeMessage< ::securegcm::Ukey2ClientInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2ClientInit >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2ServerInit*
Arena::CreateMaybeMessage< ::securegcm::Ukey2ServerInit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2ServerInit >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::Ukey2ClientFinished*
Arena::CreateMaybeMessage< ::securegcm::Ukey2ClientFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::Ukey2ClientFinished >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
