// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device_to_device_messages.proto

#include "device_to_device_messages.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace securegcm {
PROTOBUF_CONSTEXPR DeviceToDeviceMessage::DeviceToDeviceMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.message_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.sequence_number_)*/ 0
} {}
struct DeviceToDeviceMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeviceToDeviceMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeviceToDeviceMessageDefaultTypeInternal() {}
  union {
    DeviceToDeviceMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeviceToDeviceMessageDefaultTypeInternal _DeviceToDeviceMessage_default_instance_;
PROTOBUF_CONSTEXPR InitiatorHello::InitiatorHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_dh_key_)*/nullptr
  , /*decltype(_impl_.protocol_version_)*/ 0
} {}
struct InitiatorHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InitiatorHelloDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InitiatorHelloDefaultTypeInternal() {}
  union {
    InitiatorHello _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InitiatorHelloDefaultTypeInternal _InitiatorHello_default_instance_;
PROTOBUF_CONSTEXPR ResponderHello::ResponderHello(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.public_dh_key_)*/nullptr
  , /*decltype(_impl_.protocol_version_)*/ 0
} {}
struct ResponderHelloDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResponderHelloDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResponderHelloDefaultTypeInternal() {}
  union {
    ResponderHello _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResponderHelloDefaultTypeInternal _ResponderHello_default_instance_;
PROTOBUF_CONSTEXPR EcPoint::EcPoint(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.x_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.y_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.curve_)*/ 1
} {}
struct EcPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EcPointDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EcPointDefaultTypeInternal() {}
  union {
    EcPoint _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EcPointDefaultTypeInternal _EcPoint_default_instance_;
PROTOBUF_CONSTEXPR SpakeHandshakeMessage::SpakeHandshakeMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.hash_value_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.payload_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.ec_point_)*/nullptr
  , /*decltype(_impl_.flow_number_)*/ 0
} {}
struct SpakeHandshakeMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpakeHandshakeMessageDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpakeHandshakeMessageDefaultTypeInternal() {}
  union {
    SpakeHandshakeMessage _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpakeHandshakeMessageDefaultTypeInternal _SpakeHandshakeMessage_default_instance_;
}  // namespace securegcm
namespace securegcm {
bool Curve_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    Curve_strings[1] = {};

static const char Curve_names[] = {
    "ED_25519"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry Curve_entries[] =
    {
        {{&Curve_names[0], 8}, 1},
};

static const int Curve_entries_by_number[] = {
    0,  // 1 -> ED_25519
};

const std::string& Curve_Name(Curve value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          Curve_entries, Curve_entries_by_number,
          1, Curve_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      Curve_entries, Curve_entries_by_number, 1,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : Curve_strings[idx].get();
}

bool Curve_Parse(absl::string_view name, Curve* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      Curve_entries, 1, name, &int_value);
  if (success) {
    *value = static_cast<Curve>(int_value);
  }
  return success;
}
// ===================================================================

class DeviceToDeviceMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceToDeviceMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DeviceToDeviceMessage, _impl_._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_sequence_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

DeviceToDeviceMessage::DeviceToDeviceMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.DeviceToDeviceMessage)
}
DeviceToDeviceMessage::DeviceToDeviceMessage(const DeviceToDeviceMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DeviceToDeviceMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.sequence_number_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.message_.Set(from._internal_message(), _this->GetArenaForAllocation());
  }
  _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
  // @@protoc_insertion_point(copy_constructor:securegcm.DeviceToDeviceMessage)
}

inline void DeviceToDeviceMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.message_) {}

    , decltype(_impl_.sequence_number_) { 0 }

  };
  _impl_.message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.message_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeviceToDeviceMessage::~DeviceToDeviceMessage() {
  // @@protoc_insertion_point(destructor:securegcm.DeviceToDeviceMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeviceToDeviceMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.message_.Destroy();
}

void DeviceToDeviceMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DeviceToDeviceMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.DeviceToDeviceMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.message_.ClearNonDefaultToEmpty();
  }
  _impl_.sequence_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DeviceToDeviceMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 sequence_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_sequence_number(&has_bits);
          _impl_.sequence_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DeviceToDeviceMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.DeviceToDeviceMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes message = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_message();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional int32 sequence_number = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_sequence_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.DeviceToDeviceMessage)
  return target;
}

::size_t DeviceToDeviceMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.DeviceToDeviceMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes message = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_message());
    }

    // optional int32 sequence_number = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_sequence_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceToDeviceMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DeviceToDeviceMessage*>(
      &from));
}

void DeviceToDeviceMessage::MergeFrom(const DeviceToDeviceMessage& from) {
  DeviceToDeviceMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.DeviceToDeviceMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_message(from._internal_message());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.sequence_number_ = from._impl_.sequence_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DeviceToDeviceMessage::CopyFrom(const DeviceToDeviceMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.DeviceToDeviceMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceToDeviceMessage::IsInitialized() const {
  return true;
}

void DeviceToDeviceMessage::InternalSwap(DeviceToDeviceMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.message_, lhs_arena,
                                       &other->_impl_.message_, rhs_arena);

  swap(_impl_.sequence_number_, other->_impl_.sequence_number_);
}

std::string DeviceToDeviceMessage::GetTypeName() const {
  return "securegcm.DeviceToDeviceMessage";
}

// ===================================================================

class InitiatorHello::_Internal {
 public:
  using HasBits = decltype(std::declval<InitiatorHello>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(InitiatorHello, _impl_._has_bits_);
  static const ::securemessage::GenericPublicKey& public_dh_key(const InitiatorHello* msg);
  static void set_has_public_dh_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::securemessage::GenericPublicKey&
InitiatorHello::_Internal::public_dh_key(const InitiatorHello* msg) {
  return *msg->_impl_.public_dh_key_;
}
void InitiatorHello::clear_public_dh_key() {
  if (_impl_.public_dh_key_ != nullptr) _impl_.public_dh_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
InitiatorHello::InitiatorHello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.InitiatorHello)
}
InitiatorHello::InitiatorHello(const InitiatorHello& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  InitiatorHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_dh_key_){nullptr}
    , decltype(_impl_.protocol_version_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.public_dh_key_ = new ::securemessage::GenericPublicKey(*from._impl_.public_dh_key_);
  }
  _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:securegcm.InitiatorHello)
}

inline void InitiatorHello::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_dh_key_){nullptr}
    , decltype(_impl_.protocol_version_) { 0 }

  };
}

InitiatorHello::~InitiatorHello() {
  // @@protoc_insertion_point(destructor:securegcm.InitiatorHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InitiatorHello::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.public_dh_key_;
}

void InitiatorHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InitiatorHello::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.InitiatorHello)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.public_dh_key_ != nullptr);
    _impl_.public_dh_key_->Clear();
  }
  _impl_.protocol_version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* InitiatorHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .securemessage.GenericPublicKey public_dh_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_dh_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 protocol_version = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_protocol_version(&has_bits);
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* InitiatorHello::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.InitiatorHello)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .securemessage.GenericPublicKey public_dh_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_dh_key(this),
        _Internal::public_dh_key(this).GetCachedSize(), target, stream);
  }

  // optional int32 protocol_version = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.InitiatorHello)
  return target;
}

::size_t InitiatorHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.InitiatorHello)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .securemessage.GenericPublicKey public_dh_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.public_dh_key_);
    }

    // optional int32 protocol_version = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitiatorHello::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const InitiatorHello*>(
      &from));
}

void InitiatorHello::MergeFrom(const InitiatorHello& from) {
  InitiatorHello* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.InitiatorHello)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_public_dh_key()->::securemessage::GenericPublicKey::MergeFrom(
          from._internal_public_dh_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void InitiatorHello::CopyFrom(const InitiatorHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.InitiatorHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiatorHello::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.public_dh_key_->IsInitialized()) return false;
  }
  return true;
}

void InitiatorHello::InternalSwap(InitiatorHello* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiatorHello, _impl_.protocol_version_)
      + sizeof(InitiatorHello::_impl_.protocol_version_)
      - PROTOBUF_FIELD_OFFSET(InitiatorHello, _impl_.public_dh_key_)>(
          reinterpret_cast<char*>(&_impl_.public_dh_key_),
          reinterpret_cast<char*>(&other->_impl_.public_dh_key_));
}

std::string InitiatorHello::GetTypeName() const {
  return "securegcm.InitiatorHello";
}

// ===================================================================

class ResponderHello::_Internal {
 public:
  using HasBits = decltype(std::declval<ResponderHello>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ResponderHello, _impl_._has_bits_);
  static const ::securemessage::GenericPublicKey& public_dh_key(const ResponderHello* msg);
  static void set_has_public_dh_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_protocol_version(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::securemessage::GenericPublicKey&
ResponderHello::_Internal::public_dh_key(const ResponderHello* msg) {
  return *msg->_impl_.public_dh_key_;
}
void ResponderHello::clear_public_dh_key() {
  if (_impl_.public_dh_key_ != nullptr) _impl_.public_dh_key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
ResponderHello::ResponderHello(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.ResponderHello)
}
ResponderHello::ResponderHello(const ResponderHello& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  ResponderHello* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_dh_key_){nullptr}
    , decltype(_impl_.protocol_version_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.public_dh_key_ = new ::securemessage::GenericPublicKey(*from._impl_.public_dh_key_);
  }
  _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
  // @@protoc_insertion_point(copy_constructor:securegcm.ResponderHello)
}

inline void ResponderHello::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.public_dh_key_){nullptr}
    , decltype(_impl_.protocol_version_) { 0 }

  };
}

ResponderHello::~ResponderHello() {
  // @@protoc_insertion_point(destructor:securegcm.ResponderHello)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResponderHello::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.public_dh_key_;
}

void ResponderHello::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ResponderHello::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.ResponderHello)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.public_dh_key_ != nullptr);
    _impl_.public_dh_key_->Clear();
  }
  _impl_.protocol_version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ResponderHello::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .securemessage.GenericPublicKey public_dh_key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_public_dh_key(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 protocol_version = 2 [default = 0];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_protocol_version(&has_bits);
          _impl_.protocol_version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* ResponderHello::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.ResponderHello)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .securemessage.GenericPublicKey public_dh_key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::public_dh_key(this),
        _Internal::public_dh_key(this).GetCachedSize(), target, stream);
  }

  // optional int32 protocol_version = 2 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_protocol_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.ResponderHello)
  return target;
}

::size_t ResponderHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.ResponderHello)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .securemessage.GenericPublicKey public_dh_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.public_dh_key_);
    }

    // optional int32 protocol_version = 2 [default = 0];
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_protocol_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ResponderHello::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const ResponderHello*>(
      &from));
}

void ResponderHello::MergeFrom(const ResponderHello& from) {
  ResponderHello* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.ResponderHello)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_public_dh_key()->::securemessage::GenericPublicKey::MergeFrom(
          from._internal_public_dh_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.protocol_version_ = from._impl_.protocol_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ResponderHello::CopyFrom(const ResponderHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.ResponderHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponderHello::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    if (!_impl_.public_dh_key_->IsInitialized()) return false;
  }
  return true;
}

void ResponderHello::InternalSwap(ResponderHello* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponderHello, _impl_.protocol_version_)
      + sizeof(ResponderHello::_impl_.protocol_version_)
      - PROTOBUF_FIELD_OFFSET(ResponderHello, _impl_.public_dh_key_)>(
          reinterpret_cast<char*>(&_impl_.public_dh_key_),
          reinterpret_cast<char*>(&other->_impl_.public_dh_key_));
}

std::string ResponderHello::GetTypeName() const {
  return "securegcm.ResponderHello";
}

// ===================================================================

class EcPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<EcPoint>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(EcPoint, _impl_._has_bits_);
  static void set_has_curve(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

EcPoint::EcPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.EcPoint)
}
EcPoint::EcPoint(const EcPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  EcPoint* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}

    , decltype(_impl_.curve_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.x_.Set(from._internal_x(), _this->GetArenaForAllocation());
  }
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.y_.Set(from._internal_y(), _this->GetArenaForAllocation());
  }
  _this->_impl_.curve_ = from._impl_.curve_;
  // @@protoc_insertion_point(copy_constructor:securegcm.EcPoint)
}

inline void EcPoint::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.x_) {}

    , decltype(_impl_.y_) {}

    , decltype(_impl_.curve_) { 1 }

  };
  _impl_.x_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.x_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.y_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.y_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EcPoint::~EcPoint() {
  // @@protoc_insertion_point(destructor:securegcm.EcPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EcPoint::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.x_.Destroy();
  _impl_.y_.Destroy();
}

void EcPoint::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EcPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.EcPoint)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.x_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.y_.ClearNonDefaultToEmpty();
    }
    _impl_.curve_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* EcPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .securegcm.Curve curve = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::securegcm::Curve_IsValid(static_cast<int>(val)))) {
            _internal_set_curve(static_cast<::securegcm::Curve>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes x = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_x();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // required bytes y = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_y();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* EcPoint::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.EcPoint)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .securegcm.Curve curve = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_curve(), target);
  }

  // required bytes x = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_x();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  // required bytes y = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_y();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.EcPoint)
  return target;
}

::size_t EcPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:securegcm.EcPoint)
  ::size_t total_size = 0;

  if ((_impl_._has_bits_[0] & 0x00000001u) != 0) {
    // required bytes x = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_x());
  }

  if ((_impl_._has_bits_[0] & 0x00000002u) != 0) {
    // required bytes y = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_y());
  }

  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    // required .securegcm.Curve curve = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_curve());
  }

  return total_size;
}
::size_t EcPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.EcPoint)
  ::size_t total_size = 0;

  if (((_impl_._has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes x = 2;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_x());

    // required bytes y = 3;
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_y());

    // required .securegcm.Curve curve = 1;
    total_size += 1 +
                  ::_pbi::WireFormatLite::EnumSize(this->_internal_curve());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EcPoint::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const EcPoint*>(
      &from));
}

void EcPoint::MergeFrom(const EcPoint& from) {
  EcPoint* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.EcPoint)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_x(from._internal_x());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_y(from._internal_y());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.curve_ = from._impl_.curve_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void EcPoint::CopyFrom(const EcPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.EcPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EcPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  return true;
}

void EcPoint::InternalSwap(EcPoint* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.x_, lhs_arena,
                                       &other->_impl_.x_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.y_, lhs_arena,
                                       &other->_impl_.y_, rhs_arena);
  swap(_impl_.curve_, other->_impl_.curve_);
}

std::string EcPoint::GetTypeName() const {
  return "securegcm.EcPoint";
}

// ===================================================================

class SpakeHandshakeMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<SpakeHandshakeMessage>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SpakeHandshakeMessage, _impl_._has_bits_);
  static void set_has_flow_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::securegcm::EcPoint& ec_point(const SpakeHandshakeMessage* msg);
  static void set_has_ec_point(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_hash_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_payload(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::securegcm::EcPoint&
SpakeHandshakeMessage::_Internal::ec_point(const SpakeHandshakeMessage* msg) {
  return *msg->_impl_.ec_point_;
}
SpakeHandshakeMessage::SpakeHandshakeMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:securegcm.SpakeHandshakeMessage)
}
SpakeHandshakeMessage::SpakeHandshakeMessage(const SpakeHandshakeMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SpakeHandshakeMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_value_) {}

    , decltype(_impl_.payload_) {}

    , decltype(_impl_.ec_point_){nullptr}
    , decltype(_impl_.flow_number_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.hash_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.hash_value_.Set(from._internal_hash_value(), _this->GetArenaForAllocation());
  }
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.payload_.Set(from._internal_payload(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.ec_point_ = new ::securegcm::EcPoint(*from._impl_.ec_point_);
  }
  _this->_impl_.flow_number_ = from._impl_.flow_number_;
  // @@protoc_insertion_point(copy_constructor:securegcm.SpakeHandshakeMessage)
}

inline void SpakeHandshakeMessage::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.hash_value_) {}

    , decltype(_impl_.payload_) {}

    , decltype(_impl_.ec_point_){nullptr}
    , decltype(_impl_.flow_number_) { 0 }

  };
  _impl_.hash_value_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.hash_value_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.payload_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.payload_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpakeHandshakeMessage::~SpakeHandshakeMessage() {
  // @@protoc_insertion_point(destructor:securegcm.SpakeHandshakeMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpakeHandshakeMessage::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.hash_value_.Destroy();
  _impl_.payload_.Destroy();
  if (this != internal_default_instance()) delete _impl_.ec_point_;
}

void SpakeHandshakeMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpakeHandshakeMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:securegcm.SpakeHandshakeMessage)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.hash_value_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.payload_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.ec_point_ != nullptr);
      _impl_.ec_point_->Clear();
    }
  }
  _impl_.flow_number_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SpakeHandshakeMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional int32 flow_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          _Internal::set_has_flow_number(&has_bits);
          _impl_.flow_number_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .securegcm.EcPoint ec_point = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ec_point(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes hash_value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hash_value();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional bytes payload = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_payload();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SpakeHandshakeMessage::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:securegcm.SpakeHandshakeMessage)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 flow_number = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        1, this->_internal_flow_number(), target);
  }

  // optional .securegcm.EcPoint ec_point = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::ec_point(this),
        _Internal::ec_point(this).GetCachedSize(), target, stream);
  }

  // optional bytes hash_value = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_hash_value();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // optional bytes payload = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_payload();
    target = stream->WriteBytesMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:securegcm.SpakeHandshakeMessage)
  return target;
}

::size_t SpakeHandshakeMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:securegcm.SpakeHandshakeMessage)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional bytes hash_value = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_hash_value());
    }

    // optional bytes payload = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_payload());
    }

    // optional .securegcm.EcPoint ec_point = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.ec_point_);
    }

    // optional int32 flow_number = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_flow_number());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SpakeHandshakeMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SpakeHandshakeMessage*>(
      &from));
}

void SpakeHandshakeMessage::MergeFrom(const SpakeHandshakeMessage& from) {
  SpakeHandshakeMessage* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:securegcm.SpakeHandshakeMessage)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_hash_value(from._internal_hash_value());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_payload(from._internal_payload());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_ec_point()->::securegcm::EcPoint::MergeFrom(
          from._internal_ec_point());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.flow_number_ = from._impl_.flow_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SpakeHandshakeMessage::CopyFrom(const SpakeHandshakeMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:securegcm.SpakeHandshakeMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpakeHandshakeMessage::IsInitialized() const {
  if ((_impl_._has_bits_[0] & 0x00000004u) != 0) {
    if (!_impl_.ec_point_->IsInitialized()) return false;
  }
  return true;
}

void SpakeHandshakeMessage::InternalSwap(SpakeHandshakeMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.hash_value_, lhs_arena,
                                       &other->_impl_.hash_value_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payload_, lhs_arena,
                                       &other->_impl_.payload_, rhs_arena);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpakeHandshakeMessage, _impl_.flow_number_)
      + sizeof(SpakeHandshakeMessage::_impl_.flow_number_)
      - PROTOBUF_FIELD_OFFSET(SpakeHandshakeMessage, _impl_.ec_point_)>(
          reinterpret_cast<char*>(&_impl_.ec_point_),
          reinterpret_cast<char*>(&other->_impl_.ec_point_));
}

std::string SpakeHandshakeMessage::GetTypeName() const {
  return "securegcm.SpakeHandshakeMessage";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace securegcm
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::securegcm::DeviceToDeviceMessage*
Arena::CreateMaybeMessage< ::securegcm::DeviceToDeviceMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::DeviceToDeviceMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::InitiatorHello*
Arena::CreateMaybeMessage< ::securegcm::InitiatorHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::InitiatorHello >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::ResponderHello*
Arena::CreateMaybeMessage< ::securegcm::ResponderHello >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::ResponderHello >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::EcPoint*
Arena::CreateMaybeMessage< ::securegcm::EcPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::EcPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::securegcm::SpakeHandshakeMessage*
Arena::CreateMaybeMessage< ::securegcm::SpakeHandshakeMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::securegcm::SpakeHandshakeMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
