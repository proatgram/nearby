// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/mediums/ble_frames.proto

#include "proto/mediums/ble_frames.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/io/zero_copy_stream_impl_lite.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = ::PROTOBUF_NAMESPACE_ID::internal;
namespace location {
namespace nearby {
namespace mediums {
PROTOBUF_CONSTEXPR SocketControlFrame::SocketControlFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.introduction_)*/nullptr
  , /*decltype(_impl_.disconnection_)*/nullptr
  , /*decltype(_impl_.packet_acknowledgement_)*/nullptr
  , /*decltype(_impl_.type_)*/ 0
} {}
struct SocketControlFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SocketControlFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SocketControlFrameDefaultTypeInternal() {}
  union {
    SocketControlFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SocketControlFrameDefaultTypeInternal _SocketControlFrame_default_instance_;
PROTOBUF_CONSTEXPR IntroductionFrame::IntroductionFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_id_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.service_id_hash_salt_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.socket_version_)*/ 0
} {}
struct IntroductionFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntroductionFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntroductionFrameDefaultTypeInternal() {}
  union {
    IntroductionFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntroductionFrameDefaultTypeInternal _IntroductionFrame_default_instance_;
PROTOBUF_CONSTEXPR DisconnectionFrame::DisconnectionFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_id_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }
} {}
struct DisconnectionFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DisconnectionFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DisconnectionFrameDefaultTypeInternal() {}
  union {
    DisconnectionFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DisconnectionFrameDefaultTypeInternal _DisconnectionFrame_default_instance_;
PROTOBUF_CONSTEXPR PacketAcknowledgementFrame::PacketAcknowledgementFrame(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.service_id_hash_)*/ {
    &::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized {}
  }

  , /*decltype(_impl_.received_size_)*/ 0
} {}
struct PacketAcknowledgementFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PacketAcknowledgementFrameDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~PacketAcknowledgementFrameDefaultTypeInternal() {}
  union {
    PacketAcknowledgementFrame _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PacketAcknowledgementFrameDefaultTypeInternal _PacketAcknowledgementFrame_default_instance_;
}  // namespace mediums
}  // namespace nearby
}  // namespace location
namespace location {
namespace nearby {
namespace mediums {
bool SocketControlFrame_ControlFrameType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    SocketControlFrame_ControlFrameType_strings[4] = {};

static const char SocketControlFrame_ControlFrameType_names[] = {
    "DISCONNECTION"
    "INTRODUCTION"
    "PACKET_ACKNOWLEDGEMENT"
    "UNKNOWN_CONTROL_FRAME_TYPE"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketControlFrame_ControlFrameType_entries[] =
    {
        {{&SocketControlFrame_ControlFrameType_names[0], 13}, 2},
        {{&SocketControlFrame_ControlFrameType_names[13], 12}, 1},
        {{&SocketControlFrame_ControlFrameType_names[25], 22}, 3},
        {{&SocketControlFrame_ControlFrameType_names[47], 26}, 0},
};

static const int SocketControlFrame_ControlFrameType_entries_by_number[] = {
    3,  // 0 -> UNKNOWN_CONTROL_FRAME_TYPE
    1,  // 1 -> INTRODUCTION
    0,  // 2 -> DISCONNECTION
    2,  // 3 -> PACKET_ACKNOWLEDGEMENT
};

const std::string& SocketControlFrame_ControlFrameType_Name(SocketControlFrame_ControlFrameType value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketControlFrame_ControlFrameType_entries, SocketControlFrame_ControlFrameType_entries_by_number,
          4, SocketControlFrame_ControlFrameType_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketControlFrame_ControlFrameType_entries, SocketControlFrame_ControlFrameType_entries_by_number, 4,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : SocketControlFrame_ControlFrameType_strings[idx].get();
}

bool SocketControlFrame_ControlFrameType_Parse(absl::string_view name, SocketControlFrame_ControlFrameType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketControlFrame_ControlFrameType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<SocketControlFrame_ControlFrameType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr SocketControlFrame_ControlFrameType SocketControlFrame::UNKNOWN_CONTROL_FRAME_TYPE;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::INTRODUCTION;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::DISCONNECTION;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::PACKET_ACKNOWLEDGEMENT;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::ControlFrameType_MIN;
constexpr SocketControlFrame_ControlFrameType SocketControlFrame::ControlFrameType_MAX;
constexpr int SocketControlFrame::ControlFrameType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool SocketVersion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}
static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string>
    SocketVersion_strings[3] = {};

static const char SocketVersion_names[] = {
    "UNKNOWN_SOCKET_VERSION"
    "V1"
    "V2"
};

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry SocketVersion_entries[] =
    {
        {{&SocketVersion_names[0], 22}, 0},
        {{&SocketVersion_names[22], 2}, 1},
        {{&SocketVersion_names[24], 2}, 2},
};

static const int SocketVersion_entries_by_number[] = {
    0,  // 0 -> UNKNOWN_SOCKET_VERSION
    1,  // 1 -> V1
    2,  // 2 -> V2
};

const std::string& SocketVersion_Name(SocketVersion value) {
  static const bool kDummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          SocketVersion_entries, SocketVersion_entries_by_number,
          3, SocketVersion_strings);
  (void)kDummy;

  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      SocketVersion_entries, SocketVersion_entries_by_number, 3,
      value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString()
                   : SocketVersion_strings[idx].get();
}

bool SocketVersion_Parse(absl::string_view name, SocketVersion* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      SocketVersion_entries, 3, name, &int_value);
  if (success) {
    *value = static_cast<SocketVersion>(int_value);
  }
  return success;
}
// ===================================================================

class SocketControlFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<SocketControlFrame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SocketControlFrame, _impl_._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::location::nearby::mediums::IntroductionFrame& introduction(const SocketControlFrame* msg);
  static void set_has_introduction(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::location::nearby::mediums::DisconnectionFrame& disconnection(const SocketControlFrame* msg);
  static void set_has_disconnection(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::location::nearby::mediums::PacketAcknowledgementFrame& packet_acknowledgement(const SocketControlFrame* msg);
  static void set_has_packet_acknowledgement(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::location::nearby::mediums::IntroductionFrame&
SocketControlFrame::_Internal::introduction(const SocketControlFrame* msg) {
  return *msg->_impl_.introduction_;
}
const ::location::nearby::mediums::DisconnectionFrame&
SocketControlFrame::_Internal::disconnection(const SocketControlFrame* msg) {
  return *msg->_impl_.disconnection_;
}
const ::location::nearby::mediums::PacketAcknowledgementFrame&
SocketControlFrame::_Internal::packet_acknowledgement(const SocketControlFrame* msg) {
  return *msg->_impl_.packet_acknowledgement_;
}
SocketControlFrame::SocketControlFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.SocketControlFrame)
}
SocketControlFrame::SocketControlFrame(const SocketControlFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  SocketControlFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.introduction_){nullptr}
    , decltype(_impl_.disconnection_){nullptr}
    , decltype(_impl_.packet_acknowledgement_){nullptr}
    , decltype(_impl_.type_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.introduction_ = new ::location::nearby::mediums::IntroductionFrame(*from._impl_.introduction_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.disconnection_ = new ::location::nearby::mediums::DisconnectionFrame(*from._impl_.disconnection_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.packet_acknowledgement_ = new ::location::nearby::mediums::PacketAcknowledgementFrame(*from._impl_.packet_acknowledgement_);
  }
  _this->_impl_.type_ = from._impl_.type_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.SocketControlFrame)
}

inline void SocketControlFrame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.introduction_){nullptr}
    , decltype(_impl_.disconnection_){nullptr}
    , decltype(_impl_.packet_acknowledgement_){nullptr}
    , decltype(_impl_.type_) { 0 }

  };
}

SocketControlFrame::~SocketControlFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.SocketControlFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SocketControlFrame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.introduction_;
  if (this != internal_default_instance()) delete _impl_.disconnection_;
  if (this != internal_default_instance()) delete _impl_.packet_acknowledgement_;
}

void SocketControlFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SocketControlFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.SocketControlFrame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.introduction_ != nullptr);
      _impl_.introduction_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.disconnection_ != nullptr);
      _impl_.disconnection_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.packet_acknowledgement_ != nullptr);
      _impl_.packet_acknowledgement_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* SocketControlFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 8)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::mediums::SocketControlFrame_ControlFrameType_IsValid(static_cast<int>(val)))) {
            _internal_set_type(static_cast<::location::nearby::mediums::SocketControlFrame_ControlFrameType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_introduction(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_disconnection(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_packet_acknowledgement(), ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* SocketControlFrame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.SocketControlFrame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        1, this->_internal_type(), target);
  }

  // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::introduction(this),
        _Internal::introduction(this).GetCachedSize(), target, stream);
  }

  // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::disconnection(this),
        _Internal::disconnection(this).GetCachedSize(), target, stream);
  }

  // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::packet_acknowledgement(this),
        _Internal::packet_acknowledgement(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.SocketControlFrame)
  return target;
}

::size_t SocketControlFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.SocketControlFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.introduction_);
    }

    // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.disconnection_);
    }

    // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.packet_acknowledgement_);
    }

    // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_type());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SocketControlFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const SocketControlFrame*>(
      &from));
}

void SocketControlFrame::MergeFrom(const SocketControlFrame& from) {
  SocketControlFrame* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.SocketControlFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_introduction()->::location::nearby::mediums::IntroductionFrame::MergeFrom(
          from._internal_introduction());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_disconnection()->::location::nearby::mediums::DisconnectionFrame::MergeFrom(
          from._internal_disconnection());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_packet_acknowledgement()->::location::nearby::mediums::PacketAcknowledgementFrame::MergeFrom(
          from._internal_packet_acknowledgement());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.type_ = from._impl_.type_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void SocketControlFrame::CopyFrom(const SocketControlFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.SocketControlFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SocketControlFrame::IsInitialized() const {
  return true;
}

void SocketControlFrame::InternalSwap(SocketControlFrame* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SocketControlFrame, _impl_.type_)
      + sizeof(SocketControlFrame::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(SocketControlFrame, _impl_.introduction_)>(
          reinterpret_cast<char*>(&_impl_.introduction_),
          reinterpret_cast<char*>(&other->_impl_.introduction_));
}

std::string SocketControlFrame::GetTypeName() const {
  return "location.nearby.mediums.SocketControlFrame";
}

// ===================================================================

class IntroductionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<IntroductionFrame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(IntroductionFrame, _impl_._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_socket_version(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_service_id_hash_salt(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

IntroductionFrame::IntroductionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.IntroductionFrame)
}
IntroductionFrame::IntroductionFrame(const IntroductionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  IntroductionFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}

    , decltype(_impl_.service_id_hash_salt_) {}

    , decltype(_impl_.socket_version_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.service_id_hash_.Set(from._internal_service_id_hash(), _this->GetArenaForAllocation());
  }
  _impl_.service_id_hash_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.service_id_hash_salt_.Set(from._internal_service_id_hash_salt(), _this->GetArenaForAllocation());
  }
  _this->_impl_.socket_version_ = from._impl_.socket_version_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.IntroductionFrame)
}

inline void IntroductionFrame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}

    , decltype(_impl_.service_id_hash_salt_) {}

    , decltype(_impl_.socket_version_) { 0 }

  };
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_hash_salt_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IntroductionFrame::~IntroductionFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.IntroductionFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntroductionFrame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_id_hash_.Destroy();
  _impl_.service_id_hash_salt_.Destroy();
}

void IntroductionFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IntroductionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.IntroductionFrame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.service_id_hash_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.service_id_hash_salt_.ClearNonDefaultToEmpty();
    }
  }
  _impl_.socket_version_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* IntroductionFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional .location.nearby.mediums.SocketVersion socket_version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          ::int32_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::location::nearby::mediums::SocketVersion_IsValid(static_cast<int>(val)))) {
            _internal_set_socket_version(static_cast<::location::nearby::mediums::SocketVersion>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else {
          goto handle_unusual;
        }
        continue;
      // optional string service_id_hash_salt = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_service_id_hash_salt();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* IntroductionFrame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.IntroductionFrame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_service_id_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional .location.nearby.mediums.SocketVersion socket_version = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_socket_version(), target);
  }

  // optional string service_id_hash_salt = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_service_id_hash_salt();
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.IntroductionFrame)
  return target;
}

::size_t IntroductionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.IntroductionFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional bytes service_id_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_service_id_hash());
    }

    // optional string service_id_hash_salt = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
                                      this->_internal_service_id_hash_salt());
    }

    // optional .location.nearby.mediums.SocketVersion socket_version = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
                    ::_pbi::WireFormatLite::EnumSize(this->_internal_socket_version());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IntroductionFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const IntroductionFrame*>(
      &from));
}

void IntroductionFrame::MergeFrom(const IntroductionFrame& from) {
  IntroductionFrame* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.IntroductionFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_service_id_hash(from._internal_service_id_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_service_id_hash_salt(from._internal_service_id_hash_salt());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.socket_version_ = from._impl_.socket_version_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void IntroductionFrame::CopyFrom(const IntroductionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.IntroductionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntroductionFrame::IsInitialized() const {
  return true;
}

void IntroductionFrame::InternalSwap(IntroductionFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_id_hash_, lhs_arena,
                                       &other->_impl_.service_id_hash_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_id_hash_salt_, lhs_arena,
                                       &other->_impl_.service_id_hash_salt_, rhs_arena);
  swap(_impl_.socket_version_, other->_impl_.socket_version_);
}

std::string IntroductionFrame::GetTypeName() const {
  return "location.nearby.mediums.IntroductionFrame";
}

// ===================================================================

class DisconnectionFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<DisconnectionFrame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DisconnectionFrame, _impl_._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DisconnectionFrame::DisconnectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.DisconnectionFrame)
}
DisconnectionFrame::DisconnectionFrame(const DisconnectionFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  DisconnectionFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.service_id_hash_.Set(from._internal_service_id_hash(), _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.DisconnectionFrame)
}

inline void DisconnectionFrame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}

  };
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DisconnectionFrame::~DisconnectionFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.DisconnectionFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DisconnectionFrame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_id_hash_.Destroy();
}

void DisconnectionFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void DisconnectionFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.DisconnectionFrame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.service_id_hash_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* DisconnectionFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* DisconnectionFrame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.DisconnectionFrame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_service_id_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.DisconnectionFrame)
  return target;
}

::size_t DisconnectionFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.DisconnectionFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional bytes service_id_hash = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                    this->_internal_service_id_hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DisconnectionFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const DisconnectionFrame*>(
      &from));
}

void DisconnectionFrame::MergeFrom(const DisconnectionFrame& from) {
  DisconnectionFrame* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.DisconnectionFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_service_id_hash(from._internal_service_id_hash());
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void DisconnectionFrame::CopyFrom(const DisconnectionFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.DisconnectionFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DisconnectionFrame::IsInitialized() const {
  return true;
}

void DisconnectionFrame::InternalSwap(DisconnectionFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_id_hash_, lhs_arena,
                                       &other->_impl_.service_id_hash_, rhs_arena);
}

std::string DisconnectionFrame::GetTypeName() const {
  return "location.nearby.mediums.DisconnectionFrame";
}

// ===================================================================

class PacketAcknowledgementFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<PacketAcknowledgementFrame>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(PacketAcknowledgementFrame, _impl_._has_bits_);
  static void set_has_service_id_hash(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_received_size(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

PacketAcknowledgementFrame::PacketAcknowledgementFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:location.nearby.mediums.PacketAcknowledgementFrame)
}
PacketAcknowledgementFrame::PacketAcknowledgementFrame(const PacketAcknowledgementFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite() {
  PacketAcknowledgementFrame* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}

    , decltype(_impl_.received_size_) {}
  };

  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.service_id_hash_.Set(from._internal_service_id_hash(), _this->GetArenaForAllocation());
  }
  _this->_impl_.received_size_ = from._impl_.received_size_;
  // @@protoc_insertion_point(copy_constructor:location.nearby.mediums.PacketAcknowledgementFrame)
}

inline void PacketAcknowledgementFrame::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.service_id_hash_) {}

    , decltype(_impl_.received_size_) { 0 }

  };
  _impl_.service_id_hash_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PacketAcknowledgementFrame::~PacketAcknowledgementFrame() {
  // @@protoc_insertion_point(destructor:location.nearby.mediums.PacketAcknowledgementFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<std::string>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PacketAcknowledgementFrame::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.service_id_hash_.Destroy();
}

void PacketAcknowledgementFrame::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PacketAcknowledgementFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:location.nearby.mediums.PacketAcknowledgementFrame)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.service_id_hash_.ClearNonDefaultToEmpty();
  }
  _impl_.received_size_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* PacketAcknowledgementFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bytes service_id_hash = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_service_id_hash();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      // optional int32 received_size = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::uint8_t>(tag) == 16)) {
          _Internal::set_has_received_size(&has_bits);
          _impl_.received_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else {
          goto handle_unusual;
        }
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

::uint8_t* PacketAcknowledgementFrame::_InternalSerialize(
    ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:location.nearby.mediums.PacketAcknowledgementFrame)
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes service_id_hash = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_service_id_hash();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional int32 received_size = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(
        2, this->_internal_received_size(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:location.nearby.mediums.PacketAcknowledgementFrame)
  return target;
}

::size_t PacketAcknowledgementFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:location.nearby.mediums.PacketAcknowledgementFrame)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes service_id_hash = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
                                      this->_internal_service_id_hash());
    }

    // optional int32 received_size = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_received_size());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::_pbi::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PacketAcknowledgementFrame::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::_pbi::DownCast<const PacketAcknowledgementFrame*>(
      &from));
}

void PacketAcknowledgementFrame::MergeFrom(const PacketAcknowledgementFrame& from) {
  PacketAcknowledgementFrame* const _this = this;
  // @@protoc_insertion_point(class_specific_merge_from_start:location.nearby.mediums.PacketAcknowledgementFrame)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_service_id_hash(from._internal_service_id_hash());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.received_size_ = from._impl_.received_size_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void PacketAcknowledgementFrame::CopyFrom(const PacketAcknowledgementFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:location.nearby.mediums.PacketAcknowledgementFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PacketAcknowledgementFrame::IsInitialized() const {
  return true;
}

void PacketAcknowledgementFrame::InternalSwap(PacketAcknowledgementFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.service_id_hash_, lhs_arena,
                                       &other->_impl_.service_id_hash_, rhs_arena);

  swap(_impl_.received_size_, other->_impl_.received_size_);
}

std::string PacketAcknowledgementFrame::GetTypeName() const {
  return "location.nearby.mediums.PacketAcknowledgementFrame";
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediums
}  // namespace nearby
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::SocketControlFrame*
Arena::CreateMaybeMessage< ::location::nearby::mediums::SocketControlFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::SocketControlFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::IntroductionFrame*
Arena::CreateMaybeMessage< ::location::nearby::mediums::IntroductionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::IntroductionFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::DisconnectionFrame*
Arena::CreateMaybeMessage< ::location::nearby::mediums::DisconnectionFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::DisconnectionFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::location::nearby::mediums::PacketAcknowledgementFrame*
Arena::CreateMaybeMessage< ::location::nearby::mediums::PacketAcknowledgementFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::location::nearby::mediums::PacketAcknowledgementFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
