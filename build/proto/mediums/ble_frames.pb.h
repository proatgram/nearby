// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/mediums/ble_frames.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fble_5fframes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fble_5fframes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_util.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fmediums_2fble_5fframes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmediums_2fble_5fframes_2eproto {
  static const ::uint32_t offsets[];
};
namespace location {
namespace nearby {
namespace mediums {
class DisconnectionFrame;
struct DisconnectionFrameDefaultTypeInternal;
extern DisconnectionFrameDefaultTypeInternal _DisconnectionFrame_default_instance_;
class IntroductionFrame;
struct IntroductionFrameDefaultTypeInternal;
extern IntroductionFrameDefaultTypeInternal _IntroductionFrame_default_instance_;
class PacketAcknowledgementFrame;
struct PacketAcknowledgementFrameDefaultTypeInternal;
extern PacketAcknowledgementFrameDefaultTypeInternal _PacketAcknowledgementFrame_default_instance_;
class SocketControlFrame;
struct SocketControlFrameDefaultTypeInternal;
extern SocketControlFrameDefaultTypeInternal _SocketControlFrame_default_instance_;
}  // namespace mediums
}  // namespace nearby
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template <>
::location::nearby::mediums::DisconnectionFrame* Arena::CreateMaybeMessage<::location::nearby::mediums::DisconnectionFrame>(Arena*);
template <>
::location::nearby::mediums::IntroductionFrame* Arena::CreateMaybeMessage<::location::nearby::mediums::IntroductionFrame>(Arena*);
template <>
::location::nearby::mediums::PacketAcknowledgementFrame* Arena::CreateMaybeMessage<::location::nearby::mediums::PacketAcknowledgementFrame>(Arena*);
template <>
::location::nearby::mediums::SocketControlFrame* Arena::CreateMaybeMessage<::location::nearby::mediums::SocketControlFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace location {
namespace nearby {
namespace mediums {
enum SocketControlFrame_ControlFrameType : int {
  SocketControlFrame_ControlFrameType_UNKNOWN_CONTROL_FRAME_TYPE = 0,
  SocketControlFrame_ControlFrameType_INTRODUCTION = 1,
  SocketControlFrame_ControlFrameType_DISCONNECTION = 2,
  SocketControlFrame_ControlFrameType_PACKET_ACKNOWLEDGEMENT = 3,
};

bool SocketControlFrame_ControlFrameType_IsValid(int value);
constexpr SocketControlFrame_ControlFrameType SocketControlFrame_ControlFrameType_ControlFrameType_MIN = static_cast<SocketControlFrame_ControlFrameType>(0);
constexpr SocketControlFrame_ControlFrameType SocketControlFrame_ControlFrameType_ControlFrameType_MAX = static_cast<SocketControlFrame_ControlFrameType>(3);
constexpr int SocketControlFrame_ControlFrameType_ControlFrameType_ARRAYSIZE = 3 + 1;
const std::string& SocketControlFrame_ControlFrameType_Name(SocketControlFrame_ControlFrameType value);
template <typename T>
const std::string& SocketControlFrame_ControlFrameType_Name(T value) {
  static_assert(std::is_same<T, SocketControlFrame_ControlFrameType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to ControlFrameType_Name().");
  return SocketControlFrame_ControlFrameType_Name(static_cast<SocketControlFrame_ControlFrameType>(value));
}
const std::string& SocketControlFrame_ControlFrameType_Name(SocketControlFrame_ControlFrameType value);
bool SocketControlFrame_ControlFrameType_Parse(absl::string_view name, SocketControlFrame_ControlFrameType* value);
enum SocketVersion : int {
  UNKNOWN_SOCKET_VERSION = 0,
  V1 = 1,
  V2 = 2,
};

bool SocketVersion_IsValid(int value);
constexpr SocketVersion SocketVersion_MIN = static_cast<SocketVersion>(0);
constexpr SocketVersion SocketVersion_MAX = static_cast<SocketVersion>(2);
constexpr int SocketVersion_ARRAYSIZE = 2 + 1;
const std::string& SocketVersion_Name(SocketVersion value);
template <typename T>
const std::string& SocketVersion_Name(T value) {
  static_assert(std::is_same<T, SocketVersion>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SocketVersion_Name().");
  return SocketVersion_Name(static_cast<SocketVersion>(value));
}
const std::string& SocketVersion_Name(SocketVersion value);
bool SocketVersion_Parse(absl::string_view name, SocketVersion* value);

// ===================================================================


// -------------------------------------------------------------------

class SocketControlFrame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.SocketControlFrame) */ {
 public:
  inline SocketControlFrame() : SocketControlFrame(nullptr) {}
  ~SocketControlFrame() override;
  explicit PROTOBUF_CONSTEXPR SocketControlFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SocketControlFrame(const SocketControlFrame& from);
  SocketControlFrame(SocketControlFrame&& from) noexcept
    : SocketControlFrame() {
    *this = ::std::move(from);
  }

  inline SocketControlFrame& operator=(const SocketControlFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SocketControlFrame& operator=(SocketControlFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const SocketControlFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SocketControlFrame* internal_default_instance() {
    return reinterpret_cast<const SocketControlFrame*>(
               &_SocketControlFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SocketControlFrame& a, SocketControlFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(SocketControlFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SocketControlFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SocketControlFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SocketControlFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const SocketControlFrame& from);
  void MergeFrom(const SocketControlFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SocketControlFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.SocketControlFrame";
  }
  protected:
  explicit SocketControlFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  using ControlFrameType = SocketControlFrame_ControlFrameType;
  static constexpr ControlFrameType UNKNOWN_CONTROL_FRAME_TYPE = SocketControlFrame_ControlFrameType_UNKNOWN_CONTROL_FRAME_TYPE;
  static constexpr ControlFrameType INTRODUCTION = SocketControlFrame_ControlFrameType_INTRODUCTION;
  static constexpr ControlFrameType DISCONNECTION = SocketControlFrame_ControlFrameType_DISCONNECTION;
  static constexpr ControlFrameType PACKET_ACKNOWLEDGEMENT = SocketControlFrame_ControlFrameType_PACKET_ACKNOWLEDGEMENT;
  static inline bool ControlFrameType_IsValid(int value) {
    return SocketControlFrame_ControlFrameType_IsValid(value);
  }
  static constexpr ControlFrameType ControlFrameType_MIN = SocketControlFrame_ControlFrameType_ControlFrameType_MIN;
  static constexpr ControlFrameType ControlFrameType_MAX = SocketControlFrame_ControlFrameType_ControlFrameType_MAX;
  static constexpr int ControlFrameType_ARRAYSIZE = SocketControlFrame_ControlFrameType_ControlFrameType_ARRAYSIZE;
  template <typename T>
  static inline const std::string& ControlFrameType_Name(T value) {
    return SocketControlFrame_ControlFrameType_Name(value);
  }
  static inline bool ControlFrameType_Parse(absl::string_view name, ControlFrameType* value) {
    return SocketControlFrame_ControlFrameType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIntroductionFieldNumber = 2,
    kDisconnectionFieldNumber = 3,
    kPacketAcknowledgementFieldNumber = 4,
    kTypeFieldNumber = 1,
  };
  // optional .location.nearby.mediums.IntroductionFrame introduction = 2;
  bool has_introduction() const;
  void clear_introduction() ;
  const ::location::nearby::mediums::IntroductionFrame& introduction() const;
  PROTOBUF_NODISCARD ::location::nearby::mediums::IntroductionFrame* release_introduction();
  ::location::nearby::mediums::IntroductionFrame* mutable_introduction();
  void set_allocated_introduction(::location::nearby::mediums::IntroductionFrame* introduction);
  private:
  const ::location::nearby::mediums::IntroductionFrame& _internal_introduction() const;
  ::location::nearby::mediums::IntroductionFrame* _internal_mutable_introduction();
  public:
  void unsafe_arena_set_allocated_introduction(
      ::location::nearby::mediums::IntroductionFrame* introduction);
  ::location::nearby::mediums::IntroductionFrame* unsafe_arena_release_introduction();
  // optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
  bool has_disconnection() const;
  void clear_disconnection() ;
  const ::location::nearby::mediums::DisconnectionFrame& disconnection() const;
  PROTOBUF_NODISCARD ::location::nearby::mediums::DisconnectionFrame* release_disconnection();
  ::location::nearby::mediums::DisconnectionFrame* mutable_disconnection();
  void set_allocated_disconnection(::location::nearby::mediums::DisconnectionFrame* disconnection);
  private:
  const ::location::nearby::mediums::DisconnectionFrame& _internal_disconnection() const;
  ::location::nearby::mediums::DisconnectionFrame* _internal_mutable_disconnection();
  public:
  void unsafe_arena_set_allocated_disconnection(
      ::location::nearby::mediums::DisconnectionFrame* disconnection);
  ::location::nearby::mediums::DisconnectionFrame* unsafe_arena_release_disconnection();
  // optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
  bool has_packet_acknowledgement() const;
  void clear_packet_acknowledgement() ;
  const ::location::nearby::mediums::PacketAcknowledgementFrame& packet_acknowledgement() const;
  PROTOBUF_NODISCARD ::location::nearby::mediums::PacketAcknowledgementFrame* release_packet_acknowledgement();
  ::location::nearby::mediums::PacketAcknowledgementFrame* mutable_packet_acknowledgement();
  void set_allocated_packet_acknowledgement(::location::nearby::mediums::PacketAcknowledgementFrame* packet_acknowledgement);
  private:
  const ::location::nearby::mediums::PacketAcknowledgementFrame& _internal_packet_acknowledgement() const;
  ::location::nearby::mediums::PacketAcknowledgementFrame* _internal_mutable_packet_acknowledgement();
  public:
  void unsafe_arena_set_allocated_packet_acknowledgement(
      ::location::nearby::mediums::PacketAcknowledgementFrame* packet_acknowledgement);
  ::location::nearby::mediums::PacketAcknowledgementFrame* unsafe_arena_release_packet_acknowledgement();
  // optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
  bool has_type() const;
  void clear_type() ;
  ::location::nearby::mediums::SocketControlFrame_ControlFrameType type() const;
  void set_type(::location::nearby::mediums::SocketControlFrame_ControlFrameType value);

  private:
  ::location::nearby::mediums::SocketControlFrame_ControlFrameType _internal_type() const;
  void _internal_set_type(::location::nearby::mediums::SocketControlFrame_ControlFrameType value);

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.SocketControlFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::location::nearby::mediums::IntroductionFrame* introduction_;
    ::location::nearby::mediums::DisconnectionFrame* disconnection_;
    ::location::nearby::mediums::PacketAcknowledgementFrame* packet_acknowledgement_;
    int type_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fble_5fframes_2eproto;
};// -------------------------------------------------------------------

class IntroductionFrame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.IntroductionFrame) */ {
 public:
  inline IntroductionFrame() : IntroductionFrame(nullptr) {}
  ~IntroductionFrame() override;
  explicit PROTOBUF_CONSTEXPR IntroductionFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntroductionFrame(const IntroductionFrame& from);
  IntroductionFrame(IntroductionFrame&& from) noexcept
    : IntroductionFrame() {
    *this = ::std::move(from);
  }

  inline IntroductionFrame& operator=(const IntroductionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntroductionFrame& operator=(IntroductionFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const IntroductionFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntroductionFrame* internal_default_instance() {
    return reinterpret_cast<const IntroductionFrame*>(
               &_IntroductionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(IntroductionFrame& a, IntroductionFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(IntroductionFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntroductionFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntroductionFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntroductionFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const IntroductionFrame& from);
  void MergeFrom(const IntroductionFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(IntroductionFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.IntroductionFrame";
  }
  protected:
  explicit IntroductionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdHashFieldNumber = 1,
    kServiceIdHashSaltFieldNumber = 3,
    kSocketVersionFieldNumber = 2,
  };
  // optional bytes service_id_hash = 1;
  bool has_service_id_hash() const;
  void clear_service_id_hash() ;
  const std::string& service_id_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_id_hash(Arg_&& arg, Args_... args);
  std::string* mutable_service_id_hash();
  PROTOBUF_NODISCARD std::string* release_service_id_hash();
  void set_allocated_service_id_hash(std::string* ptr);

  private:
  const std::string& _internal_service_id_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id_hash(
      const std::string& value);
  std::string* _internal_mutable_service_id_hash();

  public:
  // optional string service_id_hash_salt = 3;
  bool has_service_id_hash_salt() const;
  void clear_service_id_hash_salt() ;
  const std::string& service_id_hash_salt() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_id_hash_salt(Arg_&& arg, Args_... args);
  std::string* mutable_service_id_hash_salt();
  PROTOBUF_NODISCARD std::string* release_service_id_hash_salt();
  void set_allocated_service_id_hash_salt(std::string* ptr);

  private:
  const std::string& _internal_service_id_hash_salt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id_hash_salt(
      const std::string& value);
  std::string* _internal_mutable_service_id_hash_salt();

  public:
  // optional .location.nearby.mediums.SocketVersion socket_version = 2;
  bool has_socket_version() const;
  void clear_socket_version() ;
  ::location::nearby::mediums::SocketVersion socket_version() const;
  void set_socket_version(::location::nearby::mediums::SocketVersion value);

  private:
  ::location::nearby::mediums::SocketVersion _internal_socket_version() const;
  void _internal_set_socket_version(::location::nearby::mediums::SocketVersion value);

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.IntroductionFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_hash_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_hash_salt_;
    int socket_version_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fble_5fframes_2eproto;
};// -------------------------------------------------------------------

class DisconnectionFrame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.DisconnectionFrame) */ {
 public:
  inline DisconnectionFrame() : DisconnectionFrame(nullptr) {}
  ~DisconnectionFrame() override;
  explicit PROTOBUF_CONSTEXPR DisconnectionFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DisconnectionFrame(const DisconnectionFrame& from);
  DisconnectionFrame(DisconnectionFrame&& from) noexcept
    : DisconnectionFrame() {
    *this = ::std::move(from);
  }

  inline DisconnectionFrame& operator=(const DisconnectionFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline DisconnectionFrame& operator=(DisconnectionFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const DisconnectionFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const DisconnectionFrame* internal_default_instance() {
    return reinterpret_cast<const DisconnectionFrame*>(
               &_DisconnectionFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DisconnectionFrame& a, DisconnectionFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(DisconnectionFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DisconnectionFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DisconnectionFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DisconnectionFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const DisconnectionFrame& from);
  void MergeFrom(const DisconnectionFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DisconnectionFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.DisconnectionFrame";
  }
  protected:
  explicit DisconnectionFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdHashFieldNumber = 1,
  };
  // optional bytes service_id_hash = 1;
  bool has_service_id_hash() const;
  void clear_service_id_hash() ;
  const std::string& service_id_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_id_hash(Arg_&& arg, Args_... args);
  std::string* mutable_service_id_hash();
  PROTOBUF_NODISCARD std::string* release_service_id_hash();
  void set_allocated_service_id_hash(std::string* ptr);

  private:
  const std::string& _internal_service_id_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id_hash(
      const std::string& value);
  std::string* _internal_mutable_service_id_hash();

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.DisconnectionFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_hash_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fble_5fframes_2eproto;
};// -------------------------------------------------------------------

class PacketAcknowledgementFrame final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.PacketAcknowledgementFrame) */ {
 public:
  inline PacketAcknowledgementFrame() : PacketAcknowledgementFrame(nullptr) {}
  ~PacketAcknowledgementFrame() override;
  explicit PROTOBUF_CONSTEXPR PacketAcknowledgementFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PacketAcknowledgementFrame(const PacketAcknowledgementFrame& from);
  PacketAcknowledgementFrame(PacketAcknowledgementFrame&& from) noexcept
    : PacketAcknowledgementFrame() {
    *this = ::std::move(from);
  }

  inline PacketAcknowledgementFrame& operator=(const PacketAcknowledgementFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PacketAcknowledgementFrame& operator=(PacketAcknowledgementFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const PacketAcknowledgementFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PacketAcknowledgementFrame* internal_default_instance() {
    return reinterpret_cast<const PacketAcknowledgementFrame*>(
               &_PacketAcknowledgementFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PacketAcknowledgementFrame& a, PacketAcknowledgementFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PacketAcknowledgementFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PacketAcknowledgementFrame* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PacketAcknowledgementFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PacketAcknowledgementFrame>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const PacketAcknowledgementFrame& from);
  void MergeFrom(const PacketAcknowledgementFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(PacketAcknowledgementFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.PacketAcknowledgementFrame";
  }
  protected:
  explicit PacketAcknowledgementFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdHashFieldNumber = 1,
    kReceivedSizeFieldNumber = 2,
  };
  // optional bytes service_id_hash = 1;
  bool has_service_id_hash() const;
  void clear_service_id_hash() ;
  const std::string& service_id_hash() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_id_hash(Arg_&& arg, Args_... args);
  std::string* mutable_service_id_hash();
  PROTOBUF_NODISCARD std::string* release_service_id_hash();
  void set_allocated_service_id_hash(std::string* ptr);

  private:
  const std::string& _internal_service_id_hash() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id_hash(
      const std::string& value);
  std::string* _internal_mutable_service_id_hash();

  public:
  // optional int32 received_size = 2;
  bool has_received_size() const;
  void clear_received_size() ;
  ::int32_t received_size() const;
  void set_received_size(::int32_t value);

  private:
  ::int32_t _internal_received_size() const;
  void _internal_set_received_size(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.PacketAcknowledgementFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_hash_;
    ::int32_t received_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fble_5fframes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SocketControlFrame

// optional .location.nearby.mediums.SocketControlFrame.ControlFrameType type = 1;
inline bool SocketControlFrame::has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void SocketControlFrame::clear_type() {
  _impl_.type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::location::nearby::mediums::SocketControlFrame_ControlFrameType SocketControlFrame::type() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.SocketControlFrame.type)
  return _internal_type();
}
inline void SocketControlFrame::set_type(::location::nearby::mediums::SocketControlFrame_ControlFrameType value) {
   _internal_set_type(value);
  // @@protoc_insertion_point(field_set:location.nearby.mediums.SocketControlFrame.type)
}
inline ::location::nearby::mediums::SocketControlFrame_ControlFrameType SocketControlFrame::_internal_type() const {
  return static_cast<::location::nearby::mediums::SocketControlFrame_ControlFrameType>(_impl_.type_);
}
inline void SocketControlFrame::_internal_set_type(::location::nearby::mediums::SocketControlFrame_ControlFrameType value) {
  assert(::location::nearby::mediums::SocketControlFrame_ControlFrameType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.type_ = value;
}

// optional .location.nearby.mediums.IntroductionFrame introduction = 2;
inline bool SocketControlFrame::has_introduction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.introduction_ != nullptr);
  return value;
}
inline void SocketControlFrame::clear_introduction() {
  if (_impl_.introduction_ != nullptr) _impl_.introduction_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::location::nearby::mediums::IntroductionFrame& SocketControlFrame::_internal_introduction() const {
  const ::location::nearby::mediums::IntroductionFrame* p = _impl_.introduction_;
  return p != nullptr ? *p : reinterpret_cast<const ::location::nearby::mediums::IntroductionFrame&>(
      ::location::nearby::mediums::_IntroductionFrame_default_instance_);
}
inline const ::location::nearby::mediums::IntroductionFrame& SocketControlFrame::introduction() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.SocketControlFrame.introduction)
  return _internal_introduction();
}
inline void SocketControlFrame::unsafe_arena_set_allocated_introduction(
    ::location::nearby::mediums::IntroductionFrame* introduction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.introduction_);
  }
  _impl_.introduction_ = introduction;
  if (introduction) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.nearby.mediums.SocketControlFrame.introduction)
}
inline ::location::nearby::mediums::IntroductionFrame* SocketControlFrame::release_introduction() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::location::nearby::mediums::IntroductionFrame* temp = _impl_.introduction_;
  _impl_.introduction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::location::nearby::mediums::IntroductionFrame* SocketControlFrame::unsafe_arena_release_introduction() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.SocketControlFrame.introduction)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::location::nearby::mediums::IntroductionFrame* temp = _impl_.introduction_;
  _impl_.introduction_ = nullptr;
  return temp;
}
inline ::location::nearby::mediums::IntroductionFrame* SocketControlFrame::_internal_mutable_introduction() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.introduction_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::nearby::mediums::IntroductionFrame>(GetArenaForAllocation());
    _impl_.introduction_ = p;
  }
  return _impl_.introduction_;
}
inline ::location::nearby::mediums::IntroductionFrame* SocketControlFrame::mutable_introduction() {
  ::location::nearby::mediums::IntroductionFrame* _msg = _internal_mutable_introduction();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.SocketControlFrame.introduction)
  return _msg;
}
inline void SocketControlFrame::set_allocated_introduction(::location::nearby::mediums::IntroductionFrame* introduction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.introduction_;
  }
  if (introduction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(introduction);
    if (message_arena != submessage_arena) {
      introduction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, introduction, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.introduction_ = introduction;
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.SocketControlFrame.introduction)
}

// optional .location.nearby.mediums.DisconnectionFrame disconnection = 3;
inline bool SocketControlFrame::has_disconnection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.disconnection_ != nullptr);
  return value;
}
inline void SocketControlFrame::clear_disconnection() {
  if (_impl_.disconnection_ != nullptr) _impl_.disconnection_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::location::nearby::mediums::DisconnectionFrame& SocketControlFrame::_internal_disconnection() const {
  const ::location::nearby::mediums::DisconnectionFrame* p = _impl_.disconnection_;
  return p != nullptr ? *p : reinterpret_cast<const ::location::nearby::mediums::DisconnectionFrame&>(
      ::location::nearby::mediums::_DisconnectionFrame_default_instance_);
}
inline const ::location::nearby::mediums::DisconnectionFrame& SocketControlFrame::disconnection() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.SocketControlFrame.disconnection)
  return _internal_disconnection();
}
inline void SocketControlFrame::unsafe_arena_set_allocated_disconnection(
    ::location::nearby::mediums::DisconnectionFrame* disconnection) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.disconnection_);
  }
  _impl_.disconnection_ = disconnection;
  if (disconnection) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.nearby.mediums.SocketControlFrame.disconnection)
}
inline ::location::nearby::mediums::DisconnectionFrame* SocketControlFrame::release_disconnection() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::location::nearby::mediums::DisconnectionFrame* temp = _impl_.disconnection_;
  _impl_.disconnection_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::location::nearby::mediums::DisconnectionFrame* SocketControlFrame::unsafe_arena_release_disconnection() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.SocketControlFrame.disconnection)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::location::nearby::mediums::DisconnectionFrame* temp = _impl_.disconnection_;
  _impl_.disconnection_ = nullptr;
  return temp;
}
inline ::location::nearby::mediums::DisconnectionFrame* SocketControlFrame::_internal_mutable_disconnection() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.disconnection_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::nearby::mediums::DisconnectionFrame>(GetArenaForAllocation());
    _impl_.disconnection_ = p;
  }
  return _impl_.disconnection_;
}
inline ::location::nearby::mediums::DisconnectionFrame* SocketControlFrame::mutable_disconnection() {
  ::location::nearby::mediums::DisconnectionFrame* _msg = _internal_mutable_disconnection();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.SocketControlFrame.disconnection)
  return _msg;
}
inline void SocketControlFrame::set_allocated_disconnection(::location::nearby::mediums::DisconnectionFrame* disconnection) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.disconnection_;
  }
  if (disconnection) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(disconnection);
    if (message_arena != submessage_arena) {
      disconnection = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, disconnection, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.disconnection_ = disconnection;
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.SocketControlFrame.disconnection)
}

// optional .location.nearby.mediums.PacketAcknowledgementFrame packet_acknowledgement = 4;
inline bool SocketControlFrame::has_packet_acknowledgement() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.packet_acknowledgement_ != nullptr);
  return value;
}
inline void SocketControlFrame::clear_packet_acknowledgement() {
  if (_impl_.packet_acknowledgement_ != nullptr) _impl_.packet_acknowledgement_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::location::nearby::mediums::PacketAcknowledgementFrame& SocketControlFrame::_internal_packet_acknowledgement() const {
  const ::location::nearby::mediums::PacketAcknowledgementFrame* p = _impl_.packet_acknowledgement_;
  return p != nullptr ? *p : reinterpret_cast<const ::location::nearby::mediums::PacketAcknowledgementFrame&>(
      ::location::nearby::mediums::_PacketAcknowledgementFrame_default_instance_);
}
inline const ::location::nearby::mediums::PacketAcknowledgementFrame& SocketControlFrame::packet_acknowledgement() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.SocketControlFrame.packet_acknowledgement)
  return _internal_packet_acknowledgement();
}
inline void SocketControlFrame::unsafe_arena_set_allocated_packet_acknowledgement(
    ::location::nearby::mediums::PacketAcknowledgementFrame* packet_acknowledgement) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.packet_acknowledgement_);
  }
  _impl_.packet_acknowledgement_ = packet_acknowledgement;
  if (packet_acknowledgement) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:location.nearby.mediums.SocketControlFrame.packet_acknowledgement)
}
inline ::location::nearby::mediums::PacketAcknowledgementFrame* SocketControlFrame::release_packet_acknowledgement() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::location::nearby::mediums::PacketAcknowledgementFrame* temp = _impl_.packet_acknowledgement_;
  _impl_.packet_acknowledgement_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::location::nearby::mediums::PacketAcknowledgementFrame* SocketControlFrame::unsafe_arena_release_packet_acknowledgement() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.SocketControlFrame.packet_acknowledgement)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::location::nearby::mediums::PacketAcknowledgementFrame* temp = _impl_.packet_acknowledgement_;
  _impl_.packet_acknowledgement_ = nullptr;
  return temp;
}
inline ::location::nearby::mediums::PacketAcknowledgementFrame* SocketControlFrame::_internal_mutable_packet_acknowledgement() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.packet_acknowledgement_ == nullptr) {
    auto* p = CreateMaybeMessage<::location::nearby::mediums::PacketAcknowledgementFrame>(GetArenaForAllocation());
    _impl_.packet_acknowledgement_ = p;
  }
  return _impl_.packet_acknowledgement_;
}
inline ::location::nearby::mediums::PacketAcknowledgementFrame* SocketControlFrame::mutable_packet_acknowledgement() {
  ::location::nearby::mediums::PacketAcknowledgementFrame* _msg = _internal_mutable_packet_acknowledgement();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.SocketControlFrame.packet_acknowledgement)
  return _msg;
}
inline void SocketControlFrame::set_allocated_packet_acknowledgement(::location::nearby::mediums::PacketAcknowledgementFrame* packet_acknowledgement) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.packet_acknowledgement_;
  }
  if (packet_acknowledgement) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(packet_acknowledgement);
    if (message_arena != submessage_arena) {
      packet_acknowledgement = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, packet_acknowledgement, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.packet_acknowledgement_ = packet_acknowledgement;
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.SocketControlFrame.packet_acknowledgement)
}

// -------------------------------------------------------------------

// IntroductionFrame

// optional bytes service_id_hash = 1;
inline bool IntroductionFrame::has_service_id_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void IntroductionFrame::clear_service_id_hash() {
  _impl_.service_id_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& IntroductionFrame::service_id_hash() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.IntroductionFrame.service_id_hash)
  return _internal_service_id_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntroductionFrame::set_service_id_hash(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_id_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.IntroductionFrame.service_id_hash)
}
inline std::string* IntroductionFrame::mutable_service_id_hash() {
  std::string* _s = _internal_mutable_service_id_hash();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.IntroductionFrame.service_id_hash)
  return _s;
}
inline const std::string& IntroductionFrame::_internal_service_id_hash() const {
  return _impl_.service_id_hash_.Get();
}
inline void IntroductionFrame::_internal_set_service_id_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_id_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* IntroductionFrame::_internal_mutable_service_id_hash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_id_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* IntroductionFrame::release_service_id_hash() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.IntroductionFrame.service_id_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_id_hash_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void IntroductionFrame::set_allocated_service_id_hash(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_id_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_id_hash_.IsDefault()) {
          _impl_.service_id_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.IntroductionFrame.service_id_hash)
}

// optional .location.nearby.mediums.SocketVersion socket_version = 2;
inline bool IntroductionFrame::has_socket_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void IntroductionFrame::clear_socket_version() {
  _impl_.socket_version_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::location::nearby::mediums::SocketVersion IntroductionFrame::socket_version() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.IntroductionFrame.socket_version)
  return _internal_socket_version();
}
inline void IntroductionFrame::set_socket_version(::location::nearby::mediums::SocketVersion value) {
   _internal_set_socket_version(value);
  // @@protoc_insertion_point(field_set:location.nearby.mediums.IntroductionFrame.socket_version)
}
inline ::location::nearby::mediums::SocketVersion IntroductionFrame::_internal_socket_version() const {
  return static_cast<::location::nearby::mediums::SocketVersion>(_impl_.socket_version_);
}
inline void IntroductionFrame::_internal_set_socket_version(::location::nearby::mediums::SocketVersion value) {
  assert(::location::nearby::mediums::SocketVersion_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.socket_version_ = value;
}

// optional string service_id_hash_salt = 3;
inline bool IntroductionFrame::has_service_id_hash_salt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void IntroductionFrame::clear_service_id_hash_salt() {
  _impl_.service_id_hash_salt_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& IntroductionFrame::service_id_hash_salt() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.IntroductionFrame.service_id_hash_salt)
  return _internal_service_id_hash_salt();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void IntroductionFrame::set_service_id_hash_salt(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.service_id_hash_salt_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.IntroductionFrame.service_id_hash_salt)
}
inline std::string* IntroductionFrame::mutable_service_id_hash_salt() {
  std::string* _s = _internal_mutable_service_id_hash_salt();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.IntroductionFrame.service_id_hash_salt)
  return _s;
}
inline const std::string& IntroductionFrame::_internal_service_id_hash_salt() const {
  return _impl_.service_id_hash_salt_.Get();
}
inline void IntroductionFrame::_internal_set_service_id_hash_salt(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.service_id_hash_salt_.Set(value, GetArenaForAllocation());
}
inline std::string* IntroductionFrame::_internal_mutable_service_id_hash_salt() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.service_id_hash_salt_.Mutable( GetArenaForAllocation());
}
inline std::string* IntroductionFrame::release_service_id_hash_salt() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.IntroductionFrame.service_id_hash_salt)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.service_id_hash_salt_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_hash_salt_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void IntroductionFrame::set_allocated_service_id_hash_salt(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.service_id_hash_salt_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_id_hash_salt_.IsDefault()) {
          _impl_.service_id_hash_salt_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.IntroductionFrame.service_id_hash_salt)
}

// -------------------------------------------------------------------

// DisconnectionFrame

// optional bytes service_id_hash = 1;
inline bool DisconnectionFrame::has_service_id_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DisconnectionFrame::clear_service_id_hash() {
  _impl_.service_id_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DisconnectionFrame::service_id_hash() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.DisconnectionFrame.service_id_hash)
  return _internal_service_id_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DisconnectionFrame::set_service_id_hash(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_id_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.DisconnectionFrame.service_id_hash)
}
inline std::string* DisconnectionFrame::mutable_service_id_hash() {
  std::string* _s = _internal_mutable_service_id_hash();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.DisconnectionFrame.service_id_hash)
  return _s;
}
inline const std::string& DisconnectionFrame::_internal_service_id_hash() const {
  return _impl_.service_id_hash_.Get();
}
inline void DisconnectionFrame::_internal_set_service_id_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_id_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* DisconnectionFrame::_internal_mutable_service_id_hash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_id_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* DisconnectionFrame::release_service_id_hash() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.DisconnectionFrame.service_id_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_id_hash_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DisconnectionFrame::set_allocated_service_id_hash(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_id_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_id_hash_.IsDefault()) {
          _impl_.service_id_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.DisconnectionFrame.service_id_hash)
}

// -------------------------------------------------------------------

// PacketAcknowledgementFrame

// optional bytes service_id_hash = 1;
inline bool PacketAcknowledgementFrame::has_service_id_hash() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void PacketAcknowledgementFrame::clear_service_id_hash() {
  _impl_.service_id_hash_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PacketAcknowledgementFrame::service_id_hash() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.PacketAcknowledgementFrame.service_id_hash)
  return _internal_service_id_hash();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PacketAcknowledgementFrame::set_service_id_hash(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_id_hash_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.PacketAcknowledgementFrame.service_id_hash)
}
inline std::string* PacketAcknowledgementFrame::mutable_service_id_hash() {
  std::string* _s = _internal_mutable_service_id_hash();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.PacketAcknowledgementFrame.service_id_hash)
  return _s;
}
inline const std::string& PacketAcknowledgementFrame::_internal_service_id_hash() const {
  return _impl_.service_id_hash_.Get();
}
inline void PacketAcknowledgementFrame::_internal_set_service_id_hash(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_id_hash_.Set(value, GetArenaForAllocation());
}
inline std::string* PacketAcknowledgementFrame::_internal_mutable_service_id_hash() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_id_hash_.Mutable( GetArenaForAllocation());
}
inline std::string* PacketAcknowledgementFrame::release_service_id_hash() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.PacketAcknowledgementFrame.service_id_hash)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_id_hash_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_hash_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void PacketAcknowledgementFrame::set_allocated_service_id_hash(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_id_hash_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_id_hash_.IsDefault()) {
          _impl_.service_id_hash_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.PacketAcknowledgementFrame.service_id_hash)
}

// optional int32 received_size = 2;
inline bool PacketAcknowledgementFrame::has_received_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void PacketAcknowledgementFrame::clear_received_size() {
  _impl_.received_size_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t PacketAcknowledgementFrame::received_size() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.PacketAcknowledgementFrame.received_size)
  return _internal_received_size();
}
inline void PacketAcknowledgementFrame::set_received_size(::int32_t value) {
  _internal_set_received_size(value);
  // @@protoc_insertion_point(field_set:location.nearby.mediums.PacketAcknowledgementFrame.received_size)
}
inline ::int32_t PacketAcknowledgementFrame::_internal_received_size() const {
  return _impl_.received_size_;
}
inline void PacketAcknowledgementFrame::_internal_set_received_size(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.received_size_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediums
}  // namespace nearby
}  // namespace location


PROTOBUF_NAMESPACE_OPEN

template <>
struct is_proto_enum<::location::nearby::mediums::SocketControlFrame_ControlFrameType> : std::true_type {};
template <>
struct is_proto_enum<::location::nearby::mediums::SocketVersion> : std::true_type {};

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fble_5fframes_2eproto_2epb_2eh
