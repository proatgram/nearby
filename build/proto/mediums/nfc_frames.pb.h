// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/mediums/nfc_frames.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fnfc_5fframes_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fnfc_5fframes_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_proto_2fmediums_2fnfc_5fframes_2eproto

PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fmediums_2fnfc_5fframes_2eproto {
  static const ::uint32_t offsets[];
};
namespace location {
namespace nearby {
namespace mediums {
class AdvertisementData;
struct AdvertisementDataDefaultTypeInternal;
extern AdvertisementDataDefaultTypeInternal _AdvertisementData_default_instance_;
class AdvertisementRequest;
struct AdvertisementRequestDefaultTypeInternal;
extern AdvertisementRequestDefaultTypeInternal _AdvertisementRequest_default_instance_;
}  // namespace mediums
}  // namespace nearby
}  // namespace location
PROTOBUF_NAMESPACE_OPEN
template <>
::location::nearby::mediums::AdvertisementData* Arena::CreateMaybeMessage<::location::nearby::mediums::AdvertisementData>(Arena*);
template <>
::location::nearby::mediums::AdvertisementRequest* Arena::CreateMaybeMessage<::location::nearby::mediums::AdvertisementRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

namespace location {
namespace nearby {
namespace mediums {

// ===================================================================


// -------------------------------------------------------------------

class AdvertisementData final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.AdvertisementData) */ {
 public:
  inline AdvertisementData() : AdvertisementData(nullptr) {}
  ~AdvertisementData() override;
  explicit PROTOBUF_CONSTEXPR AdvertisementData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdvertisementData(const AdvertisementData& from);
  AdvertisementData(AdvertisementData&& from) noexcept
    : AdvertisementData() {
    *this = ::std::move(from);
  }

  inline AdvertisementData& operator=(const AdvertisementData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvertisementData& operator=(AdvertisementData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AdvertisementData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvertisementData* internal_default_instance() {
    return reinterpret_cast<const AdvertisementData*>(
               &_AdvertisementData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AdvertisementData& a, AdvertisementData& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvertisementData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvertisementData* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvertisementData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdvertisementData>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AdvertisementData& from);
  void MergeFrom(const AdvertisementData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdvertisementData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.AdvertisementData";
  }
  protected:
  explicit AdvertisementData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kPublicKeyFieldNumber = 2,
  };
  // optional bytes tag = 1;
  bool has_tag() const;
  void clear_tag() ;
  const std::string& tag() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tag(Arg_&& arg, Args_... args);
  std::string* mutable_tag();
  PROTOBUF_NODISCARD std::string* release_tag();
  void set_allocated_tag(std::string* ptr);

  private:
  const std::string& _internal_tag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tag(
      const std::string& value);
  std::string* _internal_mutable_tag();

  public:
  // optional bytes public_key = 2;
  bool has_public_key() const;
  void clear_public_key() ;
  const std::string& public_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* ptr);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.AdvertisementData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tag_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fnfc_5fframes_2eproto;
};// -------------------------------------------------------------------

class AdvertisementRequest final :
    public ::PROTOBUF_NAMESPACE_ID::MessageLite /* @@protoc_insertion_point(class_definition:location.nearby.mediums.AdvertisementRequest) */ {
 public:
  inline AdvertisementRequest() : AdvertisementRequest(nullptr) {}
  ~AdvertisementRequest() override;
  explicit PROTOBUF_CONSTEXPR AdvertisementRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdvertisementRequest(const AdvertisementRequest& from);
  AdvertisementRequest(AdvertisementRequest&& from) noexcept
    : AdvertisementRequest() {
    *this = ::std::move(from);
  }

  inline AdvertisementRequest& operator=(const AdvertisementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdvertisementRequest& operator=(AdvertisementRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString);
  }
  inline std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<std::string>();
  }

  static const AdvertisementRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdvertisementRequest* internal_default_instance() {
    return reinterpret_cast<const AdvertisementRequest*>(
               &_AdvertisementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AdvertisementRequest& a, AdvertisementRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AdvertisementRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdvertisementRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdvertisementRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdvertisementRequest>(arena);
  }
  void CheckTypeAndMergeFrom(const ::PROTOBUF_NAMESPACE_ID::MessageLite& from)  final;
  void CopyFrom(const AdvertisementRequest& from);
  void MergeFrom(const AdvertisementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AdvertisementRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "location.nearby.mediums.AdvertisementRequest";
  }
  protected:
  explicit AdvertisementRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServiceIdFieldNumber = 1,
    kEndpointIdFieldNumber = 2,
    kPublicKeyFieldNumber = 3,
  };
  // optional string service_id = 1;
  bool has_service_id() const;
  void clear_service_id() ;
  const std::string& service_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_service_id(Arg_&& arg, Args_... args);
  std::string* mutable_service_id();
  PROTOBUF_NODISCARD std::string* release_service_id();
  void set_allocated_service_id(std::string* ptr);

  private:
  const std::string& _internal_service_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_service_id(
      const std::string& value);
  std::string* _internal_mutable_service_id();

  public:
  // optional string endpoint_id = 2;
  bool has_endpoint_id() const;
  void clear_endpoint_id() ;
  const std::string& endpoint_id() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_endpoint_id(Arg_&& arg, Args_... args);
  std::string* mutable_endpoint_id();
  PROTOBUF_NODISCARD std::string* release_endpoint_id();
  void set_allocated_endpoint_id(std::string* ptr);

  private:
  const std::string& _internal_endpoint_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint_id(
      const std::string& value);
  std::string* _internal_mutable_endpoint_id();

  public:
  // optional bytes public_key = 3;
  bool has_public_key() const;
  void clear_public_key() ;
  const std::string& public_key() const;




  template <typename Arg_ = const std::string&, typename... Args_>
  void set_public_key(Arg_&& arg, Args_... args);
  std::string* mutable_public_key();
  PROTOBUF_NODISCARD std::string* release_public_key();
  void set_allocated_public_key(std::string* ptr);

  private:
  const std::string& _internal_public_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_key(
      const std::string& value);
  std::string* _internal_mutable_public_key();

  public:
  // @@protoc_insertion_point(class_scope:location.nearby.mediums.AdvertisementRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr service_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_key_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_proto_2fmediums_2fnfc_5fframes_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// AdvertisementData

// optional bytes tag = 1;
inline bool AdvertisementData::has_tag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdvertisementData::clear_tag() {
  _impl_.tag_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdvertisementData::tag() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.AdvertisementData.tag)
  return _internal_tag();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdvertisementData::set_tag(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.tag_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.AdvertisementData.tag)
}
inline std::string* AdvertisementData::mutable_tag() {
  std::string* _s = _internal_mutable_tag();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.AdvertisementData.tag)
  return _s;
}
inline const std::string& AdvertisementData::_internal_tag() const {
  return _impl_.tag_.Get();
}
inline void AdvertisementData::_internal_set_tag(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.tag_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertisementData::_internal_mutable_tag() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.tag_.Mutable( GetArenaForAllocation());
}
inline std::string* AdvertisementData::release_tag() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.AdvertisementData.tag)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.tag_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.tag_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdvertisementData::set_allocated_tag(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.tag_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.tag_.IsDefault()) {
          _impl_.tag_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.AdvertisementData.tag)
}

// optional bytes public_key = 2;
inline bool AdvertisementData::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AdvertisementData::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdvertisementData::public_key() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.AdvertisementData.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdvertisementData::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.AdvertisementData.public_key)
}
inline std::string* AdvertisementData::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.AdvertisementData.public_key)
  return _s;
}
inline const std::string& AdvertisementData::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void AdvertisementData::_internal_set_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertisementData::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.public_key_.Mutable( GetArenaForAllocation());
}
inline std::string* AdvertisementData::release_public_key() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.AdvertisementData.public_key)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.public_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdvertisementData::set_allocated_public_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.public_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_key_.IsDefault()) {
          _impl_.public_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.AdvertisementData.public_key)
}

// -------------------------------------------------------------------

// AdvertisementRequest

// optional string service_id = 1;
inline bool AdvertisementRequest::has_service_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void AdvertisementRequest::clear_service_id() {
  _impl_.service_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AdvertisementRequest::service_id() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.AdvertisementRequest.service_id)
  return _internal_service_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdvertisementRequest::set_service_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.service_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.AdvertisementRequest.service_id)
}
inline std::string* AdvertisementRequest::mutable_service_id() {
  std::string* _s = _internal_mutable_service_id();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.AdvertisementRequest.service_id)
  return _s;
}
inline const std::string& AdvertisementRequest::_internal_service_id() const {
  return _impl_.service_id_.Get();
}
inline void AdvertisementRequest::_internal_set_service_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;


  _impl_.service_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::_internal_mutable_service_id() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.service_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::release_service_id() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.AdvertisementRequest.service_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.service_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.service_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdvertisementRequest::set_allocated_service_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.service_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.service_id_.IsDefault()) {
          _impl_.service_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.AdvertisementRequest.service_id)
}

// optional string endpoint_id = 2;
inline bool AdvertisementRequest::has_endpoint_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void AdvertisementRequest::clear_endpoint_id() {
  _impl_.endpoint_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AdvertisementRequest::endpoint_id() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.AdvertisementRequest.endpoint_id)
  return _internal_endpoint_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdvertisementRequest::set_endpoint_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.endpoint_id_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.AdvertisementRequest.endpoint_id)
}
inline std::string* AdvertisementRequest::mutable_endpoint_id() {
  std::string* _s = _internal_mutable_endpoint_id();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.AdvertisementRequest.endpoint_id)
  return _s;
}
inline const std::string& AdvertisementRequest::_internal_endpoint_id() const {
  return _impl_.endpoint_id_.Get();
}
inline void AdvertisementRequest::_internal_set_endpoint_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;


  _impl_.endpoint_id_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::_internal_mutable_endpoint_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.endpoint_id_.Mutable( GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::release_endpoint_id() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.AdvertisementRequest.endpoint_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.endpoint_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.endpoint_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdvertisementRequest::set_allocated_endpoint_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.endpoint_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.endpoint_id_.IsDefault()) {
          _impl_.endpoint_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.AdvertisementRequest.endpoint_id)
}

// optional bytes public_key = 3;
inline bool AdvertisementRequest::has_public_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void AdvertisementRequest::clear_public_key() {
  _impl_.public_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AdvertisementRequest::public_key() const {
  // @@protoc_insertion_point(field_get:location.nearby.mediums.AdvertisementRequest.public_key)
  return _internal_public_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AdvertisementRequest::set_public_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.public_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:location.nearby.mediums.AdvertisementRequest.public_key)
}
inline std::string* AdvertisementRequest::mutable_public_key() {
  std::string* _s = _internal_mutable_public_key();
  // @@protoc_insertion_point(field_mutable:location.nearby.mediums.AdvertisementRequest.public_key)
  return _s;
}
inline const std::string& AdvertisementRequest::_internal_public_key() const {
  return _impl_.public_key_.Get();
}
inline void AdvertisementRequest::_internal_set_public_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;


  _impl_.public_key_.Set(value, GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::_internal_mutable_public_key() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.public_key_.Mutable( GetArenaForAllocation());
}
inline std::string* AdvertisementRequest::release_public_key() {
  // @@protoc_insertion_point(field_release:location.nearby.mediums.AdvertisementRequest.public_key)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.public_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.public_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void AdvertisementRequest::set_allocated_public_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.public_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.public_key_.IsDefault()) {
          _impl_.public_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:location.nearby.mediums.AdvertisementRequest.public_key)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace mediums
}  // namespace nearby
}  // namespace location


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_proto_2fmediums_2fnfc_5fframes_2eproto_2epb_2eh
